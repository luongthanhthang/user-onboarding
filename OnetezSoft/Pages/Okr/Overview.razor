@page "/okr/overview"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="main_content" style="@(listMode ? "" : "overflow:hidden")">
  <div class="card flex_column @(listMode ? "" : "is_fullheight")">
    <div class="pb-4">
      <ul class="columns is-vcentered is-variable is-2 is-mobile is-multiline">
        <li class="column is-full-mobile">
          <h1 class="title is-5 has-text-info">
            TỔNG QUAN OKRs
          </h1>
        </li>
        <li class="column is-narrow">
          <Dropdown CloseOnClickMenu>
            <Trigger>
              <a class="icon-text">
                <span class="icon">
                  <span class="material-icons-outlined">
                    @(listMode ? "format_list_bulleted" : "account_tree")
                  </span>
                </span>
                <span>
                  @(listMode ? "Danh sách" : "Cây")
                </span>
                <span class="icon">
                  <span class="material-icons-outlined">
                    arrow_drop_down
                  </span>
                </span>
              </a>
            </Trigger>
            <MenuContent>
              @if (!Layout.IsMobile)
              {
                <a class="dropdown-item" @onclick="() => ChangeMode(false)">
                  <span class="has-text-weight-normal">Cây</span>
                </a>
              }
              <a class="dropdown-item" @onclick="() => ChangeMode(true)">
                <span class="has-text-weight-normal">Danh sách</span>
              </a>
            </MenuContent>
          </Dropdown>
        </li>
        <li class="column is-narrow is-full-mobile">
          <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
        </li>
        @if (listMode)
        {
          <li class="column is-one-quarter-tablet">
            <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList"
                          OnUpdate="ChangeFilterUser" />
          </li>
        }
      </ul>
    </div>
    @if (listMode)
    {
      <div class="inner_section px-5" style="flex:1">
        <ul 
          class="columns is-multiline is-mobile is-variable is-1 px-4 my-1 is-size-7 is-hidden-mobile">
          <li class="column">
          </li>
          <li class="column is-3">
            Quản lý
          </li>
          <li class="column is-narrow">
            <div style="width: 100px;">Số nhân sự</div>
          </li>
          <li class="column is-2 has-text-right">
            Tiến độ OKRs
          </li>
        </ul>
        @foreach (var item in listview)
        {
          var childs = GetChilds(item.id);
          <_ListViewItem model="item" childs="childs" database="database" allOkrs="allOkrs" ShowChilds="true" />
        }
      </div>
    }
    else
    {
      <div id="okr_treeview" class="tree_okr p-1 scrollx scrolly inner_section" style="flex:1">
        @foreach (var item in treeview)
        {
          var childs = GetChilds(item.id);
          <_TreeViewItem model="item" childs="childs" database="database"
                         level="0" isFirst="true" isLast="true" />
        }
      </div>
    }
  </div>
  @if (listMode)
  {
    <div class="card flex_column">
      <ul class="columns is-vcentered is-variable is-2 mb-2">
        <li class="column">
          <div class="user_item">
            <img class="image is-32x32 mr-2" src="@filterUser.avatar" alt="IMG">
            <span class="title is-5 is-size-6-mobile has-text-info">
              @filterUser.FullName - OKRs Cá Nhân
            </span>
          </div>
        </li>
      </ul>
      <div class="inner_section" style="flex:1">
        <table class="table is-fullwidth is-noborder is-responsive">
          <thead>
            <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
              <th class="pt-0">Mục tiêu</th>
              <th class="pt-0" width="160px">Kết Quả Then Chốt</th>
              <th class="pt-0" width="200px" align="center">Tiến độ</th>
              <th class="pt-0" width="100px" align="center">Thay đổi</th>
              <th class="pt-0" width="100px" align="center">Ngày tạo</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var okr in okrList)
            {
              var showKey = okrsShow.Contains(okr.id);
              var progress = DbOkr.GetProgress(okr.key_results);
              var okrColor = Shared.ProgressColor(progress);

              <tr>
                <td>
                  <div class="is-flex">
                    <span class="has-text-weight-semibold has-text-link">
                      @okr.name
                    </span>
                    @if (okr.done)
                    {
                      <span class="ml-1 icon" title="OKRs đã hoàn thành">
                        <i class="material-icons is-size-6 has-text-success">check_circle</i>
                      </span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Kết quả</label>
                  <div class="td-value">
                    <a class="icon-text has-text-weight-semibold has-text-info" @onclick="() => ShowKeys(okr.id)">
                      <span>@okr.key_results.Count kết quả</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">
                          @(showKey ? "arrow_drop_down" : "arrow_right")
                        </i>
                      </span>
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Tiến độ</label>
                  <div class="td-value">
                    <div class="progress_has_value">
                      <progress class="progress is-small @okrColor" value="@Convert.ToInt32(progress)" max="100"></progress>
                      <span>@Shared.FormatPercent(progress)%</span>
                    </div>
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Thay đổi</label>
                  <div class="td-value has-text-weight-semibold">
                    @Shared.FormatPercent(progress - okr.progress_prev)%
                  </div>
                </td>
                <td align="center">
                  <label class="td-label">Ngày tạo</label>
                  <div class="td-value">
                    @string.Format("{0:dd/MM/yyyy}", new DateTime(okr.date_create))
                  </div>
                </td>
              </tr>

              if (showKey)
              {
                foreach (var kr in okr.key_results)
                {
                  var confident = DbOkr.Confident(kr.confident);
                  <tr>
                    <td class="pl-4">
                      @kr.name
                    </td>
                    <td class="pl-2">
                      @if (!string.IsNullOrEmpty(kr.link))
                      {
                        <a class="icon-text has-text-link" href="@kr.link" target="_blank">
                          <span class="icon is-small">
                            <i class="material-icons-outlined">attach_file</i>
                          </span>
                          <span>Kết quả</span>
                        </a>
                      }
                    </td>
                    <td>
                      <label class="td-label">Đạt được</label>
                      <div class="td-value">
                        <span class="has-text-success" title="@string.Format("{0:0,0.000} / {1:0,0.000}", kr.result, kr.target)">
                          @Shared.ConvertNumber(kr.result)/@Shared.ConvertNumber(kr.target)
                        </span>
                        <span class="is-pulled-right">@kr.unit</span>
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Thay đổi</label>
                      <div class="td-value">
                        @Shared.FormatPercent(Shared.Progress(kr.change, kr.target))%
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Tự tin</label>
                      <div class="td-value has-text-weight-semibold">
                        <span class="@confident.color">@confident.name</span>
                      </div>
                    </td>
                  </tr>
                }
              }
            }
          </tbody>
        </table>
      </div>
    </div>
  }
</section>

<_StickSideBar model="stickSideBar" OnClose="CloseSideBar" />

@if (!CheckAccess())
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-content" style="max-width: 360px;">
      <div class="box has-text-centered pt-5">
        <span class="icon is-large has-text-danger">
          <i class="material-icons-outlined is-size-1">error_outline</i>
        </span>
        <div class="is-size-6 py-4 has-text-weight-semibold">
          @msgAccess
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Tổng quan OKRs";
  private List<DepartmentModel> listview = new();
  private List<DepartmentModel> treeview = new();
  private List<DepartmentModel> database = new();
  private List<OkrModel> okrList = new();
  private List<OkrModel> allOkrs = new();
  private List<string> okrsShow = new();
  private string filterDepartment = string.Empty;
  private UserModel filterUser = new();
  private bool listMode = false;
  private DepartmentModel stickSideBar = null;
  private string msgAccess = string.Empty;

  private SharedStorage shareStorage = new();

  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "okrs", out msgAccess);
  }

  protected override async Task OnInitializedAsync()
  {
    allOkrs = await DbOkr.GetAll(Layout.Company.id, Layout.CycleId);
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    filterUser = Layout.User;
    database = await DbDepartment.GetAll(Layout.Company.id);
    listview = await DbDepartment.GetList(Layout.Company.id, null);
    GetTreeView();
    await GetOkrUser();
    Subscribe();

    listMode = Layout.IsMobile;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("dragScroll", "okr_treeview");
      if (Layout.IsMobile)
        await ChangeMode(true);
    }
  }

  private async Task ChangeMode(bool value)
  {
    listMode = value;
    await JSRuntime.InvokeVoidAsync("dragScroll", "okr_treeview");
  }

  private void ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    GetTreeView();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
    {
      filterUser = await DbUser.Get(Layout.Company.id, value, globalService);
      GetOkrUser();
    }
  }

  private void UserSelected(UserModel item)
  {
    filterUser = item;
    GetOkrUser();
  }


  private List<DepartmentModel> GetChilds(string parent)
  {
    if (string.IsNullOrEmpty(parent))
      return database.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
    else
      return database.Where(x => x.parent == parent).ToList();
  }

  private void GetTreeView()
  {
    if (string.IsNullOrEmpty(filterDepartment))
      treeview = database.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
    else
      treeview = database.Where(x => x.id == filterDepartment).ToList();

    if (treeview.Count > 1)
    {
      var main = new DepartmentModel()
        {
          name = "TỔNG QUAN OKRs",
          members_id = shareStorage.MemberList.Select(x => x.id).ToList(),
          members_list = new()
        };
      treeview = new() { main };
    }
  }

  private async Task<bool> GetOkrUser()
  {
    bool _success = true;
    try
    {
      okrList = allOkrs.Where(x => x.user_create == filterUser.id).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetOkrUser()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void ShowKeys(string id)
  {
    if (okrsShow.Contains(id))
      okrsShow.Remove(id);
    else
      okrsShow.Add(id);
  }

  private void CloseSideBar()
  {
    stickSideBar = null;
  }

  public void Subscribe()
  {
    MessagingCenter.Subscribe<_ListViewItem, UserModel>(this, "okr_listview" + Layout.User.id, (sender, value) =>
    {
      UserSelected(value);
      InvokeAsync(StateHasChanged);
    });

    MessagingCenter.Subscribe<_TreeViewItem, DepartmentModel>(this, "okr_treeview" + Layout.User.id, (sender, value) =>
    {
      stickSideBar = value;
      InvokeAsync(StateHasChanged);
    });
  }
}