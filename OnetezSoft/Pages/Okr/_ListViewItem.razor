@inject GlobalService globalService

@if(model != null)
{
  var manager = GetManager();
  <ul class="columns is-multiline is-mobile is-variable is-1 box_border p-4 p-2-mobile my-2"
      style="@(!string.IsNullOrEmpty(Color) ? $"border-left-color: {Color};" : "")">
    <li class="column is-full-mobile has-text-weight-semibold">
      <a @onclick="ToggleChilds">
        @model.name
      </a>
    </li>
    <li class="column is-3-tablet is-full-mobile">
      @if(manager != null)
      {
        <a class="user_item" @onclick="() => ShowOKRsUser(manager.id)">
          <img class="image is-24x24 mr-2" src="@manager.avatar" alt="IMG" />
          <span class="text_1_line">@manager.name</span>
        </a>
      }
    </li>
    <li class="column is-narrow-tablet is-full-mobile">
      <div style="width: 100px;">@model.members_id.Count nhân sự</div>
    </li>
    <li class="column is-2-tablet is-full-mobile has-text-right has-text-weight-semibold">
      @if(manager != null)
      {
        var okrList = allOkrs.Where(x => x.user_create == manager.id).ToList();
        var progress = GetProgress(okrList);
        var progressColor = Shared.ProgressColor(progress);

        <div class="progress_has_value">
          <progress class="progress is-small @progressColor" value="@Convert.ToInt32(progress)" max="100"></progress>
          <span>@Shared.FormatPercent(progress)%</span>
        </div>
      }
    </li>
  </ul>

  @if (ShowChilds)
  {
    <div class="pl-6 pl-4-mobile">
      @for (int i = 0; i < childs.Count; i++)
      {
        var item = childs[i];
        var childList = database.Where(x => x.parent == item.id).ToList();
        var color = string.IsNullOrEmpty(Color) ? Shared.ColorRandom(i + 1) : Color;
        <_ListViewItem model="item" childs="childList" database="database" allOkrs="allOkrs" ShowChilds="false" Color="@color" />
      }
      @if (childs.Count == 0)
      {
        <div class="box_border p-4 my-2" style="border-left-color: #ddd;">
          Không có phòng ban nhỏ hơn.
        </div>
      }
    </div>
  }
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public DepartmentModel model { get; set; }
  [Parameter]
  public List<OkrModel> allOkrs { get; set; } = new();
  [Parameter]
  public List<DepartmentModel> childs { get; set; } = new();
  [Parameter]
  public List<DepartmentModel> database { get; set; } = new();
  [Parameter]
  public bool ShowChilds { get; set; }
  [Parameter]
  public string Color { get; set; }

  private List<UserModel> allUser = new();

  protected override async Task OnInitializedAsync()
  {
    allUser = await DbUser.GetAll(Layout.Company.id, globalService);
  }

  private MemberModel GetManager()
  {
    var allMember = allUser.Select(x => UserService.ConvertToMember(x));
    var manager = model.members_list.Where(x => x.role < 3).OrderBy(x => x.role).FirstOrDefault();
    if (manager != null)
      return allMember.FirstOrDefault(x => x.id == manager.id);
    return null;
  }

  private double GetProgress(List<OkrModel> list)
  {
    double total = 0;
    foreach (var item in list)
      total += DbOkr.GetProgress(item.key_results);
    return list.Count > 0 ? total / list.Count : 0;
  }

  private void ToggleChilds()
  {
    ShowChilds = !ShowChilds;
  }

  private void ShowOKRsUser(string value)
  {
    MessagingCenter.Send(this, "okr_listview" + Layout.User.id, value);
  }
}