@page "/okr/review"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>Đánh giá OKRs</PageTitle>

<div class="tabs">
  <div class="tabs_name">
    Đánh giá OKRs
  </div>
  <ul>
    <li class="@(!isTeam ? "is-active" : "")" @onclick="() => isTeam = false">
      <a class="has-text-weight-normal">Cá nhân</a>
    </li>
    <li class="@(isTeam ? "is-active" : "")" @onclick="() => isTeam = true">
      <a class="has-text-weight-normal">Đội nhóm</a>
    </li>
  </ul>
</div>

<section class="main_content">
  @if (!isTeam)
  {
    <div class="">
      <div class="inner_section">
        <table class="table is-fullwidth is-vcentered is-noborder is-responsive">
          <thead>
            <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
              <th class="pt-0">Mục tiêu</th>
              <th class="pt-0" width="60px"></th>
              <th class="pt-0" width="130px" align="center">Tiến độ</th>
              <th class="pt-0" width="120px" align="center">Điểm hệ thống</th>
              <th class="pt-0" width="120px" align="center">Tự đánh giá</th>
              <th class="pt-0" width="120px" align="center">QL đánh giá</th>
              <th class="pt-0" width="110px" align="center">Nhân viên</th>
              <th class="pt-0" width="110px" align="center">Quản lý</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var okr in myOkrList)
            {
              <_ReviewItem data="okr" />
            }
          </tbody>
        </table>
      </div>
    </div>
  }
  else
  {
    <div class="">
      <ul class="columns is-vcentered is-variable is-2 mb-2">
        <li class="column is-narrow">
          <StaticDropdown value="@filterStatus" title="Tất cả trạng thái" data="statusList"
                          OnUpdate="ChangeFilterStatus" />
        </li>
        <li class="column is-narrow">
          <DepartmentDropdown main="OKRs xem hoặc đánh giá" isMember="true" department="@filterDepartment"
                              OnUpdate="ChangeFilterDepartment" />
        </li>
        <li class="column is-one-quarter">
          <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
        </li>
      </ul>

      <div class="inner_section">
        <table class="table is-fullwidth is-vcentered is-noborder is-responsive">
          <thead>
            <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
              <th class="pt-0">Mục tiêu</th>
              <th class="pt-0" width="60px"></th>
              <th class="pt-0" width="130px" align="center">Tiến độ</th>
              <th class="pt-0" width="120px" align="center">Điểm hệ thống</th>
              <th class="pt-0" width="120px" align="center">Tự đánh giá</th>
              <th class="pt-0" width="120px" align="center">QL đánh giá</th>
              <th class="pt-0" width="110px" align="center">Nhân viên</th>
              <th class="pt-0" width="110px" align="center">Quản lý</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var user in userList)
            {
              var okrList = dataOkrList.Where(x => x.user_create == user.id);
              if (!okrList.Any())
                continue;
              <tr>
                <td colspan="8">
                  <div class="user_item">
                    <img class="image is-36x36 mr-2" src="@user.avatar" alt="IMG">
                    <div>
                      <p class="has-text-weight-semibold has-text-info is-size-6">
                        @user.name
                      </p>
                      <p class="text_1_line has-text-grey is-size-7" style="max-width: 400px;">
                        @user.departments_name
                      </p>
                    </div>
                  </div>
                </td>
              </tr>
              @foreach (var okr in okrList)
              {
                <_ReviewItem data="okr" />
              }
              <tr>
                <td colspan="8">
                  <hr class="m-0" />
                </td>
              </tr>
            }
          </tbody>
        </table>
        @if (userList.Count == 0 || dataOkrList.Count == 0)
        {
          <div class="py-6 has-text-grey has-text-centered">
            Không tìm thấy dữ liệu phù hợp
          </div>
        }
      </div>
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private List<OkrModel> myOkrList = new();
  private List<OkrModel> dataOkrList = new();
  private List<MemberModel> userList = new();
  private string filterDepartment = null;
  private int filterStatus = 0;
  private List<StaticModel> statusList = new();

  private SharedStorage shareStorage = new();

  private bool isTeam;

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    statusList = GetStatusList();
    myOkrList = await DbOkr.GetList(Layout.Company.id, Layout.CycleId, Layout.User.id);
  }

  protected override async Task OnParametersSetAsync()
  {
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("department", out var outDepartment))
      await ChangeFilterDepartment(outDepartment);
    else
      GetOkrReviewList();
  }

  private void ChangeFilterStatus(int value)
  {
    filterStatus = value;
    GetOkrReviewList();
  }

  private async Task<bool> ChangeFilterDepartment(string value)
  {
    bool _success = true;
    try
    {
      userList.Clear();
      await JSRuntime.InvokeVoidAsync("taglineHide");
      if (string.IsNullOrEmpty(value))
      {
        filterDepartment = value;
        GetOkrReviewList();
        await JSRuntime.InvokeVoidAsync("history.pushState", null, "Đánh giá OKRs", "/okr/review");
      }
      else
      {
        var department = await DbDepartment.Get(Layout.Company.id, value);
        if (department != null)
        {
          var isManager = department.members_list.Any(x => x.id == Layout.User.id && x.role < 3);
          if (isManager)
          {
            filterDepartment = value;
            userList = await UserService.GetMemberListInDepartment(Layout.Company.id, department.id);
            GetOkrReviewList();
            await JSRuntime.InvokeVoidAsync("history.pushState", null,
              "Đánh giá OKRs " + department.name,
              "/okr/review?department=" + value);
          }
          else
          {
            await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không phải quản lý của phòng ban này!");
          }
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không tìm thấy dữ liệu!");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeFilterDepartment()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeFilterUser(string userId)
  {
    bool _success = true;
    try
    {
      await JSRuntime.InvokeVoidAsync("taglineHide");
      if (!string.IsNullOrEmpty(userId))
      {
        var user = shareStorage.MemberList.SingleOrDefault(x => x.id == userId);
        if (user != null)
        {
          if (await DbDepartment.CheckManagerRole(Layout.Company.id, user, Layout.User.id, null))
          {
            userList = shareStorage.MemberList.Where(x => x.id == userId).ToList();
            GetOkrReviewList();
          }
          else
            await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không phải quản lý của " + user.name);
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không tìm thấy dữ liệu!");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeFilterUser()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> GetOkrReviewList()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(filterDepartment))
      {
        // Chỉ hiện thị OKRs mà user là người xem hoặc đánh giá
        dataOkrList = await DbOkr.GetListByReview(Layout.Company.id, Layout.CycleId, Layout.User.id);
        var userReviews = dataOkrList.Select(x => x.user_create).ToList();
        userList = shareStorage.MemberList.Where(x => userReviews.Contains(x.id)).ToList();
      }
      else
      {
        var userListId = userList.Select(x => x.id).ToList();
        dataOkrList = await DbOkr.GetList(Layout.Company.id, Layout.CycleId, userListId);
      }

      if (filterStatus == 1)
        dataOkrList.RemoveAll(x => x.review_send_status > 1);
      else if (filterStatus > 1)
        dataOkrList.RemoveAll(x => x.review_send_status != filterStatus);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetOkrReviewList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void FilterOkrList()
  {
    if (filterStatus == 1)
      dataOkrList.RemoveAll(x => x.review_send_status > 1);
    else if (filterStatus > 1)
      dataOkrList.RemoveAll(x => x.review_send_status != filterStatus);
  }

  private List<StaticModel> GetStatusList()
  {
    var results = new List<StaticModel>();
    results.Add(new() { id = 1, name = "Trống" });
    results.Add(new() { id = 2, name = "Chưa xác nhận" });
    results.Add(new() { id = 3, name = "Đã xác nhận" });
    return results;
  }
}