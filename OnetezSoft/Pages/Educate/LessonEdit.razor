@page "/educate/course/manager/lesson/{Id}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content" style="overflow: @(model.type == 1 ? "unset" : "hidden")">
  @if (model != null)
  {
    <div class="flex_column is_fullheight" style="height:100%">
      <ul class="columns is-multiline is-variable is-2 mb-3">
        <li class="column">
          @if (model.type == 1)
          {
            <h1 class="title is-5 has-text-info">
              CHI TIẾT BÀI GIẢNG
            </h1>
          }
          else if (model.type == 2)
          {
            <h1 class="title is-5 has-text-info">
              CHI TIẾT BÀI TỰ LUẬN
            </h1>
          }
          else if (model.type == 3)
          {
            <h1 class="title is-5 has-text-info">
              CHI TIẾT BÀI TRẮC NGHIỆM
            </h1>
          }
        </li>
        <li class="column is-narrow">
          <a class="button is-link is-outlined" @onclick="GoBack">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">arrow_back</i>
            </span>
            <span>Trở lại</span>
          </a>
        </li>
      </ul>
      @if (model.type == 1)
      {
        <LessonContent lesson="model" />
      }
      else if (model.type == 2)
      {
        <LessoneEssay lesson="model" />
      }
      else if (model.type == 3)
      {
        <LessonQuiz lesson="model" />
      }
    </div>
  }
  else
  {
    <div class="card flex_column is_fullheight">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
      <div class="py-6 has-text-grey inner_section">
        Dữ liệu không tồn tại hoặc đã bị xóa !
      </div>
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Id { get; set; }

  private string _title = "Chỉnh sửa bài học";

  private EducateLessonModel model = null;

  protected override async Task OnInitializedAsync()
  {
    model = await DbEducateLesson.Get(Layout.Company.id, Id);
  }

  private async Task GoBack()
  {
    try
    {
      if (string.IsNullOrEmpty(model.name))
      {
        if (model.files.Any())
        {
          foreach (var link in model.files)
          {
            StorageService.DeleteFile(link);
          }
        }
        await DbEducateLesson.Delete(Layout.Company.id, model.id);
      }
      navigation.NavigateTo("/educate/course/manager/info/" + model.course, false);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GoBack()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }
}