@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="inner_section" style="flex:1">
  <ul class="columns is-multiline is-variable is-2">
    <li class="column">
      <div class="field">
        <label class="label">Tiêu đề *</label>
        <div class="control">
          <input @bind="lesson.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề bài tự luận..." />
        </div>
      </div>
    </li>
    <li class="column is-one-quarter">
      <div class="field">
        <label class="label">Khóa học</label>
        <div class="control">
          <div class="input is_bg">
            <span class="text_1_line">@(course != null ? course.name : "")</span>
          </div>
        </div>
      </div>
    </li>
    <li class="column is-one-fifth">
      <div class="field">
        <label class="label">Thời gian làm bài: phút</label>
        <div class="control">
          <input @bind="lesson.time" type="number" class="input is_bg" min="0" />
        </div>
      </div>
    </li>
    <li class="column is-full">
      <ul class="columns is-multiline is-variable is-2">
        @foreach (var item in lesson.questions)
        {
          int index = lesson.questions.IndexOf(item) + 1;
          <li class="column is-four-fifths">
            <div class="field">
              <label class="label">Câu hỏi @index</label>
              <div class="control">
                <InputArea Class="textarea is_bg" Value="@item.content"
                           OnInput="x => item.content = x" Title="Nhập nội dung câu hỏi..." />
              </div>
            </div>
          </li>
          <li class="column is-one-fifth">
            <div class="field">
              <label class="label">Điểm</label>
              <div class="field is-grouped">
                <div class="control is-expanded">
                  <input @bind="@item.point" class="input is_bg" type="number" min="1" />
                </div>
                <div class="control">
                  <a class="button is-white" @onclick="() => DeleteItem(item)">
                    <span class="icon has-text-danger">
                      <i class="material-icons-outlined is-size-5">close</i>
                    </span>
                  </a>
                </div>
              </div>
            </div>
          </li>
          @if (ProductService.CheckStorage(Layout.Company))
          {
            <li class="column is-full">
              <div class="field is-grouped">
                <div class="control">File đính kèm</div>
                <div class="control">
                  <FileUpload Path="educate/lesson/essay" Multiple="true" Small="true" Cloud="true" OnUpload="x => item.files.AddRange(x)" />
                </div>
              </div>
              <FileViews Delete="true" Values="item.files" />
            </li>
          }
        }
      </ul>
    </li>
    <li class="column is-full">
      <div class="field is-grouped is-grouped-multiline pt-3">
        <div class="control is-expanded">
          <a class="button is-white has-text-link" @onclick="() => AddItem()">
            <span class="icon">
              <span class="material-icons-outlined is-size-6">add</span>
            </span>
            <span>Thêm câu hỏi</span>
          </a>
        </div>
        <div class="control">
          <div class="field has-addons">
            <div class="control">
              <label class="button is-static">Mức điểm đạt</label>
            </div>
            <div class="control is-expanded" style="width: 60px;">
              <input @bind="lesson.point" class="input" type="number" min="1" />
            </div>
          </div>
        </div>
        <div class="control">
          <div class="field has-addons">
            <div class="control">
              <label class="button is-static">Tổng điểm</label>
            </div>
            <div class="control is-expanded" style="width: 60px;">
              <div class="input">
                @(lesson.questions.Select(x => x.point).Sum())
              </div>
            </div>
          </div>
        </div>
        <div class="control">
          <a class="button is-danger" @onclick="Delete">
            <span class="icon">
              <i class="material-icons-outlined is-size-5">delete</i>
            </span>
            <span>Xóa</span>
          </a>
        </div>
        <div class="control">
          <a class="button is-link" @onclick="Update">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
        </div>
      </div>
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EducateLessonModel lesson { get; set; }
  private EducateCourseModel course = null;

  protected override async Task OnInitializedAsync()
  {
    course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
  }

  private void AddItem()
  {
    var id = Mongo.RandomId();
    var item = new EducateLessonModel.Question()
      {
        id = id,
        point = 1
      };
    lesson.questions.Add(item);
  }

  private async Task DeleteItem(EducateLessonModel.Question item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa: {item.content}?"))
      return;

    lesson.questions.Remove(item);
  }

  private async Task Delete()
  {
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
        return;

      await DbEducateLesson.Delete(Layout.Company.id, lesson.id);
      navigation.NavigateTo("/educate/course/manager/info/" + lesson.course, false);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task Update()
  {
    try
    {
      if (StringHelper.IsEmpty(lesson.name) || lesson.time == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề và thời lượng bài tự luận !");
      else if (lesson.point <= 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Giá trị mức điểm đạt phải lớn hơn hoặc bằng 1 !");
      else if (lesson.point > lesson.questions.Select(x => x.point).Sum())
        await JSRuntime.InvokeVoidAsync("tagline", false, "Mức điểm đạt được phải nhỏ hơn tổng điểm bài thi !");
      else if (lesson.questions.Where(x => StringHelper.IsEmpty(x.content)).Count() > 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Có câu hỏi chưa nhập nội dung !");
      else
      {
        lesson.content = $"Bài thi tự luận này có {lesson.questions.Count} câu hỏi.";
        await DbEducateLesson.Update(Layout.Company.id, lesson);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin bài tự luận !");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }
}