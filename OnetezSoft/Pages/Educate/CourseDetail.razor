@page "/educate/course/list/detail/{Id}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="main_content">
  @if (current != null)
  {
    <ul class="columns is-multiline">
      <li class="column is-full">
        <div class="card p-5 bg_blue_white has-text-white">
          <div class="field is-grouped is-grouped-multiline has-text-weight-semibold">
            <div class="control mr-1">
              <div class="icon-text">
                <span>@(category != null ? category.name : "Khóa học")</span>
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">chevron_right</i>
                </span>
              </div>
            </div>
            <div class="control">
              <span>@current.name</span>
            </div>
          </div>
          <h1 class="has-text-weight-semibold is-size-3 mb-3">
            @current.name
          </h1>
          @if (teacher != null)
          {
            <div class="user_item mb-5">
              <img class="image is-40x40" src="@teacher.avatar" alt="IMG" />
              <span class="has-text-weight-semibold">@teacher.FullName</span>
            </div>
          }
          <ul class="columns is-multiline is-mobile is-variable is-1" style="max-width: 400px;">
            <li class="column is-half">
              <div class="icon-text">
                <span class="icon">
                  <i class="material-icons is-size-6">book</i>
                </span>
                <span>@current.lesson bài học</span>
              </div>
            </li>
            <li class="column is-half">
              <div class="icon-text">
                <span class="icon">
                  <i class="material-icons is-size-6">timer</i>
                </span>
                <span>@current.time</span>
              </div>
            </li>
            <li class="column is-half">
              <div class="icon-text">
                <span class="icon">
                  <i class="material-icons is-size-6">people_alt</i>
                </span>
                <span>@current.learned đã học</span>
              </div>
            </li>
            <li class="column is-half">
              <span class="icon-text">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">star</i>
                </span>
                @if (current.reviews.Count > 0)
                {
                  var review = Shared.Review(current.reviews.Select(x => x.point).Sum(), current.reviews.Count);
                  <span>@review.ToString("0.0")</span>
                }
                else
                {
                  <span>Chưa có đánh giá</span>
                }
              </span>
            </li>
          </ul>
          <div class="field is-grouped mt-3">
            <div class="control">
              <a class="button_box" @onclick="Learned">
                Vào học thôi
              </a>
            </div>
            <div class="control is-size-7 px-4">
              <span>Hoặc</span>
            </div>
            <div class="control">
              <a class="icon-text" @onclick="() => Bookmark(current)">
                @if (current.bookmarks.Contains(Layout.User.id))
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-4">bookmark</i>
                  </span>
                  <span>Đã lưu khóa học</span>
                }
                else
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-4">bookmark_border</i>
                  </span>
                  <span>Lưu khóa học</span>
                }
              </a>
            </div>
          </div>
        </div>
      </li>

      <li class="column is-four-fifths">
        @if (!string.IsNullOrEmpty(current.content))
        {
          <div class="">
            <h2 class="is-size-5 has-text-weight-bold has-text-info mb-2">
              VỀ KHÓA HỌC NÀY
            </h2>
            <div class="inner_section">
              <article class="content_less @(showContent ? "is-show" : "")">
                <div class="content">
                  @((MarkupString)current.content)
                </div>
                @if (!showContent && current.content.Length > 300)
                {
                  <a class="is-italic toggle" @onclick="() => showContent = true">Xem thêm</a>
                }
              </article>
            </div>
          </div>
        }
        @if (current.files.Count > 0)
        {
          <div class="mt-5">
            <h2 class="is-size-5 has-text-weight-bold has-text-info mb-2">
              TÀI LIỆU KHÓA HỌC
            </h2>
            <div class="inner_section">
              <div class="field">
                <label class="label">File đính kèm</label>
                <div class="control">
                  <FileViews Values="current.files" />
                </div>
              </div>
            </div>
          </div>
        }
        <div class="mt-5">
          <h2 class="is-size-5 has-text-weight-bold has-text-info mb-2">
            THÀNH PHẦN KHÓA HỌC
          </h2>
         <div class="inner_section">
            <ul class="course_lesson">
              @for (int i = 0; i < dataList.Count; i++)
              {
                var item = dataList[i];
                var type = DbEducateLesson.Type(item.type);

                <li class="lesson_item pb-3 @(showList.Contains(item.id) ? "is-active" : "")">
                  <div class="field is-grouped mb-0">
                    <div class="control is-expanded has-text-weight-semibold">
                      <a class="has-text-info" @onclick="() => ToogleItem(item.id)">
                        @string.Format("{0}. {1}", i + 1, item.name)
                      </a>
                    </div>
                    <div class="control">
                      <a class="icon-text has-text-info" @onclick="() => ToogleItem(item.id)">
                        <span>@item.time phút</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-4">
                            @(showList.Contains(item.id) ? "arrow_drop_down" : "arrow_right")
                          </i>
                        </span>
                      </a>
                    </div>
                  </div>
                  <div class="item_desc pl-3 ml-1 mt-2 font_13">
                    @if (item.type == 1)
                    {
                      if (string.IsNullOrEmpty(item.video))
                      {
                        <div class="has-text-success has-text-weight-medium">
                          @type.name
                        </div>
                        <div class="text_3_line">
                          @((MarkupString)item.content)
                        </div>
                      }
                      else
                      {
                        <div class="columns is-gapless">
                          <div class="column is-narrow">
                            <div class="image is-square is_radius is_video has-background-grey" style="width: 78px;">
                            </div>
                          </div>
                          <div class="column is-four-fifths ml-4">
                            <div class="has-text-success has-text-weight-medium">
                              @type.name video
                            </div>
                            <div class="text_3_line">
                              @Shared.HtmlToText(item.content)
                            </div>
                          </div>
                        </div>
                      }
                    }
                    else
                    {
                      <div class="has-text-success has-text-weight-medium">
                        @type.name
                      </div>
                      <div>@item.content</div>
                    }
                  </div>
                </li>
              }
            </ul>
         </div>
        </div>
      </li>

      <li class="column is-one-fifth">
        <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4 text_1_line mb-2">
          KHÓA HỌC LIÊN QUAN
        </h2>
        @foreach (var item in recommend)
        {
          var link = "/educate/course/list/detail/" + item.id;
          var teacher = shareStorage.MemberList.SingleOrDefault(x => x.id == item.teacher);
          var review = Shared.Review(item.reviews.Select(x => x.point).Sum(), item.reviews.Count);

          <div class="card has_image">
            <div class="card-image">
              <a class="image is-5by3" href="@link">
                <img src="@item.image" alt="IMG">
              </a>
            </div>
            <div class="card-content pt-0 px-2 is-relative" style="margin-top: -10px;">
              <ul class="columns is-multiline is-mobile is-vcentered is-variable is-1">
                <li class="column is-10">
                  <div class="user_item has-text-weight-semibold">
                    @if (teacher != null)
                    {
                      <img class="image is-32x32" src="@teacher.avatar" alt="IMG" />
                      <span class="has-text-link text_1_line">@teacher.name</span>
                    }
                    else
                    {
                      <img class="image is-32x32" src="/images/avatar.png" alt="IMG" />
                      <span class="has-text-link text_1_line">@item.teacher</span>
                    }
                  </div>
                </li>
                <li class="column is-2 has-text-right">
                  <a class="icon" @onclick="() => Bookmark(item)">
                    <i class="material-icons-outlined is-size-5">
                      @(item.bookmarks.Contains(Layout.User.id) ? "bookmark" : "bookmark_border")
                    </i>
                  </a>
                </li>
                <li class="column is-full">
                  <a class="has-text-weight-semibold has-text-dark text_2_line px-2"
                     href="@link">
                    @item.name
                  </a>
                </li>
                <li class="column is-half is-size-7">
                  <span class="icon-text">
                    <span class="icon has-text-warning">
                      <i class="material-icons-outlined is-size-6">star</i>
                    </span>
                    @if (item.reviews.Count > 0)
                    {
                      <span>@review.ToString("0.0")</span>
                    }
                    else
                    {
                      <span>0 đánh giá</span>
                    }
                  </span>
                </li>
                <li class="column is-half is-size-7">
                  <div class="icon-text">
                    <span class="icon has-text-warning">
                      <i class="material-icons is-size-6">book</i>
                    </span>
                    <span>@item.lesson bài học</span>
                  </div>
                </li>
                <li class="column is-half is-size-7">
                  <div class="icon-text">
                    <span class="icon has-text-warning">
                      <i class="material-icons is-size-6">timer</i>
                    </span>
                    <span>@item.time</span>
                  </div>
                </li>
                <li class="column is-half is-size-7">
                  <div class="icon-text">
                    <span class="icon has-text-warning">
                      <i class="material-icons is-size-6">people_alt</i>
                    </span>
                    <span>@item.learned đã học</span>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        }
      </li>
    </ul>
  }
  else
  {
    <div class="card is_fullheight flex_column">
      <h1 class="title is-5 has-text-info is-uppercase mb-2">
        @_title
      </h1>
      <div class="py-6 has-text-grey inner_section is-flex is-align-items-center" style="flex:1">
        Dữ liệu không tồn tại hoặc đã bị xóa !
      </div>
    </div>
  }
</section>

@if (!CheckAccess())
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-content" style="max-width: 360px;">
      <div class="box has-text-centered pt-5">
        <span class="icon is-large has-text-danger">
          <i class="material-icons-outlined is-size-1">error_outline</i>
        </span>
        <div class="is-size-6 py-4 has-text-weight-semibold">
          @msgAccess
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  private string _title = "Thông tin khóa học";
  private EducateCourseModel current = null;
  private List<EducateLessonModel> dataList = new();
  private List<EducateCourseModel> recommend = new();
  private List<string> showList = new();
  private EducateCategoryModel category = null;
  private UserModel teacher = null;
  private bool showContent = false;

  private SharedStorage shareStorage = new();

  protected override async Task OnParametersSetAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    current = await DbEducateCourse.Get(Layout.Company.id, Id);
    if (current != null)
    {
      _title = "Khóa học: " + current.name;
      dataList = await DbEducateLesson.GetList(Layout.Company.id, current.id);
      teacher = await DbUser.Get(Layout.Company.id, current.teacher, globalService);
      var categoryId = current.category.Count > 0 ? current.category[0] : null;
      category = await DbEducateCategory.Get(Layout.Company.id, categoryId);
      recommend = DbEducateCourse.GetList(Layout.Company.id, categoryId, "random", 2, out int total);
    }
  }

  private string msgAccess = string.Empty;
  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "train", out msgAccess);
  }

  private async Task<bool> Bookmark(EducateCourseModel item)
  {
    bool _success = true;
    try
    {
      if (item.bookmarks.Contains(Layout.User.id))
      {
        item.bookmarks.Remove(Layout.User.id);
      }
      else
      {
        item.bookmarks.Add(Layout.User.id);
      }
      await DbEducateCourse.Update(Layout.Company.id, item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Bookmark()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void ToogleItem(string id)
  {
    if (showList.Contains(id))
      showList.Remove(id);
    else
      showList.Add(id);
  }

  private async Task<bool> Learned()
  {
    bool _success = true;
    try
    {
      if (dataList.Count > 0)
      {
        var learned = await DbEducateLearned.Get(Layout.Company.id, current.id, Layout.User.id);
        if (learned != null)
        {
          var lessons = new List<EducateLearnedModel.Lesson>();
          foreach (var lesson in dataList)
          {
            var item = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
            lessons.Add(new()
              {
                id = lesson.id,
                type = lesson.type,
                done = item != null ? item.done : false,
                pass = item != null ? item.pass : false,
                date = item != null ? item.date : 0
              });
          }
          learned.lessons = lessons;

          await DbEducateLearned.Update(Layout.Company.id, learned);

          var undone = lessons.Where(x => !x.done).ToList();
          if (undone.Count > 0)
            navigation.NavigateTo($"/educate/course/list/learn/{undone[0].id}", false);
          else
            navigation.NavigateTo($"/educate/course/list/learn/{lessons[0].id}", false);
        }
        else
        {
          learned = new EducateLearnedModel();
          learned.course = current.id;
          learned.course_name = current.name;
          learned.teacher = current.teacher;
          learned.user = Layout.User.id;
          learned.lessons = new();
          foreach (var lesson in dataList)
          {
            learned.lessons.Add(new()
              {
                id = lesson.id,
                type = lesson.type,
                done = false,
                pass = false,
                date = 0
              });
          }
          await DbEducateLearned.Create(Layout.Company.id, learned);

          // Cập nhật số lượng người học
          current.learned++;
          await DbEducateCourse.Update(Layout.Company.id, current);

          navigation.NavigateTo($"/educate/course/list/learn/{learned.lessons[0].id}", false);
        }
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Khóa học này chưa có bài học nào !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Learned()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}