@page "/educate/course/list/learn/{LessonId}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content flex_column">
  @if (learned != null)
  {
    <ul class="columns is-multiline is-variable is-2 mb-2" style="width:100%">
      <li class="column is-full">
        <div class="field is-grouped is-grouped-multiline has-text-weight-semibold has-text-link">
          <div class="control mr-1">
            <div class="icon-text">
              <a href="/educate/course/list">@(category != null ? category.name : "Khóa học")</a>
              <span class="icon">
                <i class="material-icons-outlined is-size-6">chevron_right</i>
              </span>
            </div>
          </div>
          <div class="control">
            <a href="/educate/course/list/detail/@course.id">
              @course.name
            </a>
          </div>
        </div>
        <h1 class="is-size-3 has-text-weight-bold has-text-link">
          @lesson.name
        </h1>
      </li>
    </ul>
    <ul class="columns is-multiline is-variable is-2" style="width:100%;flex:1">
      <li class="column is-two-thirds">
        @if (lesson.type == 1)
        {
          if (!string.IsNullOrEmpty(lesson.video))
          {
            <div class="card is_radius mb-5">
              <iframe class="lesson_video" src="@lesson.video" allowfullscreen></iframe>
            </div>
          }
          if (lesson.files.Any())
          {
            <div class="inner_section mb-5">
              <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">
                FILES ĐÍNH KÈM
              </h2>
              <div class="content">
                <FileViews Values="lesson.files" />
              </div>
            </div>
          }

          if (!string.IsNullOrEmpty(lesson.content))
          {
            <div class="">
              <div class="content inner_section">
                <h2 class="is-size-5 has-text-weight-bold has-text-info mb-5">
                  NỘI DUNG BÀI HỌC
                </h2>
                @((MarkupString)lesson.content)
              </div>
            </div>
          }
        }
        else if (lesson.type == 2)
        {
          <div class="">
            <div class="inner_section">
              <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">BÀI TỰ LUẬN</h2>
              <h3 class="is-size-6 has-text-weight-bold has-text-info mb-2">@lesson.name</h3>
              <div class="mb-5">Mức điểm đạt: @lesson.point điểm</div>
              <ul class="lesson_question">
                @foreach (var item in questions)
                {
                  int index = questions.IndexOf(item) + 1;
                  var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
                  if (question != null)
                  {
                    <li class="question_item mb-5">
                      <div class="has-text-info mb-2">
                        <span class="has-text-weight-semibold">Câu @index</span>
                        <span>
                          (@(examLesson != null && examLesson.check ? item.point_exam + "/" : "")@item.point_max điểm)
                        </span>
                      </div>
                      <div class="has-text-weight-medium mb-3 has_link">
                        @((MarkupString)Shared.GetLinks(question.content))
                      </div>
                      @if (question.files.Count > 0)
                      {
                        <div class="field">
                          <label class="label">File đính kèm của câu hỏi</label>
                          <div class="control">
                            <FileViews Values="question.files" />
                          </div>
                        </div>
                      }
                      @if (examLesson != null && examLesson.check)
                      {
                        <div class="mb-2">
                          <span class="has-text-info has-text-weight-semibold mr-2">Trả lời:</span>
                          @if (!string.IsNullOrEmpty(item.answer))
                          {
                            <span>@((MarkupString)item.answer.Replace("\n", "<br />"))</span>
                          }
                          else
                          {
                            <div class="is-italic">Không có câu trả lời</div>
                          }
                        </div>
                        @if (!string.IsNullOrEmpty(item.comment))
                        {
                          <div>
                            <span class="has-text-grey">Giảng viên nhận xét:</span>
                            <span>@item.comment</span>
                          </div>
                        }
                      }
                      else if (examLesson == null)
                      {
                        <InputArea Class="textarea is_bg font_14" Title="Nhập câu trả lời"
                                   Value="@item.answer" OnInput="x => item.answer = x" />
                        if (ProductService.CheckStorage(Layout.Company))
                        {
                          <div class="field is-grouped mt-2">
                            <div class="control has-text-grey">File đính kèm của câu trả lời</div>
                            <div class="control">
                              <FileUpload Path="educate/learn" Multiple="true" Small="true" Cloud="true"
                                          OnUpload="x => item.files.AddRange(x)" />
                            </div>
                          </div>
                          <FileViews Delete="true" Values="item.files" />
                        }
                      }
                      else
                      {
                        <InputArea Class="textarea is_bg font_14" Title="Nhập câu trả lời"
                                   Value="@item.answer" OnInput="x => item.answer = x" />
                        if (item.files.Count > 0)
                        {
                          <div class="field mt-2">
                            <div class="has-text-grey">File đính kèm của câu trả lời</div>
                            <FileViews Values="item.files" />
                          </div>
                        }
                      }
                      <hr class="my-3" />
                    </li>
                  }
                  else
                  {
                    <li class="question_item mb-5">
                      <div class="has-text-info mb-2 mt-3">
                        <span class="has-text-weight-semibold">Câu @index</span>
                        <span>
                          (@(examLesson != null && examLesson.check ? item.point_exam + "/" : "")@item.point_max điểm)
                        </span>
                      </div>
                      <div class="has-text-weight-medium is-italic">
                        Câu hỏi đã bị xóa
                      </div>
                      <hr class="my-3" />
                    </li>
                  }
                }
              </ul>
              <div class="field is-grouped">
                @if (examLesson != null)
                {
                  if (examLesson.check)
                  {
                    <div class="control is-expanded">
                      <div class="icon-text has-text-weight-bold">
                        <span>Kết quả bài thi: @examLesson.point_exam/@examLesson.point_max</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-6">east</i>
                        </span>
                        <span class="has-text-@(examLesson.point_exam >= examLesson.point_pass ? "success" : "danger")">
                          @(examLesson.point_exam >= examLesson.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                        </span>
                      </div>
                      @if (!string.IsNullOrEmpty(examLesson.comment))
                      {
                        <div>
                          <span class="has-text-grey">Giảng viên nhận xét bài thi:</span>
                          <span>@examLesson.comment</span>
                        </div>
                      }
                    </div>
                    @if (examLesson.point_exam < examLesson.point_pass)
                    {
                      <div class="control">
                        <a class="button is-link is-outlined" @onclick="() => Retest(examLesson)">Thi lại</a>
                      </div>
                    }
                  }
                  else
                  {
                    <div class="control has-text-weight-bold">
                      Bạn đã nộp bài thi, đang chờ giảng viên chấm bài !
                    </div>
                  }
                }
                else
                {
                  <div class="control">
                    <a class="button is-link" @onclick="SendEssay">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">done</i>
                      </span>
                      <span>Nộp bài tự luận</span>
                    </a>
                  </div>
                }
              </div>
            </div>
          </div>
        }
        else if (lesson.type == 3)
        {
          <div class="">
            <div class="inner_section">
              <h2 class="is-size-5 has-text-weight-bold has-text-info mb-4">BÀI TRẮC NGHIỆM</h2>
              <h3 class="is-size-6 has-text-weight-bold has-text-info mb-2">@lesson.name</h3>
              <div class="mb-5">Mức điểm đạt: @lesson.point điểm</div>
              <ul class="lesson_question">
                @foreach (var item in questions)
                {
                  int index = questions.IndexOf(item) + 1;
                  var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
                  if (question != null)
                  {
                    <li class="question_item mb-5">
                      <div class="has-text-info mb-2">
                        <span class="has-text-weight-semibold">Câu @index</span>
                        <span>@string.Format("({0} điểm)", item.point_max)</span>
                      </div>
                      @if (question.files.Any())
                      {
                        <div style="width: 100%" class="is-flex is-flex-wrap-wrap">
                          @foreach (var image in question.files)
                          {
                            <img style="object-fit: contain; width: @(100/question.files.Count)%; height: 300px" src="@image" class="image" alt="Hình ảnh" />
                          }
                        </div>
                      }
                      <div class="has-text-weight-semibold has-text-info mb-3 has_link">
                        @((MarkupString)Shared.GetLinks(item.content))
                      </div>
                      <div class="columns is-multiline is-variable is-1">
                        @foreach (var answer in question.answers)
                        {
                          <p class="column is-half">
                            <label class="radio">
                              @if (item.answer == answer.id)
                              {
                                <input type="radio" name="@item.id" @onclick="() => item.answer = answer.id" checked>
                              }
                              else
                              {
                                <input type="radio" name="@item.id" @onclick="() => item.answer = answer.id">
                              }
                              <span class="ml-1">@answer.content</span>
                            </label>
                          </p>
                        }
                      </div>
                    </li>
                  }
                  else
                  {
                    <li class="question_item mb-5">
                      <div class="has-text-info mb-2 mt-3">
                        <span class="has-text-weight-semibold">Câu @index</span>
                        <span>@string.Format("({0} điểm)", item.point_max)</span>
                      </div>
                      <div class="has-text-weight-medium is-italic">
                        Câu hỏi đã bị xóa
                      </div>
                    </li>
                  }
                }
              </ul>
              <div class="field is-grouped">
                @if (examLesson != null)
                {
                  <div class="control is-expanded">
                    <div class="icon-text has-text-weight-bold">
                      <span>Kết quả bài thi: @examLesson.point_exam/@examLesson.point_max</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">east</i>
                      </span>
                      <span class="has-text-@(examLesson.point_exam >= examLesson.point_pass ? "success" : "danger")">
                        @(examLesson.point_exam >= examLesson.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                      </span>
                    </div>
                  </div>
                  @if (examLesson.point_exam < examLesson.point_pass)
                  {
                    <div class="control">
                      <a class="button is-link is-outlined" @onclick="() => Retest(examLesson)">Thi lại</a>
                    </div>
                  }
                }
                else
                {
                  <div class="control pt-4">
                    <a class="button is-link" @onclick="SendQuiz">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">done</i>
                      </span>
                      <span>Nộp bài trắc ngiệm</span>
                    </a>
                  </div>
                }
              </div>
            </div>
          </div>
        }
      </li>
      <li class="column is-one-third">
        <div class="">
          <ul class="course_lesson inner_section">
            @for (int i = 0; i < lessons.Count; i++)
            {
              var item = lessons[i];
              var type = DbEducateLesson.Type(item.type);
              var link = "/educate/course/list/learn/" + item.id;
              var learn = learned.lessons.SingleOrDefault(x => x.id == item.id);
              if (learn == null)
                continue;

              <li class="lesson_item pb-3">
                <div class="field is-grouped" style="align-items: flex-start;">
                  <div class="control">
                    <a class="icon @(learn.done ? "has-text-success" : "")" @onclick="() => CheckItem(item)">
                      <i class="material-icons-outlined is-size-6">
                        @(learn.done ? "check_box" : "check_box_outline_blank")
                      </i>
                    </a>
                  </div>
                  <div class="control is-expanded">
                    <a class="has-text-weight-bold font_14 @(learn.done ? "has-text-success" : "has-text-info")"
                    @onclick="() => navigation.NavigateTo(link, item.type != 1)">
                      @string.Format("{0}. {1}", i + 1, item.name)
                    </a>
                  </div>
                  <div class="control">
                    <a class="icon has-text-info" @onclick="() => ToogleItem(item.id)">
                      <i class="material-icons-outlined is-size-5">
                        @(showList.Contains(item.id) ? "arrow_drop_down" : "arrow_right")
                      </i>
                    </a>
                  </div>
                </div>
                @if (showList.Contains(item.id))
                {
                  <div class="is-size-7 pl-5 ml-3">
                    <div class="text_3_line">
                      @Shared.HtmlToText(item.content)
                    </div>
                    @if (learn.done && item.type != 1)
                    {
                      // Bài đã thi
                      var examItem = allExams.FirstOrDefault(x => x.lesson == item.id && x.learned == learned.id && x.user == Layout.User.id);
                      if (examItem != null && examItem.check)
                      {
                        <div class="icon-text">
                          <span>Kết quả bài thi: @examItem.point_exam/@examItem.point_max</span>
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">east</i>
                          </span>
                          <span class="has-text-@(examItem.point_exam >= examItem.point_pass ? "success" : "danger")">
                            @(examItem.point_exam >= examItem.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                          </span>
                        </div>
                        if (!learn.pass)
                        {
                          <a class="button is-small is-link is-outlined" @onclick="() => Retest(examItem)">Thi lại</a>
                        }
                      }
                      else if (examItem != null && !examItem.check)
                      {
                        <div class="has-text-danger is-italic">
                          Đang chờ giảng viên chấm bài !
                        </div>
                      }
                    }
                  </div>
                }
              </li>
            }
          </ul>
        </div>
      </li>
    </ul>
  }
  else
  {
    <div class="card is_fullheight flex_column">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
      <div class="inner_section" style="flex:1">
        <div class="py-6 has-text-grey">
          Dữ liệu không tồn tại hoặc đã bị xóa !
        </div>
      </div>
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string LessonId { get; set; }
  private string _title = "Khóa học";

  private EducateCourseModel course = null;
  private EducateLearnedModel learned = null;
  private EducateLessonModel lesson = null;
  private EducateCategoryModel category = null;
  private List<EducateLessonModel> lessons = new();
  private List<EducateExamModel.Question> questions = new();
  private List<string> showList = new();
  private EducateExamModel examLesson = null;

  private List<EducateExamModel> allExams = new();

  protected override async Task OnParametersSetAsync()
  {
    try
    {
      allExams = await DbEducateExam.GetList(Layout.Company.id, null, null, null, null, null);
      lesson = await DbEducateLesson.Get(Layout.Company.id, LessonId);
      if (lesson != null)
      {
        course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
        if (course != null)
        {
          learned = await DbEducateLearned.Get(Layout.Company.id, course.id, Layout.User.id);
          if (learned != null)
          {
            var categoryId = course.category.Count > 0 ? course.category[0] : null;
            category = await DbEducateCategory.Get(Layout.Company.id, categoryId);
            lessons = await DbEducateLesson.GetList(Layout.Company.id, course.id);

            // Bài đã thi
            examLesson = await DbEducateExam.Get(Layout.Company.id, lesson.id, learned.id, Layout.User.id);
            if (examLesson != null)
            {
              questions = examLesson.questions;
            }
            else if (lesson.questions != null)
            {
              // Danh sách câu hỏi
              questions.Clear();
              foreach (var question in lesson.questions.OrderBy(x => Guid.NewGuid()).ToList())
              {
                questions.Add(new()
                  {
                    id = question.id,
                    content = question.content,
                    point_max = question.point
                  });
              }
            }
          }

          if (!showList.Contains(lesson.id))
            showList.Add(lesson.id);
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnParametersSetAsync()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private void ToogleItem(string id)
  {
    if (showList.Contains(id))
      showList.Remove(id);
    else
      showList.Add(id);
  }

  private async Task<bool> CheckItem(EducateLessonModel item)
  {
    bool _success = true;
    try
    {
      if (item.type == 1)
      {
        var learn = learned.lessons.SingleOrDefault(x => x.id == item.id);
        learn.date = learn.done ? DateTime.Now.Ticks : 0;
        learn.done = !learn.done;
        learn.pass = learn.done;
        learned = await DbEducateLearned.Update(Layout.Company.id, learned);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false,
          "Đối với các bài thi bạn phải làm bài thi trước khi tick hoàn thành bài !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "CheckItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> SendEssay()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn nộp bài thi tự luận này ?"))
        return false;

      var exam = new EducateExamModel();
      exam.course = course.id;
      exam.course_name = course.name;
      exam.lesson = lesson.id;
      exam.lesson_name = lesson.name;
      exam.learned = learned.id;
      exam.user = Layout.User.id;
      exam.teacher = course.teacher;
      exam.type = lesson.type;
      exam.point_exam = 0;
      exam.point_pass = lesson.point;
      exam.point_max = (from x in lesson.questions select x.point).Sum();
      exam.check = false;
      exam.questions = questions;
      examLesson = await DbEducateExam.Create(Layout.Company.id, exam);

      // Cập nhật kỳ học
      var learn = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
      learn.done = true;
      learn.date = DateTime.Now.Ticks;
      learned = await DbEducateLearned.Update(Layout.Company.id, learned);

      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đã nộp bài thi thành công, đang chờ giảng viên chấm bài !");

      // Gửi thông báo chuông cho người chấm bài
      await DbNotify.Create(Layout.Company.id, 601, examLesson.id, examLesson.teacher, Layout.User.id);
      foreach (var examiner in course.examiner)
        await DbNotify.Create(Layout.Company.id, 601, examLesson.id, examiner, Layout.User.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "SendEssay()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> SendQuiz()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn nộp bài thi trắc nghiệm ?"))
        return false;

      // Chấm bài thi
      foreach (var item in questions)
      {
        var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
        // Kiểm tra đáp án đúng ko ?
        var correct = question.answers.Where(x => x.correct && x.id == item.answer).Count() > 0;
        item.point_exam = correct ? question.point : 0;
      }

      var exam = new EducateExamModel();
      exam.course = course.id;
      exam.course_name = course.name;
      exam.lesson = lesson.id;
      exam.lesson_name = lesson.name;
      exam.learned = learned.id;
      exam.user = Layout.User.id;
      exam.teacher = course.teacher;
      exam.type = lesson.type;
      exam.point_exam = (from x in questions select x.point_exam).Sum();
      exam.point_pass = lesson.point;
      exam.point_max = (from x in lesson.questions select x.point).Sum();
      exam.check = true;
      exam.questions = questions;
      examLesson = await DbEducateExam.Create(Layout.Company.id, exam);

      // Cập nhật kỳ học
      var learn = learned.lessons.SingleOrDefault(x => x.id == lesson.id);
      learn.done = true;
      learn.pass = exam.point_exam >= exam.point_pass;
      learn.date = DateTime.Now.Ticks;
      learned = await DbEducateLearned.Update(Layout.Company.id, learned);

      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đã nộp bài thi thành công !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "SendQuiz()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Retest(EducateExamModel exam)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm",
          "Kết quả bài thi của bạn sẽ bị hủy, bạn có chắc muốn thi lại không ?"))
        return false;

      // Xóa bài thi cũ
      await DbEducateExam.Delete(Layout.Company.id, exam.id);

      // Cập nhật kỳ học
      var learn = learned.lessons.SingleOrDefault(x => x.id == exam.lesson);
      learn.done = false;
      learn.pass = false;
      learn.date = 0;
      learned = await DbEducateLearned.Update(Layout.Company.id, learned);

      navigation.NavigateTo("/educate/course/list/learn/" + exam.lesson, true);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Retest()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}