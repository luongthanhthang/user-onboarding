@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="inner_section scrolly" style="flex:1">
  <ul class="columns is-multiline is-variable is-2">
    <li class="column">
      <div class="field">
        <label class="label">Tiêu đề *</label>
        <div class="control">
          <input @bind="lesson.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề bài trắc nghiệm..." />
        </div>
      </div>
    </li>
    <li class="column is-one-quarter">
      <div class="field">
        <label class="label">Khóa học</label>
        <div class="control">
          <div class="input is_bg">
            <span class="text_1_line">@(course != null ? course.name : "")</span>
          </div>
        </div>
      </div>
    </li>
    <li class="column is-one-fifth">
      <div class="field">
        <label class="label">Thời gian làm bài: phút</label>
        <div class="control">
          <input @bind="lesson.time" type="number" class="input is_bg" min="0" />
        </div>
      </div>
    </li>
    <li class="column is-full">
      <ul class="columns is-multiline is-variable is-2">
        @for (int i = 0; i < lesson.questions.Count; i++)
        {
          var item = lesson.questions[i];
          <li class="column is-full">
            <hr />
          </li>
          <li class="column is-four-fifths">
            <div class="field">
              <label class="label">Câu hỏi @(i + 1)</label>
              <div class="control">
                <textarea @bind="item.content" id="@item.id" class="textarea is_bg" rows="2" placeholder="Nhập nôi dung câu hỏi..." />
              </div>
            </div>
          </li>
          <li class="column is-one-fifth">
            <div class="field">
              <label class="label">Điểm</label>
              <div class="field is-grouped">
                <div class="control is-expanded">
                  <input @bind="@item.point" class="input is_bg" type="number" min="1" />
                </div>
                <div class="control">
                  <a class="button is-white" @onclick="() => DeleteItem(item)">
                    <span class="icon has-text-danger">
                      <i class="material-icons-outlined is-size-5">close</i>
                    </span>
                  </a>
                </div>
              </div>
            </div>
          </li>
          @if (ProductService.CheckStorage(Layout.Company))
          {
            <li class="column is-full">
              <div class="field is-grouped">
                <div class="control">File đính kèm:</div>
                <div class="control">
                  <FileUpload Path="educate/lesson/quiz" Accept="image/*" Multiple="true" Small="true" Cloud="true" OnUpload="x => item.files.AddRange(x)" />
                </div>
                <div class="control is-expanded">
                  <FileViews Delete="true" Values="item.files" />
                </div>
              </div>
            </li>
          }
          <li class="column is-full">
            <div class="has-text-weight-medium has-text-info pb-2 pl-5">Danh sách đáp án</div>
            <ul class="columns is-multiline is-vcentered is-variable is-2">
              @{
                var index = 'A';
              }
              @for (int a = 0; a < item.answers.Count; a++)
              {
                var answer = item.answers[a];
                <li class="column is-four-fifths">
                  <div class="field is-grouped pl-5">
                    <div class="control">
                      @index
                    </div>
                    <div class="control is-expanded">
                      <input @bind="@answer.content" id="@answer.id" class="input is_bg" type="text" placeholder="Nhập nội dung đáp án..." />
                    </div>
                  </div>
                </li>
                <li class="column is-one-fifth">
                  <div class="field is-grouped">
                    <div class="control is-expanded mr-0">
                      <label class="checkbox">
                        <input @bind="answer.correct" type="checkbox" />
                        <span>Câu đúng</span>
                      </label>
                    </div>
                    <div class="control mr-0">
                      <a class="button is-white has-text-grey" @onclick="() => DeleteAnswer(item, answer)">
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">close</i>
                        </span>
                      </a>
                    </div>
                  </div>
                </li>
                index++;
              }
              <li class="column is-full">
                <div class="pl-5">
                  <a 
                    class="button is_dash has-text-link has-background-transparent"
                    @onclick="() => AddAnswer(item)"
                    style="border-radius:5px!important;width:100%">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-5">add</i>
                    </span>
                    <span>
                      Thêm đáp án
                    </span>
                  </a>
                </div>
              </li>
            </ul>
          </li>
        }
      </ul>
    </li>
    <li class="column is-full">
      <div class="field is-grouped is-grouped-multiline pt-5">
        <div class="control is-expanded">
          <a class="button is-white has-text-link" @onclick="() => AddItem()">
            <span class="icon">
              <span class="material-icons-outlined is-size-5">add</span>
            </span>
            <span>Thêm câu hỏi</span>
          </a>
        </div>
        <div class="control">
          <div class="field has-addons">
            <div class="control">
              <label class="button is-static">Mức điểm đạt</label>
            </div>
            <div class="control is-expanded" style="width: 60px;">
              <input @bind="lesson.point" class="input" type="number" min="1" />
            </div>
          </div>
        </div>
        <div class="control">
          <div class="field has-addons">
            <div class="control">
              <label class="button is-static">Tổng điểm</label>
            </div>
            <div class="control is-expanded" style="width: 60px;">
              <div class="input">
                @(lesson.questions.Select(x => x.point).Sum())
              </div>
            </div>
          </div>
        </div>
        <div class="control">
          <a class="button is-danger" @onclick="Delete">
            <span class="icon">
              <i class="material-icons-outlined is-size-5">delete</i>
            </span>
            <span>Xóa</span>
          </a>
        </div>
        <div class="control">
          <a class="button is-link" @onclick="Update">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
        </div>
      </div>
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EducateLessonModel lesson { get; set; }

  private bool success = false;
  private string _message = string.Empty;

  private EducateCourseModel course = null;

  protected override async Task OnInitializedAsync()
  {
    course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task AddItem()
  {
    var id = Mongo.RandomId();
    var item = new EducateLessonModel.Question()
      {
        id = id,
        point = 1,
        answers = new()
      {
        new() { id = Mongo.RandomId() }
      }
      };
    lesson.questions.Add(item);
    await JSRuntime.InvokeVoidAsync("setFocus", id);
  }

  private async Task DeleteItem(EducateLessonModel.Question item)
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa câu hỏi: {item.content}?"))
      return;
    if (item.files.Any())
    {
      foreach (var link in item.files)
      {
        StorageService.DeleteFile(link);
      }
    }
    lesson.questions.Remove(item);
  }

  private async Task AddAnswer(EducateLessonModel.Question item)
  {
    var id = Mongo.RandomId();
    item.answers.Add(new() { id = id });
    await JSRuntime.InvokeVoidAsync("setFocus", id);
  }

  private async Task DeleteAnswer(EducateLessonModel.Question item, EducateLessonModel.Question.Answer answer)
  {

    if (item.answers.Count > 1)
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa đáp án: {answer.content}?"))
        return;
      item.answers.Remove(answer);
    }
    else
    {
      success = false;
      _message = "Bạn không thể xóa hết đáp án của câu hỏi !";
      await JSRuntime.InvokeVoidAsync("tagline", false, _message);
      _message = string.Empty;
    }
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
        return false;

      await DbEducateLesson.Delete(Layout.Company.id, lesson.id);
      navigation.NavigateTo("/educate/course/manager/info/" + lesson.course, false);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> CheckItem()
  {
    if (lesson.questions.Count == 0)
    {
      _message = "Bạn chưa nhập câu hỏi cho bài trắc nghiệm !";
      await JSRuntime.InvokeVoidAsync("tagline", false, _message);
      return false;
    }
    foreach (var item in lesson.questions)
    {
      if (string.IsNullOrEmpty(item.content))
      {
        _message = "Có câu hỏi chưa nhập nội dung, vui lòng nhập nội dung cho câu hỏi";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        return false;
      }
      else if (item.answers.Count == 0)
      {
        _message = "Có câu hỏi chưa có đáp án, vui lòng nhập đáp án cho câu hỏi !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        return false;
      }
      else if (item.answers.Where(x => string.IsNullOrEmpty(x.content)).Count() > 0)
      {
        _message = "Có đáp án chưa có nội dung, vui lòng nhập nội dung cho đáp án !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        return false;
      }
      else if (item.answers.Where(x => x.correct).Count() == 0)
      {
        _message = "Có câu hỏi chưa có đáp án đúng, vui lòng chọn 1 đáp án đúng cho câu hỏi !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        return false;
      }
    }
    return true;
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      _success = false;
      _message = string.Empty;

      if (string.IsNullOrEmpty(lesson.name) || lesson.time == 0)
      {
        _message = "Nhập tiêu đề và thời lượng bài trắc nghiệm !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else if (lesson.point <= 0)
      {
        _message = "Giá trị mức điểm đạt phải lớn hơn hoặc bằng 1 !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else if (lesson.point > lesson.questions.Select(x => x.point).Sum())
      {
        _message = "Mức điểm đạt được của bài thi phải nhỏ hơn tổng điểm bài thi !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else if (await CheckItem() == false)
      {
        _message = string.Empty;
      }
      else
      {
        lesson.content = $"Bài thi trắc nghiệm này có {lesson.questions.Count} câu hỏi.";
        await DbEducateLesson.Update(Layout.Company.id, lesson);
        _message = "Đã cập nhật thông tin bài trắc nghiệm!";
        await JSRuntime.InvokeVoidAsync("tagline", true, _message);
        _success = true;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}