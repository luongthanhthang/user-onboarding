@page "/educate/course/manager/add"
@page "/educate/course/manager/edit/{Id}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="main_content">
  <div class="card">
    <ul class="columns is-multiline is-variable is-2">
      <li class="column is-two-thirds">
        <h1 class="title is-5 has-text-info is-uppercase oy-2">
          @_title
        </h1>
      </li>
      <li class="column is-one-third has-text-right">
        <div class="buttons is-right">
          <a class="button is-link is-outlined" href="/educate/course/manager">
            <span class="icon"><i class="material-icons-outlined">arrow_back</i></span>
            <span>Trở lại</span>
          </a>
          <a class="button is-link" @onclick="Update">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
        </div>
      </li>
      <li class="column is-two-thirds">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tiêu đề *</label>
              <div class="control">
                <input @bind="model.name" type="text" class="input has-text-weight-bold is_bg"
                       placeholder="Nhập tiêu đề khóa học..." />
              </div>
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Giảng viên *</label>
              <MemberSearch sources="shareStorage.MemberList" OnUpdate="ChangeTeacher" />
            </div>
          </li>
          <li class="column is-half">
            <div class="field">
              <label class="label">Hình ảnh *</label>
              <div class="field has-addons">
                <div class="control is-expanded">
                  <input @bind="model.image" class="input is_bg" type="text" placeholder="Nhập link hình..." />
                </div>
                <FileUpload Path="educate/course/thumbnail" Accept="image/*" Size="400" OnUpload="x => model.image = x[0]" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Số bài học *</label>
              <div class="control">
                <input @bind="model.lesson" type="number" class="input is_bg" min="0" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thời lượng *</label>
              <div class="control">
                <input @bind="model.time" type="text" class="input is_bg" placeholder="VD: 5h 30ph..." />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thuộc tính</label>
              <div class="control pt-2">
                <label class="checkbox">
                  <input type="checkbox" @bind="model.show" />
                  <span>Hiển thị khóa học</span>
                </label>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Danh mục</label>
              <div class="control">
                <div class="select is-fullwidth is_bg">
                  <select @onchange="ChangeCategory">
                    <option value="">Chọn danh mục</option>
                    @foreach (var sl in categoryList)
                    {
                      <option value="@sl.id">@sl.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>

          <li class="column is-two-thirds">
            <div class="field is-grouped is-grouped-multiline pt-5 mt-1">
              @foreach (var id in model.category)
              {
                var item = categoryList.SingleOrDefault(x => x.id == id);
                <div class="control">
                  <div class="field has-addons">
                    <div class="control is-expanded">
                      <span class="input">@(item != null ? item.name : id)</span>
                    </div>
                    <div class="control">
                      <a class="button has-text-danger" @onclick="() => model.category.Remove(id)">
                        <span class="icon">
                          <i class="material-icons is-size-6">close</i>
                        </span>
                      </a>
                    </div>
                  </div>
                </div>
              }
            </div>
          </li>
        </ul>
      </li>
      <li class="column is-one-third">
        <div class="card has_image">
          <div class="card-image">
            <div class="image is-5by3 has-background-grey-lighter">
              <img src="@model.image" />
            </div>
          </div>
          <div class="card-content p-4">
            <div class="is-size-6 has-text-link has-text-weight-bold text_1_line">
              @model.name
            </div>
            <div class="mt-3 font_13">
              <span class="has-text-grey">Giảng viên:</span>
              <strong class="has-text-link">
                @(teacher != null ? teacher.name : "")
              </strong>
            </div>
          </div>
        </div>
      </li>
      <li class="column is-full">
        <div class="field">
          <label class="label">Người chấm thi</label>
          <ul class="columns is-vcentered is-multiline is-variable is-2">
            <li class="column is-one-third">
              <MemberSelected members="model.examiner" sources="shareStorage.MemberList"
                              title="Chọn người chấm thi" OnUpdate="ChangeExaminer" />
            </li>
            @foreach (var userId in model.examiner)
            {
              var examiner = UserService.GetMember(shareStorage.MemberList, userId);
              <li class="column is-narrow">
                <div class="icon-text">
                  <img class="icon is-rounded image is-24x24 mr-2" src="@examiner.avatar" alt="IMG">
                  <span>@examiner.name</span>
                  <a class="icon has-text-danger" @onclick="() => model.examiner.Remove(userId)">
                    <i class="material-icons-outlined is-size-6">close</i>
                  </a>
                </div>
              </li>
            }
          </ul>
        </div>
      </li>
      @if (ProductService.CheckStorage(Layout.Company))
      {
        <li class="column is-full">
          <div class="field is-grouped">
            <div class="control">File đính kèm</div>
            <div class="control">
              <FileUpload Path="educate/course/attach" Multiple="true" Small="true" Cloud="true" OnUpload="x => model.files.AddRange(x)" />
            </div>
          </div>
          <FileViews Delete="true" Values="model.files" />
        </li>
      }
      <li class="column is-full">
        <div class="field">
          <label class="label">Mô tả khóa học</label>
          <div class="control">
            <BlazoredTextEditor @ref="@editor" Placeholder="Nhập mô tả khóa học...">
              <ToolbarContent>
                <select class="ql-header">
                  <option selected=""></option>
                  <option value="1"></option>
                  <option value="2"></option>
                  <option value="3"></option>
                  <option value="4"></option>
                  <option value="5"></option>
                </select>
                <span class="ql-formats">
                  <button class="ql-bold"></button>
                  <button class="ql-italic"></button>
                  <button class="ql-underline"></button>
                  <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                  <select class="ql-color"></select>
                  <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                  <button class="ql-list" value="ordered"></button>
                  <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                  <button class="ql-link"></button>
                </span>
                <span class="ql-formats">
                  <button onclick="document.getElementById('fileEditor').click()">
                    <i class="material-icons-outlined">image</i>
                  </button>
                </span>
              </ToolbarContent>
              <EditorContent>
                @((MarkupString)content)
              </EditorContent>
            </BlazoredTextEditor>
            <div class="is-hidden">
              <FileUpload Path="educate/course/content" Accept="image/*" Multiple="true" Size="1000" FileId="fileEditor" OnUpload="UploadEditor" />
            </div>
          </div>
        </div>
      </li>
      <li class="column is-full">
        <div class="field is-grouped is-grouped-right">
          @if (!string.IsNullOrEmpty(model.id))
          {
            <div class="control">
              <a class="button is-danger" @onclick="Delete">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">delete</i>
                </span>
                <span>Xóa</span>
              </a>
            </div>
          }
          <div class="control">
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </li>
    </ul>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  private string _title = "Thông tin khóa học";
  private EducateCourseModel model = new();
  private MemberModel teacher = null;
  private BlazoredTextEditor editor;
  private string content = string.Empty;
  private List<EducateCategoryModel> categoryList = new();
  private string teacherOld = string.Empty;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    categoryList.AddRange(await DbEducateCategory.GetList(Layout.Company.id, null));
    if (!string.IsNullOrEmpty(Id))
    {
      model = await DbEducateCourse.Get(Layout.Company.id, Id);
    }
    else
    {
      model = new() { category = new(), teacher = Layout.User.id };
    }

    if (model == null)
      model = new() { category = new(), teacher = Layout.User.id };
    teacher = shareStorage.MemberList.SingleOrDefault(x => x.id == model.teacher);
    teacherOld = model.teacher;
    content = model.content;

    if (model.creator != Layout.User.id && model.teacher != Layout.User.id && Layout.User.role == 3)
      navigation.NavigateTo("/educate/course/manager/info/" + model.id, false);
  }

  private void ChangeTeacher(string value)
  {
    teacher = shareStorage.MemberList.SingleOrDefault(x => x.id == value);
  }

  private void ChangeCategory(ChangeEventArgs e)
  {
    var id = e.Value.ToString();
    if (!string.IsNullOrEmpty(id) && !model.category.Contains(id))
      model.category.Add(id);
  }

  private void ChangeExaminer(List<string> values)
  {
    model.examiner = values;
  }

  private async Task UploadEditor(List<string> files)
  {
    try
    {
      foreach (var image in files)
      {
        await editor.InsertImage(image);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UploadEditor()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
        return false;

      await DbEducateCourse.Delete(Layout.Company.id, model.id);
      navigation.NavigateTo("/educate/course/manager", false);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (StringHelper.IsEmpty(model.name) || StringHelper.IsEmpty(model.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề và hình ảnh khóa học !");
      else if (model.lesson == 0 || string.IsNullOrEmpty(model.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập số bài học và thời lượng khóa học !");
      else if (teacher == null)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chọn giảng viên của khóa học !");
      else
      {
        model.teacher = teacher.id;
        model.content = await editor.GetHTML();

        if (string.IsNullOrEmpty(model.id))
        {
          model.creator = Layout.User.id;
          await DbEducateCourse.Create(Layout.Company.id, model);
        }
        else
        {
          await DbEducateCourse.Update(Layout.Company.id, model);

          // Đổi giảng viên
          if (model.teacher != teacherOld)
          {
            await EducateService.ChangeTeacher(Layout.Company.id, model.id);
            await DbNotify.Create(Layout.Company.id, 602, model.id, model.teacher, Layout.User.id);
          }
        }
        navigation.NavigateTo("/educate/course/manager", false);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin khóa học");
        StateHasChanged();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}