@page "/educate/exam/manager/{Id}"
@inject IJSRuntime JSRuntime
@inject GlobalService globalService
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content">
  @if (model != null)
  {
    <div class="card flex_column is_fullheight">
      <ul class="columns is-vcentered is-variable is-2 mb-3">
        <li class="column">
          <h1 class="title is-5 has-text-info is-uppercase">
            @_title
          </h1>
        </li>
        <li class="column is-narrow">
          <a class="button is-link is-outlined" href="/educate/exam/manager">
            <span class="icon"><i class="material-icons-outlined">arrow_back</i></span>
            <span>Quay lại</span>
          </a>
        </li>
      </ul>
      <ul class="columns is-multiline is-vcentered is-variable is-1">
        <li class="column is-half">
          <div class="text_1_line">
            <span class="has-text-grey">Khóa học:</span>
            <span class="has-text-weight-semibold">@model.course_name</span>
          </div>
        </li>
        <li class="column is-half">
          <div class="text_1_line">
            <span class="has-text-grey">Bài thi:</span>
            <span class="has-text-weight-semibold">@model.lesson_name</span>
          </div>
        </li>
        <li class="column is-one-quarter">
          <div class="user_item">
            <span class="has-text-grey" style="flex-grow: 0;">Học viên:</span>
            @if (student != null)
            {
              <img class="image is-24x24 mx-2" src="@student.avatar" alt="IMG" />
              <span class="has-text-weight-semibold">@student.FullName</span>
            }
            else
            {
              <span class="has-text-weight-semibold">@model.user</span>
            }
          </div>
        </li>
        <li class="column is-one-quarter">
          <span class="has-text-grey">Ngày nộp bài:</span>
          <span class="has-text-weight-semibold">
            @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(model.date))
          </span>
        </li>
        <li class="column is-one-quarter">
          <span class="has-text-grey">Mức điểm đạt:</span>
          <span class="has-text-weight-semibold">@model.point_pass</span>
        </li>
        <li class="column is-one-quarter">
          @if (model.check)
          {
            <span class="has-text-grey">Kết quả:</span>
            <span class="has-text-weight-semibold has-text-@(model.point_exam >= model.point_pass ? "success" : "danger")">
              @(model.point_exam >= model.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
            </span>
          }
        </li>
      </ul>
      <hr />
      <ul class="lesson_question">
        @foreach (var item in model.questions)
        {
          var index = model.questions.IndexOf(item) + 1;

          <li class="question_item">
            <div class="has-text-info mb-2">
              <span class="has-text-weight-semibold">Câu @index:</span>
              <span class="has-text-weight-medium has_link">@((MarkupString)Shared.GetLinks(item.content))</span>
            </div>
            @if (lesson != null)
            {
              var question = lesson.questions.SingleOrDefault(x => x.id == item.id);
              if (question != null && question.files.Count > 0)
              {
                <div class="field mb-2">
                  <div class="has-text-grey">File đính kèm của câu hỏi</div>
                  <FileViews Values="question.files" />
                </div>
              }
            }
            <div class="mb-2">
              <span class="has-text-info has-text-weight-semibold mr-2">Trả lời:</span>
              @if (!string.IsNullOrEmpty(item.answer))
              {
                <span>@((MarkupString)item.answer.Replace("\n", "<br />"))</span>
              }
              else
              {
                <i>Không có câu trả lời</i>
              }
            </div>
            @if (item.files.Count > 0)
            {
              <div class="field mt-2">
                <div class="has-text-grey">File đính kèm của câu trả lời</div>
                <FileViews Values="item.files" />
              </div>
            }
            <div class="field is-grouped">
              <div class="control is-expanded">
                <label class="label">Nhận xét câu trả lời</label>
                <div class="control">
                  <input @bind="item.comment" type="text" class="input is_bg"
                         placeholder="Nhận xét của giảng viên về câu trả lời..." />
                </div>
              </div>
              <div class="control" style="width: 120px;">
                <label class="label">Chấm điểm</label>
                <div class="field has-addons">
                  <div class="control" style="width: 60px;">
                    <input @bind="item.point_exam" type="number" class="input has-text-right"
                           min="0" max="@item.point_max" />
                  </div>
                  <div class="control is-expanded">
                    <div class="button is-static is-fullwidth">/ @item.point_max</div>
                  </div>
                </div>
              </div>
            </div>
            <hr class="has-background-grey-lighter" />
          </li>
        }
      </ul>
      <div class="field is-grouped">
        <div class="control is-expanded">
          <label class="label">Nhận xét cả bài thi</label>
          <div class="control">
            <textarea @bind="model.comment" class="textarea is_bg" rows="3" placeholder="Nhận xét của giảng viên về bài thi..." />
          </div>
        </div>
        <div class="control" style="width: 120px;">
          <label class="label">Điểm bài thi</label>
          <div class="field has-addons">
            <div class="control" style="width: 60px;">
              <input value="@model.questions.Select(x => x.point_exam).Sum()" class="input has-text-centered" readonly />
            </div>
            <div class="control is-expanded">
              <div class="button is-static is-fullwidth">/ @model.point_max</div>
            </div>
          </div>
          <div class="control">
            <a class="button is-link is-fullwidth" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Lưu kết quả</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  }
  else
  {
    <div class="card flex_column is_fullheight">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
      <div class="py-6 has-text-grey inner_section">
        Dữ liệu không tồn tại hoặc đã bị xóa !
      </div>
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  private string _title = "Chấm bài thi";

  private EducateExamModel model = null;
  private EducateLearnedModel learned = null;
  private EducateLessonModel lesson = null;
  private UserModel student = null;

  protected override async Task OnInitializedAsync()
  {
    model = await DbEducateExam.Get(Layout.Company.id, Id);
    if (model != null)
    {
      lesson = await DbEducateLesson.Get(Layout.Company.id, model.lesson);
      student = await DbUser.Get(Layout.Company.id, model.user, globalService);
      learned = await DbEducateLearned.Get(Layout.Company.id, model.learned);
    }
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (learned != null)
      {
        if (model.questions.Where(x => x.point_exam > x.point_max).Count() > 0)
          await JSRuntime.InvokeVoidAsync("tagline", false, "Điểm của câu hỏi không được cao hơn số điểm tối đa !");
        else
        {
          model.point_exam = model.questions.Select(x => x.point_exam).Sum();
          model.check = true;
          model.date_check = DateTime.Now.Ticks;
          model.examiner = Layout.User.id;
          model = await DbEducateExam.Update(Layout.Company.id, model);

          // Cập nhật kỳ học
          var learn = learned.lessons.SingleOrDefault(x => x.id == model.lesson);
          learn.done = true;
          learn.pass = model.point_exam >= model.point_pass;
          learned = await DbEducateLearned.Update(Layout.Company.id, learned);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã lưu kết quả chấm bài thi");

          // Gửi thông báo chuông
          await DbNotify.Create(Layout.Company.id, 603, model.id, model.user, Layout.User.id);
        }
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không tìm thấy thông tin kỳ học của học viên !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}