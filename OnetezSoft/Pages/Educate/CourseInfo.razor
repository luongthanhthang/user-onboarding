@page "/educate/course/manager/info/{Id}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content @(_loaded ? "" : "is-loading")">
  <div class="card flex_column is_fullheight" style="@(Layout.IsMobile ? "" : "overflow:hidden;")">
    @if (course != null)
    {
      if (course.creator == Layout.User.id || course.teacher == Layout.User.id || Layout.User.role < 3)
      {
        <ul class="columns is-multiline mb-2">
          <li class="column is-one-quarter">
            <div class="inner_section">
              <div class="icon-text pl-2 has-text-warning">
                <span class="icon is-large">
                  <i class="material-icons is-size-1">people_alt</i>
                </span>
                <div class="ml-4">
                  <div class="is-size-4 has-text-weight-bold">@course.learned</div>
                  <div class="is-size-6 has-text-weight-medium has-text-grey">Đã tham gia học</div>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-quarter">
            <div class="inner_section">
              <div class="icon-text pl-2 has-text-link">
                <span class="icon is-large">
                  <i class="material-icons is-size-1">school</i>
                </span>
                <div class="ml-4">
                  <div class="is-size-4 has-text-weight-bold">@course.graduated</div>
                  <div class="is-size-6 has-text-weight-medium has-text-grey">Đã tốt nghiệp</div>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-quarter">
            <div class="inner_section">
              <div class="icon-text pl-2 has-text-success">
                <span class="icon is-large">
                  <i class="material-icons is-size-1">task_alt</i>
                </span>
                <div class="ml-4">
                  <div class="is-size-4 has-text-weight-bold">@examPass</div>
                  <div class="is-size-6 has-text-weight-medium has-text-grey">Bài kiểm tra đạt</div>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-quarter">
            <div class="inner_section">
              <div class="icon-text pl-2 has-text-danger">
                <span class="icon is-large">
                  <i class="material-icons is-size-2">border_color</i>
                </span>
                <div class="ml-4">
                  <div class="is-size-4 has-text-weight-bold">@examNews</div>
                  <div class="is-size-6 has-text-weight-medium has-text-grey">Bài chưa chấm</div>
                </div>
              </div>
            </div>
          </li>
        </ul>
        <div class="" style="flex:1;@(Layout.IsMobile ? "" : "overflow:hidden;")">
          <div class="flex_column" style="height:100%">
            <ul class="columns is-vcentered is-variable is-2 mb-2">
              <li class="column">
                <h1 class="title is-5 has-text-info is-uppercase">
                  @course.name
                </h1>
              </li>
              <li class="column is-narrow">
                <div class="buttons is-right">
                  <a class="button is-danger" @onclick="Delete">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">delete</i>
                    </span>
                    <span>Xóa</span>
                  </a>
                  <a class="button is-link" href="/educate/course/manager/edit/@course.id">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">edit</i>
                    </span>
                    <span>Chỉnh sửa</span>
                  </a>
                </div>
              </li>
            </ul>
            <div class="inner_section scrolly" style="flex:1">
              <table class="table is-fullwidth is-vcentered is-responsive">
                <thead>
                  <tr>
                    <th>Tiêu đề bài</th>
                    <th width="15%">Loại bài</th>
                    <th width="10%">Thời lượng</th>
                    <th width="10%" align="center">Thứ tự</th>
                    <th width="40px" align="center">Xóa</th>
                  </tr>
                </thead>
                <tbody>
                  @foreach (var item in dataList)
                  {
                    var type = DbEducateLesson.Type(item.type);
                    <tr>
                      <td>
                        <a class="has-text-weight-semibold" href="/educate/course/manager/lesson/@item.id">
                          @if (string.IsNullOrEmpty(item.name))
                          {
                            <i>Chưa nhập tiêu đề</i>
                          }
                          else
                          {
                            <span>@item.name</span>
                          }
                        </a>
                      </td>
                      <td>
                        <label class="td-label">Loại bài</label>
                        <div class="td-value">
                          @type.name
                        </div>
                      </td>
                      <td>
                        <label class="td-label">Thời lượng</label>
                        <div class="td-value">
                          @item.time phút
                        </div>
                      </td>
                      <td align="center">
                        <label class="td-label">Thứ tự</label>
                        <div class="td-value">
                          <a class="icon has-text-link" title="Lên trên" @onclick="() => MoveUp(item)">
                            <i class="material-icons-outlined is-size-5">arrow_upward</i>
                          </a>
                          <a class="icon has-text-link" title="Lên trên" @onclick="() => MoveDown(item)">
                            <i class="material-icons-outlined is-size-5">arrow_downward</i>
                          </a>
                        </div>
                      </td>
                      <td align="center">
                        <label class="td-label">Xử lý</label>
                        <div class="td-value">
                          <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                            <i class="material-icons-outlined is-size-5">delete</i>
                          </a>
                        </div>
                      </td>
                    </tr>
                  }
                  @if (dataList.Count == 0)
                  {
                    <tr>
                      <td colspan="5">
                        <div class="py-5 has-text-grey">
                          Chưa có dữ liệu
                        </div>
                      </td>
                    </tr>
                  }
                </tbody>
              </table>
            </div>
            <div class="field is-grouped is-grouped-right mt-2">
              <div class="control">
                <a class="button is-info" @onclick="() => AddItem(3)">
                  <span class="icon">
                    <span class="material-icons-outlined is-size-6">add</span>
                  </span>
                  <span>Thêm bài trắc nghiệm</span>
                </a>
              </div>
              <div class="control">
                <a class="button is-info" @onclick="() => AddItem(2)">
                  <span class="icon">
                    <span class="material-icons-outlined is-size-6">add</span>
                  </span>
                  <span>Thêm bài tự luận</span>
                </a>
              </div>
              <div class="control">
                <a class="button is-info" @onclick="() => AddItem(1)">
                  <span class="icon">
                    <span class="material-icons-outlined is-size-6">add</span>
                  </span>
                  <span>Thêm bài giảng</span>
                </a>
              </div>
            </div>
          </div>
        </div>
      }
      else
      {
        <h1 class="title is-5 has-text-info is-uppercase">
          @_title
        </h1>
        <div class="py-6 has-text-grey inner_section" style="flex:1">
          Bạn không đủ quyền hạn để chỉnh sửa khóa học này
        </div>
      }
    }
    else
    {
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
      <div class="py-6 has-text-grey inner_section" style="flex:1">
        Dữ liệu không tồn tại hoặc đã bị xóa !
      </div>
    }
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string Id { get; set; }

  private bool _loaded = false;
  private bool success = false;
  private string _message = string.Empty;
  private string _title = "Thông tin khóa học";

  private EducateCourseModel course = null;
  private List<EducateLessonModel> dataList = new();
  private int examPass = 0;
  private int examNews = 0;

  protected override async Task OnInitializedAsync()
  {
    course = await DbEducateCourse.Get(Layout.Company.id, Id);
    if (course != null)
    {
      // Danh sách người học
      var learnList = await DbEducateLearned.GetList(Layout.Company.id, null, course.id, null, 0);
      course.learned = learnList.Count();                              // Số người học
      course.graduated = learnList.Where(x => x.status == 2).Count();  // Đã tốt nghiệp

      // Danh sách bài kiểm tra
      var examList = await DbEducateExam.GetList(Layout.Company.id, null, course.id, null, null, null);
      examPass = examList.Where(x => x.point_exam >= x.point_pass).Count(); // Bài thi đạt
      examNews = examList.Where(x => x.check == false).Count();             // Bài thi chưa chấm

      // Danh sách bài học
      dataList = await DbEducateLesson.GetList(Layout.Company.id, course.id);
      if (course.lesson < dataList.Count)
        course.lesson = dataList.Count;

      // Cập nhật thống kê khoá học
      await DbEducateCourse.Update(Layout.Company.id, course);
    }

    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task Delete()
  {
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
        return;

      await DbEducateCourse.Delete(Layout.Company.id, course.id);
      navigation.NavigateTo("/educate/course/manager", false);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task AddItem(int type)
  {
    try
    {
      var item = new EducateLessonModel();
      item.course = course.id;
      item.type = type;
      item.questions = new();
      item = await DbEducateLesson.Create(Layout.Company.id, item);
      navigation.NavigateTo("/educate/course/manager/lesson/" + item.id, false);

    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AddItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task<bool> DeleteItem(EducateLessonModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbEducateLesson.Delete(Layout.Company.id, item.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> MoveUp(EducateLessonModel item)
  {
    bool _success = true;
    try
    {
      var index = dataList.IndexOf(item);
      if (index > 0)
      {
        var pos = item.pos;
        var temp = dataList[index - 1];

        item.pos = temp.pos;
        item = await DbEducateLesson.Update(Layout.Company.id, item);

        temp.pos = pos;
        temp = await DbEducateLesson.Update(Layout.Company.id, temp);

        dataList = dataList.OrderBy(x => x.pos).ToList();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "MoveUp()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> MoveDown(EducateLessonModel item)
  {
    bool _success = true;
    try
    {
      var index = dataList.IndexOf(item);
      if (index < dataList.Count - 1)
      {
        var pos = item.pos;
        var temp = dataList[index + 1];

        item.pos = temp.pos;
        item = await DbEducateLesson.Update(Layout.Company.id, item);

        temp.pos = pos;
        temp = await DbEducateLesson.Update(Layout.Company.id, temp);

        dataList = dataList.OrderBy(x => x.pos).ToList();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "MoveDown()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}