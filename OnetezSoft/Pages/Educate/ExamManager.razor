@page "/educate/exam/manager"
@inject IJSRuntime JSRuntime
@inject GlobalService globalService
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="main_content @(_loaded ? "" : "is-loading")">
  <div class="card flex_column is_fullheight">
    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
      <li class="column">
        <h1 class="title is-5 has-text-info is-uppercase">
          @_title
        </h1>
      </li>
      <li class="column is-one-fifth">
        <div class="select is-fullwidth">
          <select @onchange="ChangeCourse">
            <option value="">Tất cả khóa học</option>
            @foreach (var sl in courseList)
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="select is-fullwidth">
          <select @bind="filterLesson">
            <option value="">Tất cả bài thi</option>
            @foreach (var sl in lessonList)
            {
              <option value="@sl.id">@sl.name</option>
            }
          </select>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="select is-fullwidth">
          <select @bind="filterCheck">
            <option value="">Tất cả tình trạng</option>
            <option value="true">Bài đã chấm</option>
            <option value="false">Bài chưa chấm</option>
          </select>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-right has_suggest">
          <input class="input" type="text" placeholder="Nhập tên nhân viên..."
                 autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
          <ul class="suggest">
            @foreach (var item in userSuggests)
            {
              <li class="rsitem" @onclick="() => UserSelected(item)">
                <div class="user_item">
                  <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                  <span>@item.FullName</span>
                </div>
              </li>
            }
          </ul>
          <span class="icon is-right">
            <i class="material-icons-outlined is-size-6">search</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <a class="button is-link is-outlined" @onclick="Search">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">search</i>
          </span>
          <span>Tìm kiếm</span>
        </a>
      </li>
    </ul>
    <div class="inner_section" style="flex:1">
      <table class="table is-fullwidth is-vcentered is-responsive">
        <thead>
          <tr>
            <th class="pt-0">Khóa học</th>
            <th class="pt-0" width="20%">Bài thi</th>
            <th class="pt-0" width="160px">Chấm điểm</th>
            <th class="pt-0" width="20%">Học viên</th>
            <th class="pt-0" width="20%">Người chấm</th>
            <th class="pt-0" width="110px">Xử lý</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in dataList)
          {
            var user = allUser.SingleOrDefault(x => x.id == item.user);
            var examiner = allUser.SingleOrDefault(x => x.id == item.examiner);
            <tr>
              <td>
                <label class="td-label">Khóa học</label>
                <div class="td-value">
                  @item.course_name
                </div>
              </td>
              <td>
                <label class="td-label">Bài thi</label>
                <div class="td-value">
                  @item.lesson_name
                </div>
              </td>
              <td>
                <label class="td-label">Chấm điểm</label>
                <div class="td-value">
                  @if (item.check)
                  {
                    <span>@string.Format("{0}/{1}", item.point_exam, item.point_max)</span>
                    <span class="ml-1">→</span>
                    <span class="has-text-@(item.point_exam >= item.point_pass ? "success" : "danger")">
                      @(item.point_exam >= item.point_pass ? "THI ĐẠT" : "KHÔNG ĐẠT")
                    </span>
                  }
                  else
                  {
                    <i>Chưa chấm bài</i>
                  }
                </div>
              </td>
              <td>
                <label class="td-label">Học viên</label>
                <div class="td-value">
                  @if (user != null)
                  {
                    <div class="user_item">
                      <img class="image is-24x24 mr-2" src="@user.avatar" alt="IMG" />
                      <span>@user.FullName</span>
                    </div>
                  }
                  else
                  {
                    <span>@item.user</span>
                  }
                  <div class="mt-1 is-size-7">
                    Ngày nộp: @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(item.date))
                  </div>
                </div>
              </td>
              <td>
                <label class="td-label">Người chấm</label>
                <div class="td-value">
                  @if (examiner != null)
                  {
                    <div class="user_item">
                      <img class="image is-24x24 mr-2" src="@examiner.avatar" alt="IMG" />
                      <span>@examiner.FullName</span>
                    </div>
                    <div class="mt-1 is-size-7">
                      Ngày chấm: @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(item.date_check))
                    </div>
                  }
                  else
                  {
                    <span>@item.examiner</span>
                  }
                </div>
              </td>
              <td>
                <label class="td-label">Xử lý</label>
                <div class="td-value">
                  <a class="icon-text has-text-@(item.check ? "danger" : "link")"
                     href="/educate/exam/manager/@item.id">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-5">drive_file_rename_outline</i>
                    </span>
                    <span>@(item.check ? "Chấm lại" : "Chấm bài")</span>
                  </a>
                </div>
              </td>
            </tr>
          }
          @if (dataList.Count == 0)
          {
            <tr>
              <td colspan="6">
                <div class="has-text-grey py-6">
                  Không tìm thấy dữ liệu
                </div>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool success = false;
  private string _message = string.Empty;
  private string _title = "Chấm bài thi";

  private List<EducateExamModel> dataList = new();
  private List<EducateCourseModel> courseList = new();
  private List<EducateLessonModel> lessonList = new();
  private string filterCourse = string.Empty;
  private string filterLesson = string.Empty;
  private string filterCheck = "false";
  private string filterUserId = string.Empty;
  private string filterUserSearch = string.Empty;
  private List<UserModel> userSuggests = new();
  private List<UserModel> allUser = new();

  protected override async Task OnInitializedAsync()
  {
    // courseList.AddRange(await DbEducateCourse.GetList(Layout.Company.id, null, null, null, Layout.User.id));
    courseList = await DbEducateCourse.GetListByExaminer(Layout.Company.id, Layout.User.id);

    allUser = await DbUser.GetAll(Layout.Company.id, globalService);
    await Search();
    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task<bool> ChangeCourse(ChangeEventArgs e)
  {
    bool _success = true;
    try
    {
      filterCourse = e.Value.ToString();
      var data = await DbEducateLesson.GetList(Layout.Company.id, filterCourse);
      lessonList = data.Where(x => x.type == 2).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeCourse()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private string UserSearch
  {
    get => filterUserSearch;
    set
    {
      filterUserSearch = value;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in allUser)
        {
          bool check = true;
          if (!Handled.Shared.SearchKeyword(filterUserSearch, item.FullName))
            check = false;
          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private void UserSelected(UserModel item)
  {
    filterUserSearch = item.FullName;
    filterUserId = item.id;
    userSuggests = new();
  }

  private async Task<bool> Search()
  {
    bool _success = true;
    try
    {
      bool? check = null;
      if (!string.IsNullOrEmpty(filterCheck))
        check = Convert.ToBoolean(filterCheck);
      dataList = await DbEducateExam.GetList(Layout.Company.id, Layout.User.id, filterCourse, filterLesson, filterUserId, check);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Search()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}