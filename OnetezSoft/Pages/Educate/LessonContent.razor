@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="inner_section" style="flex:1">
  <ul class="columns is-multiline is-variable is-2">
    <li class="column is-half">
      <div class="field">
        <label class="label">Tiêu đề *</label>
        <div class="control">
          <input @bind="lesson.name" type="text" class="input has-text-weight-bold is_bg" placeholder="Nhập tiêu đề bài giảng..." />
        </div>
      </div>
    </li>
    <li class="column is-one-quarter">
      <div class="field">
        <label class="label">Khóa học</label>
        <div class="control">
          <div class="input is_bg">
            <span class="text_1_line">@(course != null ? course.name : "")</span>
          </div>
        </div>
      </div>
    </li>
    <li class="column is-one-quarter">
      <div class="field">
        <label class="label">Thời lượng: phút</label>
        <div class="control">
          <input @bind="lesson.time" type="number" class="input is_bg" min="0" />
        </div>
      </div>
    </li>
    <li class="column is-half">
			<div class="field">
				<label class="label">Link video</label>
				<div style="gap: 0 20px;" class="control is-flex">
					<input @bind="lesson.video" type="text" class="input is_bg"
						placeholder="Nhập link youtube của video..." />
					<a class="button is-link @(Shared.IsEmpty(lesson.video) ? "disable-shift" : "")" @onclick="() => isPreview = true">
						<span class="icon">
							<i class="material-icons-outlined is-size-6">visibility</i>
						</span>
						<span>Xem trước</span>
					</a>

				</div>
			</div>
		</li>
    <li class="column is-full">
      <div class="field">
        <label class="label">Nội dung bài giảng</label>
        <div class="control">
          <BlazoredTextEditor @ref="@editor" Placeholder="Nhập nội dung bài giảng...">
            <ToolbarContent>
              <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
              </select>
              <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
              </span>
              <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
              </span>
              <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
              </span>
              <span class="ql-formats">
                <button class="ql-link"></button>
              </span>
              <span class="ql-formats">
                <button onclick="document.getElementById('file').click()">
                  <i class="material-icons-outlined">image</i>
                </button>
              </span>
            </ToolbarContent>
            <EditorContent>
              @((MarkupString)content)
            </EditorContent>
          </BlazoredTextEditor>
          <InputFile OnChange="UploadEditor" accept="image/*" class="is-hidden" id="file" />
        </div>
      </div>
    </li>
		@if (ProductService.CheckStorage(Layout.Company))
		{
			<li class="column is-full">
				<div class="field is-grouped">
					<div class="control">File đính kèm:</div>
					<div class="control">
						<FileUpload Path="educate/lesson/content" Multiple="true" Small="true" Cloud="true" OnUpload="x => lesson.files.AddRange(x)" />
					</div>
				</div>
				<FileViews Delete="true" Values="lesson.files" />
			</li>
		}
    <li class="column is-full">
      <div class="field is-grouped is-grouped-right">
        <div class="control">
          <a class="button is-danger" @onclick="Delete">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">delete</i>
            </span>
            <span>Xóa</span>
          </a>
        </div>
        <div class="control">
          <a class="button is-link" @onclick="Update">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
        </div>
      </div>
    </li>
  </ul>
</div>

@if (isPreview)
{
	var formatLink = Shared.VideoLink(lesson.video);
	<div class="modal is-active px-5">
		<div class="modal-background"  @onclick="() => isPreview = false"></div>
		<section class="modal-card is-medium">
			<div style="margin-right: -8px" class="is-flex is-justify-content-flex-end mb-3">
				<a style="background: none" class="delete is-large" title="Xóa" @onclick="() => isPreview = false"></a>
			</div>
			<div class="image is-2by1 is-radius is-youtube lesson_video">
				<iframe src="@formatLink" allowfullscreen></iframe>
			</div>
		</section>
	</div>
}

@code {
	[CascadingParameter]
	public LayoutMain Layout { get; set; }
	[Parameter]
	public EducateLessonModel lesson { get; set; }

	private bool success = false;
	private EducateCourseModel course = null;
	private BlazoredTextEditor editor;
	private string content = string.Empty;
	private bool isPreview = false;

	protected override async Task OnInitializedAsync()
	{
		course = await DbEducateCourse.Get(Layout.Company.id, lesson.course);
		content = lesson.content;
	}


	private async Task UploadEditor(InputFileChangeEventArgs e)
	{
		success = false;
		foreach (var file in e.GetMultipleFiles())
		{
			await JSRuntime.InvokeVoidAsync("tagline", true, "Đang upload file lên...");
			try
			{
				if (file.Size <= Layout.MaxFileSize)
				{
					var fileContent = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
					var image = await Files.SaveFileAsync(fileContent, file.Name);
					await editor.InsertImage(image);
				}
				else
				{
					string _message = $"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB";
					await JSRuntime.InvokeVoidAsync("tagline", false, _message);
				}
			}
			catch (Exception ex)
			{
				string _message = $"ERROR: {ex.ToString()}";
				await JSRuntime.InvokeVoidAsync("tagline", false, _message);
			}
		}
	}

	private async Task Delete()
	{
		try
		{
			if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa khóa học này ?"))
				return;

			if (lesson.files.Any())
			{
				foreach(var link in lesson.files)
				{
					StorageService.DeleteFile(link);
				}
			}
			await DbEducateLesson.Delete(Layout.Company.id, lesson.id);
			navigation.NavigateTo("/educate/course/manager/info/" + lesson.course, false);
		}
		catch (Exception ex)
		{
			var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
			StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
			await Layout.Tagline();
		}
	}

	private async Task Update()
	{
		try
		{
			if (string.IsNullOrEmpty(lesson.name) || lesson.time == 0)
				await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề và thời lượng bải giảng!");
			else
			{
				lesson.content = await editor.GetHTML();
				lesson.video = Shared.VideoLink(lesson.video);
				await DbEducateLesson.Update(Layout.Company.id, lesson);
				await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin bài giảng!");
			}
		}
		catch (Exception ex)
		{
			var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
			StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
			await Layout.Tagline();
		}
	}
}