@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (company != null)
{
  var link = $"/client/companys/{company.id}/products";
  <div class="card_corp p-4 is-size-7 has-text-dark has-text-weight-medium">
    <div class="columns">
      <div class="column is-narrow @(company.status ? "" : "is_opacity")">
        <a class="image is-40x40" href="@link">
          @if (!string.IsNullOrEmpty(company.logo))
          {
            <img src="@company.logo" style="object-fit: contain;" />
          }
          else
          {
            <i class="material-icons-round is-size-2 has-text-grey">help</i>
          }
        </a>
      </div>
      <div class="column is-narrow @(company.status ? "" : "is_opacity")" style="width: 45%;">
        <a class="title is-5 mb-0" href="@link">
          @company.name
        </a>
        <div class="has-text-weight-bold">
          @members.Count người dùng
        </div>
        <div class="avatar_list my-3">
          @for (int i = 0; i < 8; i++)
          {
            if (i < members.Count)
            {
              var user = members[i];
              <span class="image is-rounded is-32x32">
                <img src="@user.avatar" alt="IMG">
              </span>
            }
          }
          @if (members.Count > 8)
          {
            <span class="image is-rounded is-32x32 has-text-weight-semibold"
                  style="justify-content: center; align-items: center;">
              +@(members.Count - 8)
            </span>
          }
        </div>
        <div class="has-text-weight-bold mb-2">
          Sản phẩm sở hữu
        </div>
        <div class="tags">
          @foreach (var product in products)
          {
            bool active = company.products.Where(x => x.id == product.id).Count() > 0;
            <div class="tag is-dark is-rounded is-medium px-4 @(active ? "" : "is_opacity")">
              <span class="is-size-7">@product.title</span>
              <span class="icon">
                <i class="material-icons-round">@(active ? "update" : "add")</i>
              </span>
            </div>
          }
        </div>
      </div>
      <div class="column" style="width: calc(55% - 112px);">
        <div class="level mb-1">
          <div class="level-left @(company.status ? "" : "is_opacity")">
            <div class="has-text-weight-bold">
              Thông tin tổ chức
            </div>
          </div>
          <div class="level-right">
            @if (company.status)
            {
              <a class="icon-text has-text-dark" href="/@company.id">
                <span class="icon">
                  <i class="material-icons-round is-size-6">link</i>
                </span>
                <span>Truy cập sản phẩm</span>
              </a>
            }
            else
            {
              <a class="icon-text has-text-link" @onclick="() => verify = company">
                <span class="icon">
                  <i class="material-icons-round is-size-6">done</i>
                </span>
                <span>Kích hoạt tổ chức</span>
              </a>
            }
          </div>
        </div>
        <div class="@(company.status ? "" : "is_opacity")">
          <div class="icon-text mb-1">
            <span class="icon is-small mr-3">
              <i class="material-icons-round is-size-6">call</i>
            </span>
            <span>@company.phone</span>
          </div>
          <div class="icon-text mb-1">
            <span class="icon is-small mr-3">
              <i class="material-icons-round is-size-6">email</i>
            </span>
            <span>@company.email</span>
          </div>
          <div class="icon-text mb-1">
            <span class="icon is-small mr-3">
              <i class="material-icons-round is-size-6">place</i>
            </span>
            <span>@company.address</span>
          </div>
          @if (!string.IsNullOrEmpty(company.website))
          {
            <div class="icon-text mb-1">
              <span class="icon is-small mr-3">
                <i class="material-icons-round is-size-6">language</i>
              </span>
              <span>@company.website</span>
            </div>
          }
          @if (!string.IsNullOrEmpty(company.note))
          {
            <div class="has-text-weight-bold">
              Mô tả thêm
            </div>
            <div class="text_inline">@company.note</div>
          }
        </div>
      </div>
      <div class="column is-narrow @(company.status ? "" : "is_opacity")">
        <a class="icon has-text-dark" @onclick="EditCompany" title="Chỉnh sửa">
          <i class="material-icons-round is-size-5">edit</i>
        </a>
      </div>
    </div>
  </div>

  <_CompanyEdit model="model" OnUpdate="OnUpdate" />
  <_CompanyVerify model="verify" OnUpdate="OnVerify" />
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public CompanyModel company { get; set; }
  [Parameter]
  public List<UserModel> members { get; set; }
  [Parameter]
  public List<ProductModel> products { get; set; }

  private CompanyModel model = null;
  private CompanyModel verify = null;

  private async Task<bool> EditCompany()
  {
    bool _success = true;
    try
    {
      model = await DbMainCompany.Get(company.id);
      await JSRuntime.InvokeVoidAsync("textAutoSize", "note");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "EditCompany()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> OnUpdate(bool isUpdate)
  {
    bool _success = true;
    try
    {
      if (isUpdate)
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin tổ chức!");
        company = await DbMainCompany.Get(company.id);
      }
      model = null;

    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnUpdate()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> OnVerify(bool isUpdate)
  {
    bool _success = true;
    try
    {
      if (isUpdate)
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xác minh tổ chức thành công!");
        company = await DbMainCompany.Get(company.id);
      }
      verify = null;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnVerify()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}