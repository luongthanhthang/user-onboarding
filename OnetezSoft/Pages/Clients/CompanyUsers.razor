@page "/client/companys/{Id}/users"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

@if (company != null && company.admin_id == Layout.User.id)
{
  <section class="px-4">
    <ul class="menu_bar mb-4">
      <li>
        <a class="icon-text has-text-white" href="/client/companys/@company.id/products">
          <span class="icon">
            <i class="material-icons-round is-size-5">apps</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Sản phẩm</span>
        </a>
      </li>
      <li>
        <a class="icon-text has-text-white is-active" href="/client/companys/@company.id/users">
          <span class="icon">
            <i class="material-icons-round is-size-5">group_add</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Người dùng</span>
        </a>
      </li>
      @if (CheckAccess())
      {
        <li>
          <a class="icon-text has-text-white" href="/client/companys/@company.id/setup">
            <span class="icon">
              <i class="material-icons-round is-size-5">settings</i>
            </span>
            <span class="is-size-7 has-text-weight-bold">Lấy dữ liệu mẫu</span>
          </a>
        </li>
      }
    </ul>

    <div class="mb-4">
      <_CompanyInfo company="company" members="memberList" products="productList" />
    </div>

    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-3">
      <li class="column">
        <h1 class="title is-5">@_title</h1>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="FilterProduct">
              <option value="">Sản phẩm</option>
              @foreach (var sl in productActive)
              {
                <option value="@sl.id">@sl.title</option>
              }
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">filter_list</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="FilterStatus">
              <option value="0">Trạng thái</option>
              <option value="1">Đang hoạt động</option>
              <option value="2">Dừng hoạt động</option>
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">filter_list</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control is-expanded has-icons-left" style="width: 200px;">
          <input @bind="filterKey" @onkeyup="ChangeKeyword" type="text" class="input is-small"
                 placeholder="Email, họ và tên..." />
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">search</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <span class="is-size-4 has-text-grey-lighter">|</span>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="ChangeSort">
              <option value="">Sắp xếp</option>
              <option value="online">Truy cập</option>
              <option value="name">Tên tài khoản</option>
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">sort</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <span class="is-size-4 has-text-grey-lighter">|</span>
      </li>
      <li class="column is-narrow">
        <a class="icon-text has-text-link" @onclick="AddItem">
          <span class="icon">
            <i class="material-icons-outlined">add</i>
          </span>
          <span class="is-size-7 has-text-weight-medium">Thêm người dùng</span>
        </a>
      </li>
    </ul>

    <div style="max-height: calc(100vh - 450px)" class="scrolly inner_section">
      <table class="table is-fullwidth is-vcentered is-responsive is-hoverable is_head_bg is-size-7">
        <thead>
          <tr>
            <th class="th-fixed">Tài khoản</th>
            @foreach (var product in productActive)
            {
              <th class="th-fixed" width="100px" align="center">
                @product.used/@product.total - @product.title
              </th>
            }
            <th class="th-fixed" width="85px" align="center">Truy cập</th>
            <th class="th-fixed" width="85px" align="center">Trạng thái</th>
            <th class="th-fixed" width="80px" align="center">Xử lý</th>
          </tr>
        </thead>
        <tbody class="has-text-weight-medium">
          @foreach (var item in filteredList)
          {
            <tr>
              <td>
                <a class="user_item has-text-dark" @onclick="() => EditItem(item)">
                  <img class="image is-32x32 mr-2" src="@item.avatar" alt="IMG" />
                  <div>
                    <p>@item.email</p>
                    <p>@item.FullName</p>
                  </div>
                </a>
              </td>
              @foreach (var product in productActive)
              {
                var access = ProductService.CheckAccess(item.products, product.id);
                <td align="center">
                  <a class="icon" @onclick="() => AccessProduct(item, product)">
                    <i class="material-icons-round is-size-5 has-text-@(access ? "success" : "grey")">
                      toggle_@(access ? "on" : "off")
                    </i>
                  </a>
                </td>
              }
              <td align="center">
                @if (item.online > 0)
                {
                  <span class="text_inline">
                    @Handled.Shared.ConvertDate(new DateTime(item.online)).Replace(" trước", "")
                  </span>
                }
              </td>
              <td align="center">
                <a class="icon" @onclick="() => ActiveItem(item)">
                  <i class="material-icons-round is-size-5 has-text-@(item.active ? "success" : "grey")">
                    toggle_@(item.active ? "on" : "off")
                  </i>
                </a>
              </td>
              <td align="center">
                <a class="icon has-text-dark" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-round is-size-6">edit</i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-round is-size-6">delete</i>
                </a>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>

    @if (filteredList.Count == 0)
    {
      <div class="has-text-grey has-text-centered py-6">
        Không tìm thấy dữ liệu phù hợp
      </div>
    }
  </section>
}
else
{
  <section class="p-4">
    <div class="has-text-grey has-text-centered py-6">
      Dữ liệu không tồn tại hoặc đã xóa
    </div>
  </section>
}

<_StaffEdit model="edit" company="company" OnUpdate="OnUpdate" />
<_StaffAdd model="create" company="company" OnUpdate="OnUpdate" />

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  private string _title = "Người dùng sản phẩm";
  private CompanyModel company = null;
  private List<CompanyModel.Product> productActive = new();
  private List<ProductModel> productList = new();
  private List<UserModel> filteredList = new();
  private List<UserModel> memberList = new();
  private List<UserModel> dataList = new();
  private UserModel edit = null;
  private UserModel create = null;
  private string filterKey = string.Empty;
  private string filterSort = string.Empty;
  private string filterProduct = string.Empty;

  private int filterStatus = 0;
  private int filterRole = 0;


  private bool CheckAccess()
  {
    return Layout.User.is_admin && !Layout.User.delete && !company.isUsed;
  }

  protected override async Task OnInitializedAsync()
  {
    company = await DbMainCompany.Get(Id);

    if (company != null)
    {
      memberList = await DbUser.GetAll(company.id, globalService);
      productList = await DbMainProduct.GetList();
      productActive = company.products.Where(x => x.active && x.id != "storage").ToList();

      // Cập nhật số lượng người dùng
      company.members = memberList.Count;
      await DbMainCompany.Update(company);
      await globalService.Update(company.id);
      dataList = await DbUser.GetList(company.id, filterKey, null, filterStatus, globalService);
      HandleFiltered();
    }
  }

  private void FilterProduct(ChangeEventArgs e)
  {
    filterProduct = e.Value.ToString();
    HandleFiltered();
  }

  private void FilterStatus(ChangeEventArgs e)
  {
    filterStatus = Convert.ToInt32(e.Value);
    HandleFiltered();
  }

  private void ChangeSort(ChangeEventArgs e)
  {
    filterSort = e.Value.ToString();
    HandleFiltered();
  }

  private void ChangeKeyword(KeyboardEventArgs args)
  {
    if (args.Key == "Escape")
      filterKey = string.Empty;
    HandleFiltered();
  }

  private void HandleFiltered()
  {
    filteredList = memberList.Where(x => true).ToList();
    if (!filterKey.IsEmpty())
    {
      filteredList = filteredList.Where(x =>
      {
        return Shared.SearchKeyword(filterKey, x.email + x.first_name + x.last_name);
      }).ToList();
    }

    if (filterStatus > 0)
      filteredList = filteredList.Where(x => x.active == (filterStatus == 1 ? true : false)).ToList();
    if (!string.IsNullOrEmpty(filterProduct))
      filteredList = filteredList.Where(x => x.products.Contains(filterProduct)).ToList();
    if (filterRole != 0)
      filteredList = filteredList.Where(x => x.role == filterRole).ToList();
    if (filterSort == "online")
      filteredList = filteredList.OrderByDescending(x => x.online).ToList();
    else if (filterSort == "name")
      filteredList = filteredList.OrderBy(x => x.first_name).ToList();
    else
      filteredList = filteredList.OrderBy(x => x.role).ToList();
  }

  private async Task AccessProduct(UserModel item, CompanyModel.Product product)
  {
    try
    {
      if (item.active)
      {
        if (item.products == null)
          item.products = new();
        var isAccess = ProductService.CheckAccess(item.products, product.id);
        if (isAccess)
        {
          item.products.Remove(product.id);
          await DbUser.Update(company.id, item, globalService);
        }
        else if (product.used < product.total)
        {
          item.products.Add(product.id);
          await DbUser.Update(company.id, item, globalService);
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Đã hết số lượng người dùng sản phẩm " + product.title);
        company = await CompanyService.UpdateProductAccess(company.id, globalService);
        await globalService.Update(company.id);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Người dùng này đã bị vô hiệu hóa.");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AccessProduct()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
    }
  }

  private async Task ActiveItem(UserModel item)
  {
    try
    {
      // Xóa quyền dùng sản phẩm khi hủy kích hoạt
      if (item.active)
        item.products = new();
      item.active = !item.active;
      await DbUser.Update(company.id, item, globalService);
      company = await CompanyService.UpdateProductAccess(company.id, globalService);
      await globalService.Update(company.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ActiveItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
    }
  }

  private async Task EditItem(UserModel item)
  {
    edit = await DbUser.Get(company.id, item.id, globalService);
  }

  private void AddItem()
  {
    create = new()
      {
        products = new(),
        companys = new(),
        role_manage = new(),
        avatar = $"https://avatars.dicebear.com/api/micah/{DateTime.Now.Minute}.svg?background=grey",
        active = true,
        role = 3
      };
  }

  private async Task DeleteItem(UserModel item)
  {
    try
    {
      if (item.role == 1)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không thể xóa tài khoản Admin");
      else
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa tài khoản {item.email} ?")) return;

        // Xóa trong database tổ chức
        item.delete = true;
        await DbUser.Update(company.id, item, globalService);
        filteredList.Remove(item);
        dataList.Remove(item);

        // Cập nhật trong database chính
        var user = await DbMainUser.Get(item.id, globalService);
        if (user != null && user.companys != null)
        {
          user.companys.RemoveAll(x => x.id == company.id);
          await DbMainUser.Update(user, globalService);
        }

        company = await CompanyService.UpdateProductAccess(company.id, globalService);
        await globalService.Update(company.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
    }
  }

  private async Task OnUpdate(bool isUpdate)
  {
    try
    {
      if (isUpdate)
      {
        company = await CompanyService.UpdateProductAccess(company.id, globalService);
        await globalService.Update(company.id);
        dataList = await DbUser.GetList(company.id, filterKey, null, filterStatus, globalService);
        HandleFiltered();
      }
      edit = null;
      create = null;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnUpdate()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
    }
  }
}