@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@if (product != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card has_bg">
      <section class="modal-card-head is-link"
               style="background-image: url('/images/illustrations/team.png')">
        <div class="modal-card-title">
          <div class="title">
            @product.title
          </div>
          <div class="subtitle">
            Bạn đang tiến hành mua sản phẩm, hãy thiết lập cấu hình
            <br>
            phù hợp với doanh nghiệp bạn.
          </div>
        </div>
        <a class="delete is-medium" @onclick="Cancel"></a>
      </section>
      <section class="modal-card-body pb-0" style="min-height: 230px;">
        <ul class="columns is-multiline">
          <li class="column is-narrow" style="width: 164px;">
            <ul class="steps py-1">
              <li class="step-item @(step == 1 ? "is-active" : "")">
                <span class="step-marker"></span>
              </li>
              <li class="step-item @(step == 2 ? "is-active" : "")">
                <span class="step-marker"></span>
              </li>
              <li class="step-item @(step == 3 ? "is-active" : "")">
                <span class="step-marker"></span>
              </li>
            </ul>
          </li>
          <li class="column has-text-weight-bold">
            @if (step == 1)
            {
              <span>Sản phẩm sở hữu</span>
            }
            else if (step == 2)
            {
              <span>Xác nhận đơn hàng</span>
            }
            else if (step >= 3)
            {
              <span class="has-text-success">Hoàn tất</span>
            }
          </li>
          <li class="column is-full">
            @if (step < 3)
            {
              <div class="field mb-4">
                <label class="label">Tổ chức sử dụng</label>
                <div class="control">
                  <div class="dropdown is-fullwidth @(toggleCompany ? "is-active" : "")">
                    <div class="dropdown-trigger">
                      <a class="icon-text" @onclick="() => toggleCompany = !toggleCompany">
                        @if (company == null)
                        {
                          <span class="icon image is-24x24 mr-2">
                            <i class="material-icons-round is-size-4 has-text-grey">groups</i>
                          </span>
                          <span class="has-text-weight-medium">Chọn tổ chức</span>
                        }
                        else
                        {
                          <span class="icon image is-24x24 mr-2">
                            @if (!string.IsNullOrEmpty(company.logo))
                            {
                              <img src="@company.logo" alt="logo" />
                            }
                            else
                            {
                              <i class="material-icons-round is-size-4 has-text-grey">groups</i>
                            }
                          </span>
                          <span class="has-text-weight-bold">@company.name</span>
                        }
                      </a>
                    </div>
                    <div class="dropdown-menu">
                      <div class="dropdown-content">
                        @foreach (var item in companys)
                        {
                          <a class="dropdown-item" @onclick="() => ChangeCompany(item)">
                            <div class="icon-text">
                              <span class="icon image is-24x24 mr-2">
                                @if (!string.IsNullOrEmpty(item.logo))
                                {
                                  <img src="@item.logo" alt="logo" />
                                }
                                else
                                {
                                  <i class="material-icons-round is-size-4 has-text-grey">help</i>
                                }
                              </span>
                              <span class="has-text-weight-semibold">@item.name</span>
                            </div>
                          </a>
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              @if (company != null)
              {
                <div class="field mb-4">
                  @if (product.id == "storage")
                  {
                    <label class="label">Dung lượng lưu trữ <i>(Đơn vị: GB)</i></label>
                    @if (step == 1)
                    {
                      <div class="control has-icons-left">
                        <input @bind="staffQuantity" @bind:event="oninput" type="number"
                               class="input is_line font_14" min="1" max="1000" step="1" />
                        <span class="icon is-left has-text-black">
                          <i class="material-icons is-size-6">cloud</i>
                        </span>
                      </div>
                    }
                    else
                    {
                      <div class="control py-2">
                        <div class="icon-text">
                          <span class="icon is-small has-text-black mr-2">
                            <i class="material-icons-round is-size-6">cloud</i>
                          </span>
                          <span class="has-text-weight-medium">@staff</span>
                        </div>
                      </div>
                    }
                  }
                  else
                  {
                    <label class="label">Số lượng người dùng</label>
                    @if (step == 1)
                    {
                      <div class="control has-icons-left">
                        <input @bind="staffQuantity" @bind:event="oninput" type="number"
                               class="input is_line font_14" min="5" max="1000" step="1" />
                        <span class="icon is-left has-text-black">
                          <i class="material-icons-round is-size-6">person_add</i>
                        </span>
                      </div>
                    }
                    else
                    {
                      <div class="control py-2">
                        <div class="icon-text">
                          <span class="icon is-small has-text-black mr-2">
                            <i class="material-icons-round is-size-6">person_add</i>
                          </span>
                          <span class="has-text-weight-medium">@staff</span>
                        </div>
                      </div>
                    }
                    <div class="has-text-grey has-text-weight-medium is-size-7 pt-2 is-italic">
                      Số lượng nhân sự của tổ chức: @company.members
                    </div>
                  }
                </div>

                <div class="field mb-4">
                  <label class="label">Số tháng sử dụng</label>
                  @if (step == 1)
                  {
                    <div class="control has-icons-left">
                      <div class="dropdown is-fullwidth @(toggleMonth ? "is-active" : "")">
                        <div class="dropdown-trigger" @onclick="() => toggleMonth = !toggleMonth">
                          <input @bind="monthQuantity" @bind:event="oninput" type="number"
                                 class="input is_line font_14" min="3" max="120" step="1" />
                          <span class="icon is-left has-text-black">
                            <i class="material-icons-round is-size-6">event</i>
                          </span>
                        </div>
                        <div class="dropdown-menu">
                          <div class="dropdown-content">
                            @foreach (var item in promotions.Where(x => x.type == 1))
                            {
                              <a class="dropdown-item" @onclick="() => PromotioneMonth(item.condition)">
                                @item.condition tháng (ưu đãi @item.discount%)
                              </a>
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  }
                  else
                  {
                    <div class="control py-2">
                      <div class="icon-text">
                        <span class="icon is-small has-text-black mr-2">
                          <i class="material-icons-round is-size-6">event</i>
                        </span>
                        <span class="has-text-weight-medium">@month</span>
                      </div>
                    </div>
                  }
                  <div class="has-text-grey has-text-weight-medium is-size-7 pt-2 is-italic">
                    Tối thiểu 3 tháng.
                  </div>
                </div>

                <div class="field">
                  <div class="has-text-link mb-2">
                    <span class="has-text-weight-bold mr-2">Chi phí tạm tính</span>
                    @if (discount > 0)
                    {
                      <span>(ưu đãi @discount%)</span>
                    }
                  </div>
                  <div class="control has-text-link">
                    @if (discount > 0)
                    {
                      <span class="is-size-6 has-text-weight-bold">
                        @string.Format("{0:0,0}", money - (money * discount / 100)) VNĐ
                      </span>
                      <del class="is-size-7 has-text-weight-medium ml-2">
                        @money.ToString("0,0") VNĐ
                      </del>
                    }
                    else
                    {
                      <span class="is-size-6 has-text-weight-bold">
                        @money.ToString("0,0") VNĐ
                      </span>
                    }
                  </div>
                </div>
              }
            }
            else
            {
              <div class="has-text-weight-bold">
                Mua hàng thành công. Hãy phân quyền sử dụng sản phẩm cho người dùng.
              </div>
            }
          </li>
        </ul>
      </section>
      <section class="modal-card-foot is-right">
        @if (step < 3)
        {
          <a class="button" @onclick="() => Step(false)">
            <span class="icon">
              <i class="material-icons-round is-size-6">chevron_left</i>
            </span>
            <span class="is-size-7">Trở về</span>
          </a>
          @if (step == 1)
          {
            if (company != null)
            {
              <a class="button is-link" @onclick="() => Step(true)">
                <span class="is-size-7">Tiếp tục</span>
                <span class="icon">
                  <i class="material-icons-round is-size-6">chevron_right</i>
                </span>
              </a>
            }
            else
            {
              <a class="button is-link" disabled>
                <span class="is-size-7">Tiếp tục</span>
                <span class="icon">
                  <i class="material-icons-round is-size-6">chevron_right</i>
                </span>
              </a>
            }
          }
          else if (step == 2)
          {
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-round is-size-6">done</i>
              </span>
              <span class="is-size-7">Xác nhận</span>
            </a>
          }
        }
        else
        {
          <a class="button" href="/client/products">
            <span class="icon">
              <i class="material-icons-round is-size-6">chevron_left</i>
            </span>
            <span class="is-size-7">Quay lại cửa hàng</span>
          </a>
          <a class="button is-link" href="/client/companys/@company.id/products">
            <span class="is-size-7">Truy cập tổ chức</span>
            <span class="icon">
              <i class="material-icons-round is-size-6">chevron_right</i>
            </span>
          </a>
        }
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public ProductModel product { get; set; }
  [Parameter]
  public List<CompanyModel> companys { get; set; }
  [Parameter]
  public List<PromotionModel> promotions { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private int step = 1;
  private long money = 0;
  private int discount = 0;
  private int staff = 5;
  private int month = 3;
  private CompanyModel company = null;
  private bool toggleCompany = false;
  private bool toggleMonth = false;

  private void Reset()
  {
    step = 1;
    money = 0;
    discount = 0;
    staff = 5;
    month = 3;
    company = null;
    toggleCompany = false;
    toggleMonth = false;
  }

  private async Task Step(bool next)
  {
    toggleCompany = false;
    toggleMonth = false;

    if (next)
      step++;
    else
      step--;

    if (step == 0)
      await Cancel();
    else if (step == 2)
    {
      if (staff < 5 && product.id != "storage")
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Số lượng người dùng tối thiểu là 5 người.");
        step = 1;
      }
      else if (staff < 1 && product.id == "storage")
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Dung lượng lưu trữ tối thiểu là 1GB.");
        step = 1;
      }
      else if (month < 3)
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Số tháng sử dụng tối thiểu là 3 tháng.");
        step = 1;
      }
      else if (money > Int32.MaxValue)
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Số tiền giao dịch vượt quá giới hạn cho phép.");
        step = 1;
      }
    }
  }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(false);
    Reset();
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      var customer = await DbMainUser.Get(Layout.User.id, globalService);
      if (customer != null)
      {
        // Số tiền cần thanh toán
        int price = Convert.ToInt32(discount > 0 ? money - (money * discount / 100) : money);
        if (staff < 5 && product.id != "storage")
          await JSRuntime.InvokeVoidAsync("tagline", false, "Số lượng người dùng tối thiểu là 5 người.");
        else if (staff < 1 && product.id == "storage")
          await JSRuntime.InvokeVoidAsync("tagline", false, "Dung lượng lưu trữ tối thiểu là 1GB.");
        else if (month < 3)
          await JSRuntime.InvokeVoidAsync("tagline", false, "Số tháng sử dụng tối thiểu là 3 tháng.");
        else if (customer.balance < price)
          await JSRuntime.InvokeVoidAsync("tagline", false, "Số dư của bạn không đủ để thanh toán, vui lòng nạp thêm.");
        else
        {
          // Thêm sản phẩm vào tổ chức
          var module = new CompanyModel.Product();
          module.id = product.id;
          module.title = product.title;
          module.active = true;
          module.price = price;
          module.total = staff;
          module.start = DateTime.Today.Ticks;
          module.end = DateTime.Today.AddMonths(month).Ticks;
          company.products.Add(module);
          await DbMainCompany.Update(company);
          await globalService.Update(company.id);

          // Tạo giao dịch
          var transaction = new TransactionModel()
            {
              customer = UserService.ConvertToMember(customer),
              creator = UserService.ConvertToMember(customer),
              product = product.id,
              Company = company.id,
              balance = customer.balance - price,
              money = -price,
              status = 2,
              type = 3
            };
          // Nội dung giao dịch
          if (product.id == "storage")
            transaction.content = $"Mua sản phẩm <b>{product.title}</b> với <b>{staff} GB</b> trong vòng <b>{month} tháng</b> (hết hạn vào {string.Format("{0:dd/MM/yyyy}", new DateTime(module.end))}) cho <b>{company.name}</b>";
          else
            transaction.content = $"Mua sản phẩm <b>{product.title}</b> với <b>{staff} NDSP</b> trong vòng <b>{month} tháng</b> (hết hạn vào {string.Format("{0:dd/MM/yyyy}", new DateTime(module.end))}) cho <b>{company.name}</b>";

          await DbMainTransaction.Create(transaction);

          // Cập nhật số dư
          customer.balance -= price;
          await DbMainUser.Update(customer, globalService);

          MessagingCenter.Send(this, "header_" + Layout.User.id, Layout.User.id);

          step = 3;
          return false;
        }
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Tài khoản khách hàng không tồn tại.");

      step = 2;
      return false;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeCompany(CompanyModel item)
  {
    bool _success = true;
    try
    {
      toggleCompany = false;
      toggleMonth = false;

      // Lấy thông tin công ty
      company = await DbMainCompany.Get(item.id);
      staff = company.members;

      if (item.products.Where(x => x.id == product.id).Count() == 0)
      {
        company = item;
        staff = company.members > 5 ? company.members : 5;
        ChangeQuantity();
      }
      else
      {
        company = null;
        await JSRuntime.InvokeVoidAsync("tagline", false, $"Tổ chức {item.name} đã có sản phẩm này rồi.");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeCompany()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void PromotionStaff(int item)
  {
    staff = item;
    ChangeQuantity();
  }

  private void PromotioneMonth(int item)
  {
    month = item;
    ChangeQuantity();
  }

  private int staffQuantity
  {
    get => staff;
    set
    {
      staff = value > 1000 ? 1000 : value;
      ChangeQuantity();
    }
  }

  private int monthQuantity
  {
    get => month;
    set
    {
      month = value > 120 ? 120 : value;
      ChangeQuantity();
    }
  }

  private async Task<bool> ChangeQuantity()
  {
    bool _success = true;
    try
    {
    // Tính chi phí
    money = ProductService.CalculateRenew(staff, product.price, month);

    // Áp dụng ưu đãi theo tháng
    discount = await ProductService.Promotion(1, month);

    toggleCompany = false;
    toggleMonth = false;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeQuantity()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}