@page "/hrm/timelist"
@page "/hrm/timelist/{Tab}"
@inject IJSRuntime JSRuntime
@using System.Text.Json
@implements IDisposable
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>
@if (Layout.IsMobile)
{
  <section class="is-flex is-align-items-center is-justify-content-center is-flex-direction-column" style="gap: 10px; min-height: calc(100vh - 200px); padding: 0 50px;">
    <img class="image" src="/images/no-mobile.png" alt="IMG" />
    <div class="is-flex is-flex-direction-column">
      <p class="has-text-centered font_14 has-text-weight-medium">Hiện tại chức năng này chỉ hỗ trợ trên desktop!</p>
    </div>
  </section>
}
else
{
  if (CheckAccess())
  {
    if (isFetching)
    {
      <LoadingModel />
    }
    else
    {
      <section class="timelist main_content">
        @if (Tab == "shift" || Tab == "register")
        {
          <div class="card flex_column is_fullheight">
            <ul class="columns is-vcentered is-multiline is-variable is-2 mb-3" style="z-index: 19;">
              <li class="column">
                <h1 class="title is-5 has-text-info is-uppercase text_1_line" style="height:auto; overflow: unset">
                  @if (Tab == "shift")
                  {
                    <span>Phân ca</span>
                  }
                  else if (Tab == "register")
                  {
                    <span>Đăng ký ca làm</span>
                  }
                </h1>
              </li>
              <li class="column">
                <div class="select is-fullwidth">
                  <select @onchange="ChangeDepartment">
                    <option value="">Phòng ban</option>
                    @foreach (var item in departmentAll)
                    {
                      <option value="@item.id" selected="@(filterDepartment == item.id)">@item.name</option>
                    }
                  </select>
                </div>
              </li>
              <li class="column">
                <form class="control has-icons-left" @onsubmit="GetList">
                  <input @bind="filterKeyword" class="input is-rounded" type="text" placeholder="Tìm tên nhân viên...">
                  <span class="icon is-left">
                    <i class="material-icons-outlined is-size-5">search</i>
                  </span>
                </form>
              </li>
              <li class="column is-hidden-mobile is-narrow">
                <_InputDate @bind-Start="filterDateS"
                @bind-End="filterDateE"
                                          IsRange
                                          HasNavigate
                            NavigateType="2"
                            OnRangeSelect="e => CheckOverMonth()" />
              </li>
              <li class="column is-narrow">
                @if (editMode)
                {
                  <button id="btn_refresh" class="button is-transparent has-text-danger" @onclick="() => OnApplyUpdate(false)">
                    <span>Hủy</span>
                  </button>
                  <button class="button is-link @(isLoading ? "is-loading" : "")" @onclick="() => OnApplyUpdate(true)">
                    <span class="icon">
                      <span class="material-icons-outlined">check</span>
                    </span>
                    <span>Hoàn tất</span>
                  </button>
                }
                else
                {
                  if (Tab == "shift" && _access)
                  {
                    <button class="button is-link" @onclick="() => EditMode(true)">
                      <span>Phân ca</span>
                    </button>
                  }

                  if (Tab == "register" && checkRules)
                  {
                    if (_access)
                    {
                      <button class="button is-link" @onclick="() => ConfirmRegister()">
                        <span>Phê duyệt</span>
                      </button>
                    }
                    else
                    {
                      <button class="button is-link" @onclick="() => EditMode(true)">
                        <span>Đăng ký</span>
                      </button>
                    }
                  }

                }
              </li>
              @if (!editMode && _access && Tab == "shift")
              {
                <li class="column is-narrow">
                  <button class="button" @onclick="() => isShowReset = true">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-5">refresh</i>
                    </span>
                    <span>Đặt lại</span>
                  </button>
                </li>
                <li class="column is-narrow">
                  <button class="button is-warning" title="Xuất Excel" @onclick="ExportFile">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-5">file_download</i>
                    </span>
                  </button>
                </li>
              }
            </ul>
            <ul class="columns is-vcentered is-variable is-2 mb-1 calendar-note"
                style="position:unset;">
              <li class="column is-narrow">
                <span class="is_error"></span>
                <span>Ngày nghỉ lễ</span>
              </li>
              <li class="column is-narrow">
                <span class="is_ovt"></span>
                <span>Ngày nghỉ hàng tuần</span>
              </li>
              <li class="column is-narrow">
                <span class="icon" style="color: #d4af37; width: fit-content;">
                  <i class="material-icons-outlined is-size-6">monetization_on</i>
                </span>
                <span>Ngày nghỉ có tính lương</span>
              </li>
              <li class="column is-narrow">
                <span class="outside_sign"></span>
                <span>Ca làm theo giờ</span>
              </li>
            </ul>
            <div id="scrollbox" class="table-container scrolly" style="overflow: auto; flex:1; min-height:200px; cursor: grab;">
              <table class="table is-fullwidth is-vcentered sticky scrollx mb-5" style="width: max-content;">
                <thead style="top: 0px">
                  @if (editMode && Tab == "shift")
                  {
                    <tr>
                      <th width="160px" class="sticky is_last p-0" style="left:0">
                        <label class="checkbox has-text-link">
                          @if (!isSelectedAll)
                          {
                            <input type="checkbox" @onchange="() => ToggleSelected(true)">
                            <span>Chọn tất cả</span>
                          }
                          else
                          {
                            <input type="checkbox" @onchange="() => ToggleSelected(false)" checked>
                            <span>Bỏ chọn tất cả (@checkList.Count())</span>
                          }
                        </label>
                      </th>
                      <th width="150px"></th>
                      <th width="100px" class="sticky" style="left:160px"></th>
                      @for (var i = new DateTime(filterDateS); i.Ticks <= filterDateE; i = i.AddDays(1))
                      {
                        var day = i.Ticks;
                        var lastDateOfMonth = new DateTime(i.Year, i.Month, DateTime.DaysInMonth(i.Year, i.Month));
                        var isAvailable = i <= DateTime.Today;

                        if (checkList.Any())
                        {
                          <th width="150px" align="center" class="py-0" style="vertical-align:bottom">
                            @if (isAvailable)
                            {
                              <button class="button is-fullwidth is-small is-link is-light" disabled>
                                <span class="icon">
                                  <span class="material-icons-outlined">add</span>
                                </span>
                                <span>Tạo nhanh</span>
                              </button>
                            }
                            else
                            {
                              <button class="button is-fullwidth is-small is-link is-light" @onclick="() => HandleEditCol(day)">
                                <span class="icon">
                                  <span class="material-icons-outlined">add</span>
                                </span>
                                <span>Tạo nhanh</span>
                              </button>
                            }
                          </th>
                        }
                        else
                        {
                          <th width="150px" align="center" class="py-0" style="vertical-align:bottom"></th>
                        }
                        @if (isOverMonth && i == lastDateOfMonth && lastDateOfMonth.Month != new DateTime(filterDateE).Month)
                        {
                          <th width="150px"></th>
                        }
                      }
                    </tr>
                  }
                  <tr style="background-color:#AEC6FF">
                    <th width="160px" class="sticky last" style="left:0;background-color:#AEC6FF">Tên nhân viên</th>
                    <th width="150px">Phòng ban</th>
                    <th align="center" width="100px" class="p-0 is_button sticky" style="left:160px">
                      <div class="button px-0 is-transparent has-text-link">
                        <span class="icon" @onclick="() => NavigateMonth(false)">
                          <span class="material-icons-outlined">
                            chevron_left
                          </span>
                        </span>
                        <div class="dropdown is-right @(changeMonthDropdown ? "is-active" : "")">
                          <div class="dropdown-trigger">
                            <div class="button is-transparent px-0" @onclick="() => changeMonthDropdown = !changeMonthDropdown">
                              <span>@($"{preMonth}/{new DateTime(filterDateS).Year}")</span>
                            </div>
                          </div>
                          <div class="dropdown-menu" role="menu">
                            <div class="dropdown-content scrolly">
                              @for (int i = 1; i <= 12; i++)
                              {
                                var month = i;
                                var year = DateTime.Today.Year;
                                <a class="dropdown-item @(preMonth == month ? "is-active" : "")" @onclick="() => ChangeMonth(month,year)">@($"{month}/{year}")</a>
                              }
                            </div>
                          </div>
                        </div>
                        <span class="icon" @onclick="() => NavigateMonth(true)">
                          <span class="material-icons-outlined">
                            chevron_right
                          </span>
                        </span>
                      </div>
                    </th>
                    @for (DateTime i = new DateTime(filterDateS); i.Ticks <= filterDateE; i = i.AddDays(1))
                    {
                      var lastDateOfMonth = new DateTime(i.Year, i.Month, DateTime.DaysInMonth(i.Year, i.Month));
                      <th width="150px" align="center" class=" @(i == DateTime.Today ? "is_today" : "")">@DateToDay(i)</th>
                      @if (isOverMonth)
                      {
                        if (i == lastDateOfMonth && lastDateOfMonth.Month != new DateTime(filterDateE).Month)
                        {
                          <th width="150px" align="center" class="month" data-month="@lastDateOfMonth.AddDays(1).Month">
                            Tháng @(lastDateOfMonth.AddDays(1).Month)
                          </th>
                        }
                      }
                    }
                  </tr>
                </thead>
                <tbody>
                  @foreach (var user in userSelect)
                  {
                    <tr>
                      <td class="sticky last" style="left:0;">
                        @if (editMode)
                        {
                          if (Tab == "shift")
                          {
                            <label class="checkbox">
                              <input type="checkbox" @onchange="() => CheckItem(user.id)" checked="@checkList.Contains(user.id)" />
                              @user.name
                            </label>
                          }
                          else if (Tab == "register" && checkRules)
                          {
                            <span class="@(user.id == Layout.User.id ? "has-text-link" : "")">
                              @user.name
                            </span>
                          }
                        }
                        else
                        {
                          <span>
                            @user.name
                          </span>
                        }
                      </td>
                      <td style="width:140px;">
                        @if (!Shared.IsEmpty(user.departments_name))
                        {
                          <p class="text_1_line" style="width:140px;">
                            <span class="text_1_line">@user.departments_name.Split("/").Last()</span>
                          </p>
                        }
                      </td>
                      <td class="sticky" style="left:160px"></td>

                      @for (DateTime i = new DateTime(filterDateS); i.Ticks <= filterDateE; i = i.AddDays(1))
                      {
                        var isSunday = i.DayOfWeek == 0;
                        var isOutDate = i.Ticks <= DateTime.Today.Ticks;
                        var lastDateOfMonth = new DateTime(i.Year, i.Month, DateTime.DaysInMonth(i.Year, i.Month));
                        var formated = user.id + " - " + i.Ticks;
                        var isConfirmDate = false;
                        var isCheckNoItem = false;

                        <td width="150px" align="center" class="timelist_cell">
                          <div class="is-flex is-align-items-center is-justify-content-start">
                            @if (Tab == "shift")
                            {
                              var data = dataShifts.FirstOrDefault(x => x.id == user.id);
                              if (data != null)
                              {
                                var shiftsFound = false;
                                @foreach (var item in data.shifts)
                                {
                                  if (item.day == i.Ticks)
                                  {
                                    <div class="tags is-justify-content-center mb-0" style="gap:.5rem">
                                      @if (item.shifts_id.Any())
                                      {
                                        if (item.dayoff_id != null)
                                        {
                                          var dataOff = dayOffList.FirstOrDefault(x => x.id == item.dayoff_id);
                                          if (dataOff != null)
                                          {
                                            shiftsFound = true;
                                            <span class="tag m-0 is-link is-flex is-align-items-center @(dataOff.loop == 1 ? "is-holiday" : "is-week")" title="@dataOff.name">
                                              <span class="text_1_line @(dataOff.loop == 1 ? "color-holiday" : "color-week")">Ngày nghỉ</span>
                                              @if (dataOff.salary_users.Contains(user.id))
                                              {
                                                <span class="icon" style="color: #d4af37; width: fit-content;">
                                                  <i class="material-icons-outlined is-size-6">monetization_on</i>
                                                </span>
                                              }
                                            </span>
                                          }
                                        }
                                        @foreach (var shift in item.shifts_id)
                                        {
                                          var shift_item = shiftList.FirstOrDefault(x => x.id == shift);
                                          if (shift_item != null)
                                          {
                                            shiftsFound = true;
                                            <span style="background-color: @(Shared.IsEmpty(shift_item.color) ? "#48484830" : (shift_item.color + "30"))" title="@(shift_item.checkin + " - " + shift_item.checkout)" class="tag m-0 is-link is-light">
                                              <span style="color: @(Shared.IsEmpty(shift_item.color) ? "#484848" : shift_item.color);" class="text_1_line ">@shift_item.name</span>
                                              @if (shift_item.is_byhour)
                                              {
                                                <span class="outside_sign"></span>
                                              }
                                            </span>
                                          }
                                          else
                                          {
                                            if (isOutDate)
                                            {
                                              shiftsFound = true;
                                              <span style="background-color: #3398d430;" class="tag m-0 is-link is-light">
                                                <span style="color: #3398d4" class="text_1_line">Ca làm đã xoá</span>
                                              </span>
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        if (item.dayoff_id != null)
                                        {
                                          shiftsFound = true;
                                          var dataOff = dayOffList.FirstOrDefault(x => x.id == item.dayoff_id);
                                          if (dataOff != null)
                                          {
                                            <span class="tag m-0 is-link is-flex is-align-items-center @(dataOff.loop == 1 ? "is-holiday" : "is-week")" title="@dataOff.name" style="0 10px;">
                                              <span class="text_1_line @(dataOff.loop == 1 ? "color-holiday" : "color-week")">Ngày nghỉ</span>
                                              @if (dataOff.salary_users.Contains(user.id))
                                              {
                                                <span class="icon" style="color: #d4af37; width: fit-content;">
                                                  <i class="material-icons-outlined is-size-6">monetization_on</i>
                                                </span>
                                              }
                                            </span>
                                          }
                                        }
                                      }
                                    </div>
                                  }
                                }
                                @if (!shiftsFound && !editMode)
                                {
                                  <span>-</span>
                                }
                              }
                              else
                              {
                                if (!editMode)
                                {
                                  <span>-</span>
                                }
                              }
                            }
                            else if (Tab == "register" && checkRules)
                            {
                              var data = dataRegisters.FirstOrDefault(x => x.id == user.id);
                              if (data != null)
                              {
                                var shiftsFound = false;
                                @foreach (var item in data.shifts_register)
                                {
                                  if (item.day == i.Ticks)
                                  {
                                    isConfirmDate = item.is_confirm;
                                    isCheckNoItem = item.shifts_id.Count == 0;
                                    <div class="tags is-justify-content-center mb-0" style="gap:.5rem">
                                      @if (item.shifts_id.Count > 0)
                                      {
                                        if (item.dayoff_id != null)
                                        {
                                          var dataOff = dayOffList.FirstOrDefault(x => x.id == item.dayoff_id);
                                          if (dataOff != null)
                                          {
                                            shiftsFound = true;
                                            <span class="tag m-0 is-link is-flex is-align-items-center @(dataOff.loop == 1 ? "is-holiday" : "is-week")" title="@dataOff.name">
                                              <span class="text_1_line @(dataOff.loop == 1 ? "color-holiday" : "color-week")">Ngày nghỉ</span>
                                              @if (dataOff.salary_users.Contains(user.id))
                                              {
                                                <span class="icon" style="color: #d4af37; width: fit-content;">
                                                  <i class="material-icons-outlined is-size-6">monetization_on</i>
                                                </span>
                                              }
                                            </span>
                                          }
                                        }
                                        @foreach (var shift in item.shifts_id)
                                        {
                                          var shift_item = shiftList.FirstOrDefault(x => x.id == shift);
                                          if (shift_item != null)
                                          {
                                            shiftsFound = true;
                                            <span style="background-color: @(Shared.IsEmpty(shift_item.color) ? "#48484830" : (shift_item.color + "30"))" title="@(shift_item.checkin + " - " + shift_item.checkout)" class="tag m-0 is-link is-light">
                                              <span style="color: @(Shared.IsEmpty(shift_item.color) ? "#484848" : shift_item.color);" class="text_1_line @(item.is_confirm ? "pl-4" : "")">@shift_item.name</span>
                                              @if (shift_item.is_byhour)
                                              {
                                                <span class="outside_sign"></span>
                                              }
                                              @if (item.is_confirm)
                                              {
                                                <span class="material-icons-outlined has-text-success is-size-6" style="width: fit-content;">
                                                  check
                                                </span>
                                              }

                                            </span>
                                          }
                                          else
                                          {
                                            if (isOutDate)
                                            {
                                              shiftsFound = true;
                                              <span style="background-color: #3398d430;" class="tag m-0 is-link is-light">
                                                <span style="color:#3398d4" class="text_1_line  @(item.is_confirm ? "pl-4" : "")">Ca làm đã xoá</span>
                                                @if (item.is_confirm)
                                                {
                                                  <span class="material-icons-outlined has-text-success is-size-6" style="width: fit-content;">
                                                    check
                                                  </span>
                                                }
                                              </span>
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        if (item.dayoff_id != null)
                                        {
                                          shiftsFound = true;
                                          var dataOff = dayOffList.FirstOrDefault(x => x.id == item.dayoff_id);
                                          if (dataOff != null)
                                          {
                                            <span class="tag m-0 is-link is-flex is-align-items-center @(dataOff.loop == 1 ? "is-holiday" : "is-week")" title="@dataOff.name" style="0 10px;">
                                              <span class="text_1_line @(dataOff.loop == 1 ? "color-holiday" : "color-week")">Ngày nghỉ</span>
                                              @if (dataOff.salary_users.Contains(user.id))
                                              {
                                                <span class="icon" style="color: #d4af37; width: fit-content;">
                                                  <i class="material-icons-outlined is-size-6">monetization_on</i>
                                                </span>
                                              }
                                            </span>
                                          }
                                        }
                                      }
                                    </div>
                                  }
                                }
                                @if (!shiftsFound && !editMode)
                                {
                                  if (isConfirmDate)
                                  {
                                    <span class="material-icons-outlined has-text-success is-size-4" style="width: fit-content;">
                                      check
                                    </span>
                                  }
                                  else
                                  {
                                    <span>-</span>
                                  }
                                }
                              }
                              else
                              {
                                if (isConfirmDate)
                                {
                                  <span class="material-icons-outlined has-text-success is-size-4" style="width: fit-content;">
                                    check
                                  </span>
                                }
                                else
                                {
                                  <span>-</span>
                                }
                              }
                            }
                            @if (editMode && !isOutDate)
                            {
                              if (Tab == "shift" || (Tab == "register" && checkRules && user.id == Layout.User.id && !isConfirmDate))
                              {
                                <div class="mt-2">
                                  <a class="button is-small is_dash" @onmousedown="e => EditCell(e, formated)">
                                    <span class="icon">
                                      <span class="material-icons-outlined">
                                        add
                                      </span>
                                    </span>
                                  </a>
                                </div>
                              }
                              else
                              {
                                if (isCheckNoItem)
                                {
                                  <span class="material-icons-outlined has-text-success is-size-4" style="width: fit-content;">
                                    check
                                  </span>
                                }
                              }
                            }
                          </div>
                        </td>

                        @if (isOverMonth)
                        {
                          if (i == lastDateOfMonth && lastDateOfMonth.Month != new DateTime(filterDateE).Month)
                          {
                            <th width="150px" class="timelist_cell is_sunday"></th>
                          }
                        }
                      }
                    </tr>
                  }
                </tbody>
              </table>
              @if (userSelect.Count == 0)
              {
                <div class="has-text-centered py-6"> Không tìm thấy dữ liệu phù hợp!</div>
              }
            </div>
            @if (editMode && ((checkList.Any() && Tab == "shift") || Tab == "register"))
            {
              <div class="footer buttons_footer px-5 py-3">
                <div class="columns is-multiline is-mobile is-vcentered">
                  <div class="column">
                    @(Tab == "shift" ? $"{checkList.Count} nhân viên được chọn" : "")
                  </div>
                  <div class="column is-narrow">
                    <div class="buttons">
                      @if (Tab == "shift")
                      {
                        <a class="button is-link" @onclick="HandleEditRow">
                          Tiếp tục
                        </a>
                      }
                      else if (Tab == "register")
                      {
                        <a class="button is-link" @onclick="RegisterRow">
                          Tiếp tục
                        </a>
                      }
                    </div>
                  </div>
                </div>
              </div>
            }
          </div>
        }

        @if (Tab == "report")
        {
          <_RegisterReport dataList="dataRegisters"
                           workList="dataWorkList"
                           dataRules="dataRules" />
        }
      </section>

      @if (editRow)
      {
        List<MemberModel> users = userList.Where(x => checkList.Contains(x.id)).ToList();
        <_TimeListPopupMembers users="users"
                               shifts="shiftList"
                               startDate="startDate"
                               endDate="endDate"
                               OnCancel="Cancel"
                               OnUpdateDay="UpdateDay"
                               OnUpdateWeek="UpdateWeek"
                               Tab="@Tab" />
      }

      @if (editCell)
      {
        string[] parts = current.Split('-');
        var users = userList.Where(x => x.id == parts[0].Trim()).ToList();
        long date = (long)Convert.ToDouble(parts[1].Trim());
        <_TimeListPopupDay shifts="shiftList"
                           OnUpdate="OnUpdateCell"
                           date="date"
                           users="users"
                           shiftsSelected="shiftsSelected"
                           Tab="@Tab" />
      }

      @if (editCol)
      {
        var users = userList.Where(x => checkList.Contains(x.id)).ToList();
        <_TimeListPopupDay shifts="shiftList"
                           OnUpdate="OnUpdateColumn"
                           date="dateCol"
                           users="users"
                           shiftsSelected="shiftsSelected" />
      }

      @if (isShowReset)
      {
        <_ResetTimeListPopup users="userList"
                             UpdateConfirm="UpdateConfirm"
                             departmentAll="departmentAll" />
      }

      @if (isExport)
      {
        <_ExportExelPopup OnUpdate="Export"
                          model="export" />
      }

      @if (isConfirm)
      {
        <_ConfirmRegisterPopup dataRules="dataRules"
                               OnUpdate="UpdateConfirm" />
      }
    }
  }
  else
  {
    <_PopupUnauthorized msgAccess="@msgAccess" />
  }
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Tab { get; set; } = "shift";

  private List<MemberModel> userList = new();
  private List<MemberModel> userSelect = new();
  private List<HrmWorkShiftModel> shiftList = new();
  private List<HrmWorkShiftModel> dataWorkList = new();
  private HrmRulesModel dataRules;
  private List<string> shiftsSelected = new();
  private List<DepartmentModel> departmentAll = new();
  private List<string> checkList = new();
  private List<HrmTimeListModel> dataShifts = new();
  private List<HrmTimeListRegisterModel> dataRegisters = new();
  private DateTimeOffset startDate = DateTime.Today.AddDays(1);
  private DateTimeOffset endDate = DateTime.Today.AddDays(2);
  private long filterDateS;
  private long filterDateE;
  private DotNetObjectReference<TimeList> obj;
  private List<HrmDayOffModel> dayOffList = new();
  private Dictionary<string, List<string>> dataTemp = new();
  private HrmTimeListModel.ExportData export = null;
  private string _title = "Phân ca";

  private string msgAccess = string.Empty;
  private string filterKeyword;
  private string filterDepartment = string.Empty;
  private string current = String.Empty;

  private int preMonth;
  private int nextMonth;
  private long dateCol;
  private bool isSelectedAll;
  private bool changeMonthDropdown;
  private bool _access;
  private bool isOverMonth;
  private bool editMode;
  private bool editCell;
  private bool editCol;
  private bool isConfirm;
  private bool isExport;
  private bool isLoading;
  private bool editRow;
  private bool checkRules;
  private bool isShowReset;
  private bool isFetching;

  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "timekeeping", out msgAccess);
  }

  protected override async Task OnInitializedAsync()
  {
    // Quyền phân ca
    _access = Layout.User.role == 1 || (Layout.User.role == 2 && Layout.User.role_manage.timekeeping);
    if (CheckAccess())
    {
      isFetching = true;
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      userList = shareStorage.MemberList;

      // Lấy rules
      dataRules = await DbHrmRules.Get(Layout.Company.id, Layout.Company.id);
      if (dataRules != null)
        checkRules = dataRules.register_shift.has_register_shifts;

      // Lấy phòng ban
      departmentAll = await DbDepartment.GetAll(Layout.Company.id);

      // Lấy ca làm
      dataWorkList = await DbHrmWorkShift.GetListWithoutDelete(Layout.Company.id);

      // Lấy ngày nghỉ
      dayOffList = await DbHrmDayOff.GetAll(Layout.Company.id, true);

      shiftList = dataWorkList.Where(x => !x.is_deleted).ToList();

      if (dataWorkList.Any())
        dataWorkList = dataWorkList.OrderBy(x => TimeSpan.Parse(x.checkin)).ToList();

      await GetList();
      obj = DotNetObjectReference.Create(this);
      await InitialTime();
      isFetching = false;
    }
  }

  private async Task GetList()
  {
    isFetching = true;
    userSelect = new();

    if (Tab == "shift")
      dataShifts = await DbHrmTimeList.GetListByMonth(Layout.Company.id, DateTime.Now);
    else if ((Tab == "register" || Tab == "report") && checkRules)
      dataRegisters = await DbHrmTimeListRegister.GetListByMonth(Layout.Company.id, DateTime.Now);

    await CheckOverMonth();
    userSelect = userList
        .Where(x => (string.IsNullOrEmpty(filterDepartment) || x.departments_id.Contains(filterDepartment))
                 && (string.IsNullOrEmpty(filterKeyword) || Shared.SearchKeyword(filterKeyword, x.name)))
        .ToList();


    if (Tab == "register" && checkRules)
      userSelect = userSelect
          .Where(x => x.role != 1 && !(x.role == 2 && x.role_manage.timekeeping) && dataRules.register_shift.users.Contains(x.id))
          .ToList();
    isFetching = false;
  }

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrEmpty(Tab))
      Tab = "shift";

    await ChangeView();
  }

  private void ChangeDepartment(ChangeEventArgs e)
  {
    filterDepartment = e.Value.ToString();
    checkList = new();
    isSelectedAll = false;
    filterKeyword = String.Empty;
    userSelect = userList.Where(x => (string.IsNullOrEmpty(filterDepartment) || x.departments_id.Contains(filterDepartment))).ToList();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("dragScrollX");
      await JSRuntime.InvokeVoidAsync("TimeList", obj);
      await ScrollToToday();
    }
  }

  public void Dispose()
  {
    try
    {
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }

  private async Task InitialTime()
  {
    DateTime start = DateTime.Today;
    DateTime end = DateTime.Today;
    Shared.GetTimeSpan(2, out start, out end);
    filterDateS = start.Ticks;
    filterDateE = end.Ticks;
    await CheckOverMonth(true);
  }

  private async Task CheckOverMonth(bool isDefault = false)
  {
    isOverMonth = new DateTime(filterDateS).Month != new DateTime(filterDateE).Month;
    preMonth = new DateTime(filterDateS).Month;
    nextMonth = new DateTime(filterDateE).AddMonths(1).Month;

    await ScrollToToday(isDefault);
  }

  /// <summary>Định dạng thời gian (T2 - 01)</summary>
  private string DateToDay(DateTime date)
  {
    return string.Format("{0} - {1:dd}", Shared.ConvertWeekdays(date), date);
  }

  private async Task NavigateMonth(bool isNext)
  {
    filterDateS = new DateTime(filterDateS).AddMonths(isNext ? 1 : -1).Ticks;
    filterDateE = new DateTime(filterDateE).AddMonths(isNext ? 1 : -1).Ticks;

    var dateS = new DateTime(filterDateS);

    if (Tab == "shift")
    {
      dataShifts = await DbHrmTimeList.GetListByMonth(Layout.Company.id, dateS);
      if (dataTemp.Count > 0)
      {
        foreach (var item in dataTemp)
        {
          var parts = item.Key.Split('-');
          var user_id = parts[0].Trim();
          var date = (long)Convert.ToDouble(parts[1].Trim());
          await DbHrmTimeList.HandleData(user_id, item.Value, Layout.Company.id, new DateTime(date));
        }
      }
    }
    else if (Tab == "register" && checkRules)
      dataRegisters = await DbHrmTimeListRegister.GetListByMonth(Layout.Company.id, dateS);

    await CheckOverMonth(false);
  }

  private async Task ChangeMonth(int month, int year)
  {
    filterDateS = new DateTime(year, month, 1).Ticks;
    filterDateE = new DateTime(year, month, DateTime.DaysInMonth(year, month)).Ticks;

    await CheckOverMonth(false);
  }

  private async Task ScrollToToday(bool isDefault = true)
  {
    var today = isDefault ? DateTime.Today : new DateTime(new DateTime(filterDateS).Year, new DateTime(filterDateS).Month, 1);

    if (!isDefault && DateTime.Today.Month == new DateTime(filterDateS).Month)
      today = DateTime.Today;

    if (!Shared.IsEmpty(filterKeyword))
      today = new DateTime(new DateTime(filterDateS).Year, new DateTime(filterDateS).Month, 1);

    if (today <= new DateTime(filterDateE) && today >= new DateTime(filterDateS))
    {
      var scrollwidth = (today - new DateTime(filterDateS)).TotalDays * 150;
      await JSRuntime.InvokeVoidAsync("scrollDivX", "scrollbox", scrollwidth);
    }
  }

  private void EditCell(MouseEventArgs e, string value)
  {
    editCell = true;
    current = value;

    if (Tab == "shift")
    {
      var getShifts = dataShifts.FirstOrDefault(x => x.id == value.Split('-')[0].Trim());
      if (getShifts != null)
      {
        var check = getShifts.shifts.FirstOrDefault(x => x.day == Convert.ToInt64(value.Split('-')[1].Trim()));
        if (check != null)
          shiftsSelected.AddRange(check.shifts_id);
        else
          shiftsSelected = new();
      }
      else
        shiftsSelected = new();
    }
    else if (Tab == "register" && checkRules)
    {
      var getShifts = dataRegisters.FirstOrDefault(x => x.id == value.Split('-')[0].Trim());
      if (getShifts != null)
      {
        var check = getShifts.shifts_register.FirstOrDefault(x => x.day == Convert.ToInt64(value.Split('-')[1].Trim()));
        if (check != null)
          shiftsSelected.AddRange(check.shifts_id);
        else
          shiftsSelected = new();
      }
      else
        shiftsSelected = new();
    }
  }

  [JSInvokable]
  public async Task UpdatePreMonthOnScroll(JsonElement value)
  {
    var result = value.Deserialize<int[]>();
    if (result[0] == 0 || result[0] == new DateTime(filterDateS).Month)
      preMonth = new DateTime(filterDateS).Month;
    else
      preMonth = result[0];
    await InvokeAsync(StateHasChanged);
  }

  // Xử lý chọn nhân viên áp dụng
  private void CheckItem(string id)
  {
    if (checkList.Contains(id))
      checkList.Remove(id);
    else
      checkList.Add(id);
  }

  // Update phân ca cho nhân viên theo tuần
  private async Task UpdateWeek(HrmTimeListModel.ShiftsData current)
  {
    var startF = new DateTime(current.start);
    var endF = new DateTime(current.end);

    for (DateTime date = endF; date >= startF; date = date.AddDays(-1))
    {
      var weekday = (int)date.DayOfWeek == 0 ? 8 : (int)date.DayOfWeek + 1;

      foreach (var item in current.week)
      {
        if (item.Key == weekday)
        {
          var sorted = HrmService.SortedShifts(shiftList.Where(x => item.Value.Contains(x.id)).ToList());
          foreach (var user in checkList)
          {
            var formated = user + " - " + date.Ticks;
            await HandleShifts(formated, sorted);
          }
        }
      }
    }
    Reset();
  }

  // Update phân ca cho nhân viên theo ngày
  private async Task UpdateDay(HrmTimeListModel.ShiftsData current)
  {
    var startF = new DateTime(current.start);
    var endF = new DateTime(current.end);

    for (DateTime date = endF; date >= startF; date = date.AddDays(-1))
    {
      var tick = date.Ticks;
      foreach (var user in checkList)
      {
        var formated = user + " - " + tick;
        var sorted = HrmService.SortedShifts(shiftList.Where(x => current.days.Contains(x.id)).ToList());
        await HandleShifts(formated, sorted);
      }
    }
    Reset();
  }

  private async Task OnUpdateColumn(bool isUpdate)
  {
    if (isUpdate)
    {
      foreach (var user in checkList)
      {
        var formated = user + " - " + dateCol;
        var sorted = HrmService.SortedShifts(shiftList.Where(x => shiftsSelected.Contains(x.id)).ToList());
        await HandleShifts(formated, sorted);
      }
    }
    editCol = false;
    dateCol = 0;
    shiftsSelected = new();
  }

  private async Task OnUpdateCell(bool isUpdate)
  {
    if (isUpdate)
    {
      var sorted = HrmService.SortedShifts(shiftList.Where(x => shiftsSelected.Contains(x.id)).ToList());
      await HandleShifts(current, sorted);
    }

    editCell = false;
    shiftsSelected = new();
    current = string.Empty;
  }

  private void ToggleSelected(bool value)
  {
    if (value)
      checkList = userSelect.Select(x => x.id).ToList();
    else
      checkList = new();

    isSelectedAll = value;
  }

  private void HandleEditCol(long date)
  {
    dateCol = date;
    editCol = true;
  }

  private async Task HandleEditRow()
  {
    if (checkList.Count == 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn nhân viên nào!");
    else
    {
      editCell = false;
      editRow = true;
    }
  }

  /// <summary>Đăng ký theo hàng</summary>
  private void RegisterRow()
  {
    if (Tab == "register" && checkRules)
    {
      checkList = new();
      checkList.Add(Layout.User.id);

      editCell = false;
      editRow = true;
    }
  }

  private void EditMode(bool value)
  {
    if (!value)
    {
      checkList = new();
      isSelectedAll = false;
      editCell = false;
      isLoading = false;
    }
    editMode = value;
  }

  /// <summary>Duyệt đơn</summary>
  private void ConfirmRegister()
  {
    isConfirm = true;
  }

  private void Cancel()
  {
    editRow = false;
  }

  private void Reset()
  {
    editRow = false;
    checkList = new();
    startDate = DateTime.Today.AddDays(1);
    endDate = DateTime.Today.AddDays(2);
  }

  private async Task OnApplyUpdate(bool isUpdate)
  {
    if (isUpdate)
    {
      isLoading = true;
      foreach (var item in dataTemp)
      {
        var parts = item.Key.Split('-');
        var user_id = parts[0].Trim();
        var date = (long)Convert.ToDouble(parts[1].Trim());
        if (Tab == "shift")
          await DbHrmTimeList.HandleData(user_id, item.Value, Layout.Company.id, new DateTime(date));
        else if (Tab == "register" && checkRules)
          await DbHrmTimeListRegister.HandleData(user_id, item.Value, Layout.Company.id, new DateTime(date));
      }
      if (Tab == "shift")
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật bảng phân ca thành công!");
        dataShifts = await DbHrmTimeList.GetListByMonth(Layout.Company.id, new DateTime(filterDateS));
      }
      else if (Tab == "register" && checkRules)
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật bảng đăng ký ca thành công!");
        dataRegisters = await DbHrmTimeListRegister.GetListByMonth(Layout.Company.id, new DateTime(filterDateS));
      }
      EditMode(false);
    }
    else if (dataTemp.Count() > 0)
    {
      bool isConfirm = await JSRuntime.InvokeAsync<bool>("confirm", "Các thay đổi sẽ không được lưu, bạn có chắc chắn muốn thoát?");
      if (!isConfirm)
      {
        EditMode(true);
        return;
      }
      dataTemp = new();
      if (Tab == "shift")
        dataShifts = await DbHrmTimeList.GetListByMonth(Layout.Company.id, new DateTime(filterDateS));
      else if (Tab == "register" && checkRules)
        dataRegisters = await DbHrmTimeListRegister.GetListByMonth(Layout.Company.id, new DateTime(filterDateS));

      EditMode(false);
    }
    else
      EditMode(false);
  }

  private async Task HandleShifts(string dataF, List<string> sorted)
  {
    if (Tab == "shift")
    {
      if (dataTemp.ContainsKey(dataF))
        dataTemp.Remove(dataF);

      dataTemp.Add(dataF, sorted);
    }

    string[] parts = dataF.Split('-');
    string user_id = parts[0].Trim();
    long date = (long)Convert.ToDouble(parts[1].Trim());

    if (Tab == "register" && checkRules)
    {
      var dataRegistersNew = await DbHrmTimeListRegister.GetListByMonth(Layout.Company.id, new DateTime(filterDateS));
      var foundData = dataRegistersNew.Where(x => x.id == user_id).FirstOrDefault();
      if (foundData != null)
      {
        var foundShift = foundData.shifts_register.Where(x => x.day == date).FirstOrDefault();
        if (foundShift != null)
        {
          if (!foundShift.is_confirm)
          {
            if (dataTemp.ContainsKey(dataF))
              dataTemp.Remove(dataF);

            dataTemp.Add(dataF, sorted);
          }
        }
        else
        {
          if (dataTemp.ContainsKey(dataF))
            dataTemp.Remove(dataF);

          dataTemp.Add(dataF, sorted);
        }
      }
      else
      {
        if (dataTemp.ContainsKey(dataF))
          dataTemp.Remove(dataF);

        dataTemp.Add(dataF, sorted);
      }
    }

    if (Tab == "shift")
    {
      var foundData = dataShifts.Where(x => x.id == user_id).FirstOrDefault();

      if (foundData != null)
      {
        var foundShift = foundData.shifts.Where(x => x.day == date).FirstOrDefault();

        if (foundShift != null)
          foundShift.shifts_id = sorted;
        else
        {
          var model = new HrmTimeListModel.Shift
            {
              day = date,
              shifts_id = sorted
            };
          foundData.shifts.Add(model);
        }
      }
      else
      {
        var model = new HrmTimeListModel
          {
            id = user_id,
          };
        var data = new HrmTimeListModel.Shift
          {
            day = date,
            shifts_id = sorted
          };
        model.shifts.Add(data);
        dataShifts.Add(model);
      }
    }
    else if (Tab == "register" && checkRules)
    {
      var foundData = dataRegisters.Where(x => x.id == user_id).FirstOrDefault();

      if (foundData != null)
      {
        var foundShift = foundData.shifts_register.Where(x => x.day == date).FirstOrDefault();

        if (foundShift != null)
        {
          foundShift = foundData.shifts_register.Where(x => x.day == date && !x.is_confirm).FirstOrDefault();
          if (foundShift != null)
            foundShift.shifts_id = sorted;
        }
        else
        {
          var model = new HrmTimeListRegisterModel.ShiftRegister
            {
              day = date,
              shifts_id = sorted
            };
          foundData.shifts_register.Add(model);
        }
      }
      else
      {
        var model = new HrmTimeListRegisterModel
          {
            id = user_id,
          };
        var data = new HrmTimeListRegisterModel.ShiftRegister
          {
            day = date,
            shifts_id = sorted
          };
        model.shifts_register.Add(data);
        dataRegisters.Add(model);
      }
    }
  }

  private void ExportFile()
  {
    export = new HrmTimeListModel.ExportData
      {
        start = new DateTime(filterDateS),
        end = new DateTime(filterDateE),
        name = "Bảng phân ca",
      };
    isExport = true;
  }

  private async Task Export(bool isConfirmed)
  {
    if (isConfirmed)
    {
      var dataExport = new List<List<string>>();
      var header = new List<string>
     {
      "Tên nhân viên",
      "Phòng ban"
     };
      for (DateTime i = export.start.Value.DateTime; i.Ticks <= export.end.Value.Ticks; i = i.AddDays(1))
      {
        var day = i;
        header.Add(DateToDay(day));
      }
      dataExport.Add(header);

      foreach (var user in userList)
      {
        var department = !Shared.IsEmpty(user.departments_name) ? user.departments_name.Split("/").Last() : "";
        var item = new List<string>
        {
         user.name,
         department
        };
        var timeListUser = dataShifts.Where(x => x.id == user.id).FirstOrDefault();
        if (timeListUser != null)
        {
          for (DateTime i = export.start.Value.DateTime; i.Ticks <= export.end.Value.Ticks; i = i.AddDays(1))
          {
            var shiftName = string.Empty;
            var hasShift = false;
            foreach (var data in timeListUser.shifts)
            {
              if (data.day == i.Ticks)
              {
                hasShift = true;
                var shift = data.shifts_id;
                foreach (var itemShift in shift)
                {
                  var shiftData = shiftList.Where(x => x.id == itemShift).FirstOrDefault();
                  if (shiftData != null)
                  {
                    shiftName += shiftData.name + " (" + shiftData.checkin + " - " + shiftData.checkout + ")";
                    shiftName += Environment.NewLine;
                  }
                  else
                    continue;
                }
                break;
              }
            }
            if (hasShift)
              item.Add(shiftName);
            else
              item.Add("");
          }
        }
        else
        {
          for (DateTime i = export.start.Value.DateTime; i.Ticks <= export.end.Value.Ticks; i = i.AddDays(1))
          {
            item.Add("");
          }
        }
        dataExport.Add(item);
      }
      var fileLink = Files.ExportExcel(dataExport, export.name);
      if (fileLink.StartsWith("/"))
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Bạn đã export file thành công!");
        await JSRuntime.InvokeAsync<string>("newTab", fileLink);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, fileLink);
      isExport = false;
    }
    else
      isExport = false;
    export = null;
  }

  private async Task UpdateConfirm(bool e)
  {
    if (e)
    {
      dataTemp = new();
      await GetList();
      await InitialTime();
    }
    isShowReset = false;
    isConfirm = false;
  }

  private async Task ChangeView()
  {
    if (!editMode)
    {
      if (Tab == "shift" || Tab == "register")
      {
        dataTemp = new();
        await GetList();
        await InitialTime();
      }

      if (Tab == "report")
        dataRegisters = await DbHrmTimeListRegister.GetList(Layout.Company.id);
    }
  }
}