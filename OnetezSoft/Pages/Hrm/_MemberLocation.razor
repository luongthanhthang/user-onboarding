@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="dropdown @(Layout.IsMobile ? "is-right is-fullwidth" : "") @(toggle ? "is-active" : "")">
  <div class="dropdown-trigger">
    <div class="avatar_list">
      @foreach (var item in ShortList())
      {
        <span class="image is-rounded is-24x24 has-background-grey" title="@item.name">
          @if(string.IsNullOrEmpty(item.avatar))
          {
            <span class="is-text">@item.name</span>
          }
          else
          {
            <img src="@item.avatar" alt="AVT">
          }
        </span>
      }
      @if(isEdit)
      {
        <a class="icon has-background-white has-text-grey is-bordered is-rounded @(members.Count == 0 ? "" : "ml-3")"
          @onclick="Toggle">
          <i class="material-icons-outlined is-size-6">add</i>
        </a>
      }
      else 
      {
        <a class="icon has-text-grey @(members.Count == 0 ? "" : "ml-3")" @onclick="Toggle">
          <i class="material-icons-outlined is-size-5">@(toggle ? "expand_more" : "chevron_right")</i>
        </a>
      }
    </div>
  </div>
  @if(toggle)
  {
    <div class="dropdown-menu" style="width: @(Layout.IsMobile ? "320px" : "350px")">
      <div class="dropdown-content px-3 has-text-left" style="max-height: none;">
        @if(isEdit)
        {
          <ul class="columns is-vcentered is-multiline is-variable is-1 mb-3 is-mobile">
            <li class="column is-half font_14">
              Cập nhật thành viên
            </li>
            <li class="column is-half">
              <div class="select is-small is-fullwidth">
                <select @onchange="ChangeDepartment">
                  <option value="">Tất cả phòng ban</option>
                  @foreach (var item in departments)
                  {
                    <option value="@item.id">@item.name</option>
                  }
                </select>
              </div>
            </li>
            <li class="column is-full">
              <div class="control has-icons-right">
                <input id="search_member" class="input is-small is-rounded" type="text" autocomplete="off"
                  @bind="Search" @bind:event="oninput" placeholder="Tìm thành viên..." >
                <span class="icon is-right">
                  <i class="material-icons-outlined is-size-6">search</i>
                </span>
              </div>
            </li>
          </ul>
          <div class="scrolly py-1" style="max-height: 150px;">
            @foreach (var memberId in members)
            {
              var item = UserService.GetUser(sources, memberId);
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column is-narrow">
                  <a class="icon is-small has-text-danger" @onclick="() => RemoveItem(memberId)">
                    <i class="material-icons-outlined is-size-6">remove_circle_outline</i>
                  </a>
                </li>
                <li class="column has-text-weight-medium">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.FullName</span>
                  </div>
                </li>
              </ul>
            }
            <hr class="my-2" />
            @if(suggests.Count > 0)
            {
              <a class="icon-text has-text-link mb-1" @onclick="() => checkAll = !checkAll">
                <span class="icon is-small">
                  <i class="material-icons-outlined is-size-6">
                    @(checkAll ? "check_box" : "check_box_outline_blank")
                  </i>
                </span>
                <span class="has-text-weight-semibold ml-2">Chọn tất cả</span>
              </a>
            }
            else
            {
              <div class="py-2 has-text-@(string.IsNullOrEmpty(keyword) ? "white" : "grey")">Không tìm thấy kết quả phù hợp</div>
            }
            @foreach (var item in suggests)
            {
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column is-narrow">
                  <a class="icon is-small has-text-info" @onclick="() => AddItem(item.id)">
                    <i class="material-icons-outlined is-size-6">add_circle_outline</i>
                  </a>
                </li>
                <li class="column">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                  </div>
                </li>
              </ul>
            }
          </div>
          <hr class="dropdown-divider">
          <div class="buttons is-right">
            <a class="button is-link is-small" @onclick="Update">
              <span class="icon">
                <i class="material-icons-round is-size-6">done</i>
              </span>
              <span class="is-size-7">Hoàn tất</span>
            </a>
            <a class="button is-danger is-small" @onclick="Toggle">
              <span class="icon">
                <i class="material-icons-round is-size-6">close</i>
              </span>
              <span class="is-size-7">Hủy</span>
            </a>
          </div>
        }
        else
        {
          <div class="scrolly py-1" style="max-height: 250px;">
            @foreach (var memberId in members)
            {
              var item = UserService.GetMember(sources, memberId);
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column has-text-weight-medium">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                  </div>
                </li>
              </ul>
            }
          </div>
        }
      </div>
    </div>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<string> members { get; set; } = new();
  [Parameter]
  public List<UserModel> sources { get; set; } = new();
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback OnUpdate { get; set; }

  private bool toggle = false;
  private bool checkAll = false;
  private string keyword = string.Empty;
  private string department = string.Empty;
  private List<MemberModel> suggests = new();
  private List<DepartmentModel.SelectList> departments = new();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if(firstRender)
    {
      departments = await DbDepartment.GetSelectList(Layout.Company.id, null, 0, null);
    }
  }

  protected override void OnParametersSet()
  {
    toggle = false;
    keyword = null;
    department = null;
    checkAll = false;
  }

  private void SuggestAll()
  {
    suggests = new();
    foreach (var item in sources)
    {
      if (members.Where(x => x == item.id).Count() == 0)
        suggests.Add(UserService.ConvertToMember(item));
    }
  }

  private async Task Update()
  {
    toggle = false;
    keyword = null;
    if(checkAll)
    {
      foreach (var item in suggests)
        if(!members.Contains(item.id))
          members.Add(item.id);
      checkAll = false;
    }
    await OnUpdate.InvokeAsync();
  }

  private void AddItem(string id)
  {
    if(!members.Contains(id))
      members.Add(id);
    suggests.RemoveAll(x => x.id == id);
  }


	private async Task RemoveItem(string id)
  {
    members.Remove(id);
		await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa thành viên ra khỏi địa điểm!");
    if(!string.IsNullOrEmpty(id))
      suggests.Add(UserService.GetMember(sources, id));
  }

	private void ChangeDepartment(ChangeEventArgs e)
  {
    department = e.Value.ToString();
    keyword = string.Empty;
    suggests = new();
    foreach (var item in sources)
    {
      if(members.Where(x => x == item.id).Count() == 0)
        if (string.IsNullOrEmpty(department) || item.departments_id.Contains(department))
          suggests.Add(UserService.ConvertToMember(item));
    };
  }

  private string Search
  {
    get => keyword;
    set
    {
      keyword = value;
      if (!string.IsNullOrEmpty(value))
      {
        suggests = new();
        foreach (var item in sources)
        {
          bool check = true;
          if(!string.IsNullOrEmpty(department) && !item.departments_id.Contains(department))
            check = false;
          if (!Shared.SearchKeyword(value, item.id + item.FullName + item.email))
            check = false;
          if (members.Where(x => x == item.id).Count() > 0)
            check = false;

          if(check)
            suggests.Add(UserService.ConvertToMember(item));
        }
      }
      else
        SuggestAll();
    }
  }

  private async Task Toggle()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    keyword = null;
    department = null;
    checkAll = false;
    toggle = !toggle;
    if (toggle)
    {
      SuggestAll();
      await JSRuntime.InvokeVoidAsync("setFocus", "search_member");
    }
    else
      suggests = new();
  }

  private List<MemberModel> ShortList()
  {
    var results = new List<MemberModel>();
    for (int i = 0; i < members.Count; i++)
    {
      var item = UserService.GetUser(sources, members[i]);
      if(item != null && !string.IsNullOrEmpty(item.id))
      {
        results.Add(UserService.ConvertToMember(item));
        if(results.Count == 2)
          break;
      }
    }
    
    if(members.Count > 2)
    {
      int count = members.Count - 2 >= 100 ? 99 : members.Count - 2;
      results.Add(new () { name = $"+{count}" });
    }
    
    return results;
  }

}