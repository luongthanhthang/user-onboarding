@inject IJSRuntime JSRuntime

<section class="modal is-active">
  <div class="modal-background"></div>
  <section class="modal-card">
    <section class="modal-card-head">
      <div class="modal-card-title">
        Thu hồi đơn từ
      </div>
      <a class="delete is-medium" @onclick="Cancel"></a>
    </section>
    <section class="modal-card-body">
      Bạn có chắc muốn thu hồi đơn từ?
    </section>
    <section class="modal-card-foot is-right">
      <a class="button" @onclick="Cancel">
        <span class="icon">
          <i class="material-icons-round is-size-6">close</i>
        </span>
        <span>Hủy</span>
      </a>
      <a class="button is-danger" @onclick="Update">
        <span class="icon">
          <i class="material-icons-round is-size-6">history</i>
        </span>
        <span>Thu hồi</span>
      </a>
    </section>
  </section>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string formIdSelect { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(false);
  }

  private async Task Update()
  {
    var checkItem = await DbHrmForm.Get(Layout.Company.id, formIdSelect);
    if (checkItem != null)
    {
      if (checkItem.confirm_users.All(i => i.status == 1))
      {
        await DbHrmForm.Delete(Layout.Company.id, formIdSelect);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Thu hồi đơn từ thành công!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Đơn từ của bạn đã được phê duyệt!");

      await OnUpdate.InvokeAsync(true);

      // xoá file storage
      if (checkItem.files.Any())
        await DeleteStorage(checkItem);
    }
    await OnUpdate.InvokeAsync(true);
  }

  private async Task DeleteStorage(HrmFormModel form)
  {
    foreach (var item in form.files)
    {
      await StorageService.DeleleFileAndLog(item, Layout.User, Layout.Company.id);
    }
  }
}