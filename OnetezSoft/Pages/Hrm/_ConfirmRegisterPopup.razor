@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="modal is-active">
	<div class="modal-background"></div>
	<div class="modal-card" style="overflow: visible;">
		<div class="modal-card-head">
			<div class="modal-card-title">
				<span>Phê duyệt đăng ký</span>
				<br>
				<span class="is-size-7 has-text-danger">
					(Cảnh báo: Dữ liệu phê duyệt sẽ ghi đè lên bảng phân ca tương ứng)
				</span>
			</div>
			<a class="delete" @onclick="Cancel"></a>
		</div>
		<div class="modal-card-body" style="overflow: visible;">
			<form @onsubmit="Update">
				<div class="field">
					<label class="label">Nhân viên áp dụng: @(usersId.Count)</label>
					<div class="control">
						<_MemberDayOff members="usersId" sources="users" isEdit="true" isUp="true" OnUpdate="OnUpdateUsers" />
					</div>
				</div>

				<div class="field">
					<label class="label">Ngày áp dụng- Ngày kết thúc: </label>
					<div class="control">
						<div class="field has-addons">
							<div class="control">
								<span class="button is-link">
									<i class="material-icons-outlined">calendar_today</i>
								</span>
							</div>
							<div class="control is-expanded">
								<div class="input" style="width: 190px;">
									<DateRangePicker MinDate="DateTime.Today.AddDays(1)" @bind-StartDate="startDate" @bind-EndDate="endDate" />
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="field is-grouped mt-5 is-justify-content-flex-end">
					<div class="control">
						<a class="button" @onclick="Cancel">
							Hủy
						</a>
					</div>
					<div class="control">
						<a class="button is-link @(isLoading ? "is-loading" : "")" @onclick="Update">
							<span class="icon">
								<span class="material-icons-outlined is-size-6">
									approval
								</span>
							</span>
							<span>Phê duyệt</span>
						</a>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	public LayoutMain Layout { get; set; }
	[Parameter]
	public EventCallback<bool> OnUpdate { get; set; }
	[Parameter]
	public List<MemberModel> users { get; set; } = new();
	[Parameter]
	public HrmRulesModel dataRules { get; set; }

	private List<MemberModel> usersUpdate = new();
	private List<string> usersId = new();
	private bool isLoading = false;
	private DateTimeOffset? startDate = DateTime.Today;
	private DateTimeOffset? endDate = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
		users = shareStorage.MemberList.Where(x => x.role != 1 && !(x.role == 2 && x.role_manage.timekeeping) && dataRules.register_shift.users.Contains(x.id)).ToList();
		Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
		startDate = DateTime.Today.AddDays(1);
		endDate = startDate.Value.AddDays(6);
	}

	private async Task Cancel()
	{
		await OnUpdate.InvokeAsync(false);
	}

	private async Task Update()
	{
		try
		{
			if (usersId.Count == 0)
				await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn nhân viên áp dụng!");
			else if (startDate.Value.Ticks > endDate.Value.Ticks)
				await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày kết thúc phải lớn hơn hoặc bằng ngày áp dụng!");
			else
			{
				var shiftUpdate = await DbHrmTimeListRegister.GetByRangeAndUsers(Layout.Company.id, usersId, new DateTime(startDate.Value.Ticks).Date.Ticks, new DateTime(endDate.Value.Ticks).Date.Ticks);

				var from = new DateTime(startDate.Value.Date.Ticks);
				var to = new DateTime(endDate.Value.Date.Ticks);

				for (DateTime i = from; i <= to; i = i.AddDays(1))
				{
					var date = i;
					var shifts_id = new List<string>();

					foreach (var userId in usersId)
					{
						var shiftUser = shiftUpdate.FirstOrDefault(i => i.id == userId);
						if (shiftUser != null)
						{
							var shifts = shiftUser.shifts_register.FirstOrDefault(y => y.day == date.Ticks);
							if (shifts != null)
							{
								await DbHrmTimeList.HandleData(shiftUser.id, shifts.shifts_id, Layout.Company.id, new DateTime(date.Ticks));
								await DbHrmTimeListRegister.HandleData(shiftUser.id, shifts.shifts_id, Layout.Company.id, new DateTime(date.Ticks), null, false, true);
							}
							else
							{
								await DbHrmTimeList.HandleData(shiftUser.id, shifts_id, Layout.Company.id, new DateTime(date.Ticks));
								await DbHrmTimeListRegister.HandleData(shiftUser.id, shifts_id, Layout.Company.id, new DateTime(date.Ticks), null, false, true);
							}
						}
						else
						{
							await DbHrmTimeList.HandleData(userId, shifts_id, Layout.Company.id, new DateTime(date.Ticks));
							await DbHrmTimeListRegister.HandleData(userId, shifts_id, Layout.Company.id, new DateTime(date.Ticks), null, false, true);
						}
					}
				}

				await JSRuntime.InvokeVoidAsync("tagline", true, "Đã phê duyệt thành công!");
				await SendNotify(819);
				await OnUpdate.InvokeAsync(true);
			}
		}
		catch(Exception ex)
		{
			var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
			StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
			await Layout.Tagline();
		}
	}

	private void OnUpdateUsers()
	{
		usersUpdate = users.Where(i => usersId.Contains(i.id)).ToList();
	}

	private async Task SendNotify(int notifyType)
	{
		try
		{
			var content = "";
			if (startDate.Value.Date.Ticks != endDate.Value.Date.Ticks)
				content = "từ " + new DateTime(startDate.Value.Ticks).ToString("dd'/'MM'/'yyyy") + " đến " + new DateTime(endDate.Value.Ticks).ToString("dd'/'MM'/'yyyy");
			else
				content = "ngày " + new DateTime(startDate.Value.Ticks).ToString("dd'/'MM'/'yyyy");

			var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
			var targetList = shareStorage.MemberList.Where(x => x.role == 1 || (x.role == 2 && x.role_manage.timekeeping)).Select(i => i.id).ToList();
			targetList.AddRange(usersId);
			// Gủi thông báo chuông
			foreach (var userId in targetList.Distinct().ToList())
				await DbNotify.Create(Layout.Company.id, notifyType, content, userId, Layout.User.id);
		}
		catch(Exception ex)
		{
			var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
			StorageService.CatchLog(formatLink, "SendNotify()", ex.ToString(), Layout.User.id, Layout.Company.name);
			await Layout.Tagline();
		}
	}
}
