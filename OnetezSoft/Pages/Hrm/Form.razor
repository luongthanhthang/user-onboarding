@page "/hrm/form"
@page "/hrm/form/{tab}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@implements IDisposable

<PageTitle>@_title</PageTitle>


@if (!CheckAccess())
{
  <_PopupUnauthorized msgAccess="@msgAccess" />
}
else
{
  @if (!isMobile)
  {
    <div class="tabs scrollx">
      <div class="tabs_name">
        Quản lý đơn từ
      </div>
      <ul>
        <li class="@(tab == "1" ? "is-active" : "")">
          <a @onclick="() => ChangeTab(1)">
            <span>Cá nhân</span>
          </a>
        </li>
        <li class="@(tab == "2" ? "is-active" : "")">
          <a @onclick="() => ChangeTab(2)">
            <span>Phê duyệt</span>
          </a>
        </li>
        @if (checkLead || checkAdmin)
        {
          <li class="@(tab == "3" ? "is-active" : "")">
            <a @onclick="() => ChangeTab(3)">
              <span>Danh sách</span>
            </a>
          </li>
        }
      </ul>
    </div>
  }

  <section class="main_content" style="@(Layout.IsMobile ? "width:calc(100vw - 3rem)" : "")">
    @if (isMobile)
    {
      <div class="tabs scrollx">
        <ul style="flex:1">
          <li class="" style="flex:1">
            <a @onclick="() => ChangeTab(1)">
              <span style="white-space: nowrap" class="font_14 @(tab=="1" ? "has-text-link has-text-weight-semibold" : "has-text-black" )">
                Cá nhân
              </span>
            </a>
          </li>
          <li class="" style="flex:1">
            <a @onclick="() => ChangeTab(2)">
              <span style="white-space: nowrap" class="font_14 @(tab=="2" ? "has-text-link has-text-weight-semibold" : "has-text-black" )">
                Phê duyệt
              </span>
            </a>
          </li>
          @if (checkLead || checkAdmin)
          {
            <li class="" style="flex:1">
              <a @onclick="() => ChangeTab(3)">
                <span style="white-space: nowrap" class="font_14 @(tab=="3" ? "has-text-link has-text-weight-semibold" : "has-text-black" )">
                  Danh sách
                </span>
              </a>
            </li>
          }
        </ul>
      </div>
    }

    <div class="card flex_column is_fullheight">
      <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
        <li class="column">
          <h1 class="title is-5 has-text-info is-uppercase" style="white-space: nowrap;">
            @_title
          </h1>
        </li>

        @if (tab == "2" || (tab == "3" && (checkAdmin || checkLead)))
        {
          <li class="column is-narrow">
            <div class="select is-fullwidth">
              <select @onchange="ChangeDepartment">
                <option value="" selected="@string.IsNullOrEmpty(selectDepart)">Phòng ban</option>
                @foreach (var item in departments)
                {
                  <option value="@item.id" selected="@(selectDepart == item.id)">@item.name</option>
                }
              </select>
            </div>
          </li>
        }

        @if (tab == "2" || (tab == "3" && (checkAdmin || checkLead)))
        {
          <li class="column is-one-fifth">
            <form class="control has-icons-right" @onsubmit="Search">
              <input @bind="filterKeyword" class="input is-rounded" type="text" placeholder="Tìm tên nhân viên...">
              <span class="icon is-right">
                <i class="material-icons-outlined is-size-5">search</i>
              </span>
            </form>
          </li>
        }

        <li class="column is-narrow">
          <div class="select is-fullwidth">
            <select @onchange="ChangeDate">
              <option value="1">Tuần này</option>
              <option value="11">Tuần trước</option>
              <option selected="@checkDate" value="2">Tháng này</option>
              <option value="22">Tháng trước</option>
            </select>
          </div>
        </li>

        <li class="column is-narrow is-hidden-mobile">
          <_InputDate @bind-Start="startDate"
          @bind-End="endDate"
                                    IsRange
                       OnRangeSelect="e => ChangeTimeDatepicker()" />
         </li>

         @if (dataFormList.Any())
        {
          <li class="column is-narrow">
            <div class="select is-fullwidth">
              <select @onchange="ChangeForm">
                <option value="" selected="@string.IsNullOrEmpty(selectForm)">Tất cả đơn từ</option>

                @if (!string.IsNullOrEmpty(selectForm))
                {
                  foreach (var item in dataFormList)
                  {
                    <option value="@item.id" selected="@(selectForm == item.id)">@item.name</option>
                  }
                }
                else
                {
                  @foreach (var item in dataFormList)
                  {
                    <option value="@item.id">@item.name</option>
                  }
                }
              </select>
            </div>
          </li>
        }

        <li class="column is-narrow">
          <div class="select is-fullwidth">
            <select @onchange="ChangeStatus">
              <option value="" selected="@string.IsNullOrEmpty(selectStatus)">Tất cả trạng thái</option>

              @if (!string.IsNullOrEmpty(selectStatus))
              {
                foreach (var item in DbHrmForm.GetConfirmStatus().Where(i => i.id != 4).ToList())
                {
                  <option value="@item.id" selected="@(Convert.ToInt32(selectStatus) == item.id)">@item.name</option>
                }
              }
              else
              {
                @foreach (var item in DbHrmForm.GetConfirmStatus().Where(i => i.id != 4).ToList())
                {
                  <option value="@item.id">@item.name</option>
                }
              }
            </select>
          </div>
        </li>

        @if (tab == "1" || Shared.IsEmpty(tab))
        {
          <li class="column is-narrow is-full-mobile">
            <a class="button is-link" style="@(Layout.IsMobile ? "width: 100%;" : "")" @onclick="Create">
              <span class="icon">
                <span class="material-icons-outlined is-size-6">add</span>
              </span>
              <span>Tạo mới</span>
            </a>
          </li>
        }
      </ul>

      <div class="inner_section" style="flex:1">
        @if (modelList.Any())
        {
          if (selectModelList.Any())
          {
            if (!Layout.IsMobile)
            {
              <div id="scrollbox" class="table-container scrolly" style="height: calc(100vh - 296px); overflow: auto !important;">
                <table class="table is-fullwidth is-vcentered sticky">
                  <thead style="z-index: 1;">
                    <tr style="background: #AEC6FF;">
                      <th class=" pl-2" width="125px">
                        <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                          Ngày tạo
                        </span>
                      </th>
                      @if (tab == "2" || (tab == "3" && (checkAdmin || checkLead)))
                      {
                        <th class="" width="200px">
                          <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                            Nhân viên
                          </span>
                        </th>
                      }
                      <th class="" width="100px">
                        <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                          Loại đơn từ
                        </span>
                      </th>
                      <th class="" align="center" width="200px">
                        <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                          Thời gian áp dụng
                        </span>
                      </th>
                      <th class="" width="150px">
                        <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                          Lý do
                        </span>
                      </th>
                      <th class=" sticky start" align="center"
                          style="width: 225px; @((tab == "1" || tab == "2" || Shared.IsEmpty(tab)) ? "right: 200px;" : "right: 0;")">
                        <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                          Tiến trình
                        </span>
                      </th>
                      @if (tab == "1" || tab == "2" || Shared.IsEmpty(tab))
                      {
                        <th class=" sticky" align="center" width="200px"
                            style="right: 0;">
                          <span style="background-color:#AEC6FF;margin: -0.5rem -0.75rem;padding: 0.5rem;display: block;">
                            Hành động
                          </span>
                        </th>
                      }
                    </tr>
                  </thead>

                  <tbody>

                    @foreach (var item in selectModelList)
                    {
                      <tr class="is-clickable" @onclick="() => GetDetail(item)">
                        <td class="pl-2">
                          <span class="is-size-7 has-text-weight-semibold">
                            @($"{new DateTime(item.created):dd'/'MM'/'yyyy}")
                          </span>
                          <br>
                          <span class="is-size-7">
                            @($"{new DateTime(item.created):HH:mm}")
                          </span>
                        </td>

                        @if (tab == "2" || (tab == "3" && (checkAdmin || checkLead)))
                        {
                          <td>
                            <div class="user_item">
                              <img class="image is-24x24 mr-2" src="@users.Find(i => i.id == item.user).avatar" alt="IMG">
                              <span class="text_1_line" style="max-width: 147px;">
                                @users.Find(i => i.id == item.user).FullName
                              </span>
                            </div>
                          </td>
                        }

                        <td>
                          <span style="word-break: break-word;">@item.form.name</span>
                        </td>

                        <td align="center">
                          @if (item.work_date_shifts.Any())
                          {
                            foreach (var workDate in item.work_date_shifts)
                            {
                              <div class="is-flex is-align-items-center has-text-centered is-justify-content-center">
                                <span class="has-text-centered mr-2">
                                  <span class=" has-text-weight-semibold">
                                    @(
                                        new DateTime(workDate.start).ToString("dd'/'MM'/'yy")
                                        )
                                  </span>
                                  <br>
                                  <span class="is-size-7">
                                    @(
                                        new DateTime(workDate.start).ToString("HH:mm")
                                        )
                                  </span>
                                </span>
                                <span class="material-icons mx-1">
                                  arrow_right_alt
                                </span>
                                <span class="has-text-centered mr-2">
                                  <span class=" has-text-weight-semibold">
                                    @(
                                        new DateTime(workDate.end).ToString("dd'/'MM'/'yy")
                                        )
                                  </span>
                                  <br>
                                  <span class="is-size-7">
                                    @(
                                        new DateTime(workDate.end).ToString("HH:mm")
                                        )
                                  </span>
                                </span>
                              </div>
                            }
                          }
                        </td>

                        <td>
                          @if (!string.IsNullOrEmpty(item.reason))
                          {
                            <div class="td-value is-word-break">
                              <div class="text_2_line" onclick="toggleText(this)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                                @((MarkupString)Shared.GetLinks(item.reason))
                              </div>
                            </div>
                          }
                          else
                          {
                            <span>
                              -
                            </span>
                          }
                        </td>

                        <td align="center" class="sticky start"
                            style="@((tab == "1" || tab == "2" || Shared.IsEmpty(tab)) ? "right: 200px;" : "right: 0;") z-index: 0;">
                          @{
                            var checkCancel = false;
                          }
                          <div class="is-flex is-flex-direction-column" style="gap: 5px;">
                            @foreach (var confirmItem in item.confirm_users.OrderBy(i => i.pos).ToList())
                            {
                              var user = users.Find(i => i.id == confirmItem.user);
                              var confirm = new StaticModel();

                              if (checkCancel)
                              {
                                confirm = DbHrmForm.GetConfirmStatusDetail(4);
                              }
                              else
                              {
                                confirm = DbHrmForm.GetConfirmStatusDetail(confirmItem.status);
                              }

                              if (confirmItem.status == 3)
                              {
                                checkCancel = true;
                              }

                              <div class="is-flex is-align-items-center is-justify-content-center" style="opacity: @(confirmItem.status == 1 || confirmItem.status == 4 ? "0.2" : "1");">
                                <div class="user_item" title="@user.FullName">
                                  <img class="image is-24x24 mr-2" src="@user.avatar" alt="IMG">
                                  <div style="flex-shrink: 0; width: 168px;">
                                    <span class="text_1_line has-text-left">
                                      @user.FullName
                                    </span>

                                    @if (confirmItem.date > 0)
                                    {
                                      <p class="is-size-7 has-text-black has-text-weight-medium has-text-left">@(new DateTime(confirmItem.date).ToString("HH':'mm dd'/'MM'/'yyyy"))</p>
                                    }

                                    <span></span>
                                  </div>
                                </div>
                                <span class="material-icons-outlined ml-2 @confirm.color" title="@confirm.name">
                                  @confirm.icon
                                </span>
                              </div>
                            }
                          </div>
                        </td>

                        @if (tab == "1" || tab == "2" || Shared.IsEmpty(tab))
                        {
                          <td align="center" class="sticky" style="right: 0; z-index: 0;" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                            @if (tab == "1" || Shared.IsEmpty(tab))
                            {
                              if (item.confirm_users.All(i => i.status == 1))
                              {
                                <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center"
                                @onclick="() => {confirmCancel = true; formIdSelect = item.id;}">
                                  <span class="icon">
                                    <span class="material-icons-outlined is-size-6">history</span>
                                  </span>
                                  <span>Thu hồi</span>
                                </span>
                              }
                              else
                              {
                                <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center" style="opacity: 0.2;">
                                  <span class="icon">
                                    <span class="material-icons-outlined is-size-6">history</span>
                                  </span>
                                  <span>Thu hồi</span>
                                </span>
                              }
                            }

                            @if (tab == "2" && item.confirm_users.Select(i => i.user).Contains(Layout.User.id))
                            {
                              var confirm = item.confirm_users.Find(i => i.user == Layout.User.id);
                              <!--Trường hợp chưa xác nhận-->
                              @if (confirm.status == 1)
                              {
                                <span class="button is-success is-clickable" @onclick="() => Confirm(item, 2)">
                                  <span class="icon">
                                    <span class="material-icons-outlined is-size-6">check</span>
                                  </span>
                                  <span>Phê duyệt</span>
                                </span>

                                <br>

                                <span class="button is-clickable" @onclick="() => Confirm(item, 3)" style="border: none !important;">
                                  <span class="icon">
                                    <span class="material-icons-outlined is-size-6 has-text-danger">cancel</span>
                                  </span>
                                  <span class="has-text-danger">Từ chối</span>
                                </span>
                              }
                              else
                              {
                                // đã xác nhận
                                if (confirm.status == 2)
                                {
                                  <span class="button" style="border: none !important;">
                                    <span class="icon">
                                      <span class="material-icons-outlined is-size-6 has-text-success">check</span>
                                    </span>
                                    <span class="has-text-success">Đã phê duyệt</span>
                                  </span>
                                }

                                // đã từ chối
                                if (confirm.status == 3)
                                {
                                  <span class="button" style="border: none !important;">
                                    <span class="icon">
                                      <span class="material-icons-outlined is-size-6 has-text-danger">cancel</span>
                                    </span>
                                    <span class="has-text-danger">Đã từ chối</span>
                                  </span>
                                }
                              }
                            }
                          </td>
                        }
                      </tr>
                    }

                  </tbody>
                </table>
              </div>
            }
            else
            {
              foreach (var item in selectModelList)
              {
                <ul class="columns is-vcentered is-multiline is-variable is-2 is-mobile">
                  <li class="column is-full">
                    <div class="td-value is-flex is-justify-content-space-between is-align-items-center td-heading">
                      <p class="is-size-7 has-text-weight-semibold text_1_line" style="width: 50%" @onclick="() => GetDetail(item, false)">
                        @($"{item.form.name}")
                      </p>

                      <div>
                        @if (tab == "1" || Shared.IsEmpty(tab))
                        {
                          if (item.confirm_users.All(i => i.status == 1))
                          {
                            <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center"
                            @onclick="() => {confirmCancel = true; formIdSelect = item.id;}">
                              <span class="icon">
                                <span class="material-icons-outlined is-size-6">history</span>
                              </span>
                              <span>Thu hồi</span>
                            </span>
                          }
                          else
                          {
                            <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center" style="opacity: 0.2;">
                              <span class="icon">
                                <span class="material-icons-outlined is-size-6">history</span>
                              </span>
                              <span>Thu hồi</span>
                            </span>
                          }
                        }

                        @if (tab == "2" && item.confirm_users.Select(i => i.user).Contains(Layout.User.id))
                        {
                          var confirm = item.confirm_users.Find(i => i.user == Layout.User.id);
                          <!--Trường hợp chưa xác nhận-->
                          @if (confirm.status == 1)
                          {
                            <span class="is-flex is-align-items-center has-text-success mb-1 is-clickable px-4 is-justify-content-center"
                            @onclick="() => Confirm(item, 2)" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                              <span class="icon">
                                <span class="material-icons-outlined is-size-6">check</span>
                              </span>
                              <span style="white-space: nowrap;">Phê duyệt</span>
                            </span>

                            <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center"
                            @onclick="() => Confirm(item, 3)" style="border: none !important;" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                              <span class="icon">
                                <span class="material-icons-outlined is-size-6">cancel</span>
                              </span>
                              <span class="has-text-danger" style="white-space: nowrap;">Từ chối</span>
                            </span>
                          }
                          else
                          {
                            // đã xác nhận
                            if (confirm.status == 2)
                            {
                              <span class="is-flex is-align-items-center has-text-success mb-1 is-clickable px-4 is-justify-content-center">
                                <span class="icon">
                                  <span class="material-icons-outlined is-size-6">check</span>
                                </span>
                                <span class="has-text-success" style="white-space: nowrap;">Đã phê duyệt</span>
                              </span>
                            }

                            // đã từ chối
                            if (confirm.status == 3)
                            {
                              <span class="is-flex is-align-items-center has-text-danger is-clickable px-4 is-justify-content-center">
                                <span class="icon">
                                  <span class="material-icons-outlined is-size-6 has-text-danger">cancel</span>
                                </span>
                                <span style="white-space: nowrap;" class="has-text-danger">Đã từ chối</span>
                              </span>
                            }
                          }
                        }
                      </div>
                    </div>
                  </li>


                  @if (tab == "2" || (tab == "3" && (checkAdmin || checkLead)))
                  {
                    <li class="column is-full">
                      <div class="user_item">
                        <img class="image is-24x24 mr-2" src="@users.Find(i => i.id == item.user)?.avatar" alt="IMG">
                        <span class="text_1_line">
                          @users.Find(i => i.id == item.user).FullName
                        </span>
                      </div>
                    </li>
                  }


                  <li class="column is-full is-flex is-align-items-center">
                    <span style="width: 127px; flex-shrink: 0;" class="is-size-7 has-text-weight-semibold">
                      Ngày tạo:
                    </span>
                    <span class="is-size-7">
                      @($"{new DateTime(item.created):dd'/'MM'/'yyyy HH:mm}")
                    </span>
                  </li>

                  <li class="column is-full is-flex is-align-items-center">
                    <span style="width: 127px; white-space: nowrap; flex-shrink: 0;" class="is-size-7 has-text-weight-semibold">
                      Thời gian áp dụng:
                    </span>

                    @if (item.work_date_shifts.Any())
                    {
                      <div class="is-flex is-flex-wrap-wrap" style="gap: 5px;">
                        @foreach (var workDate in item.work_date_shifts)
                        {
                          <div class="is-flex is-align-items-center has-text-centered">
                            <span>
                              <span class="is-size-7">
                                @(new DateTime(workDate.start).ToString("dd'/'MM'/'yy"))
                              </span>
                              <span class="is-size-7">
                                @(new DateTime(workDate.start).ToString("HH:mm"))
                              </span>
                            </span>

                            <span class="is-size-7 material-icons mx-1">
                              arrow_right_alt
                            </span>

                            <span>
                              <span class="is-size-7">
                                @(new DateTime(workDate.end).ToString("dd'/'MM'/'yy"))
                              </span>
                              <span class="is-size-7">
                                @(new DateTime(workDate.end).ToString("HH:mm"))
                              </span>
                            </span>
                          </div>
                        }
                      </div>
                    }
                  </li>

                  <li class="column is-full is-flex is-align-items-center is-word-break">
                    <span style="width: 127px; flex-shrink: 0; white-space: nowrap; flex-shrink: 0;" class="is-size-7 has-text-weight-semibold">
                      Lý do:
                    </span>

                    @if (!string.IsNullOrEmpty(item.reason))
                    {
                      <div class="td-value is-word-break is-size-7" style="word-break: break-word;">
                        <div class="text_2_line" onclick="toggleText(this)"
                        @onclick:stopPropagation="true" @onclick:preventDefault="true">
                          @((MarkupString)Shared.GetLinks(item.reason))
                        </div>
                      </div>
                    }
                    else
                    {
                      <span class="is-size-7">
                        -
                      </span>
                    }
                  </li>

                  <li class="column is-full is-flex is-align-items-center">
                    <span style="width: 127px; white-space: nowrap; flex-shrink: 0;" class="is-size-7 has-text-weight-semibold">
                      Tiến trình:
                    </span>

                    @{
                      var checkCancel = false;
                    }

                    <div class="is-flex is-align-items-center is-flex-wrap-wrap" style="gap: 10px;">
                      @foreach (var confirmItem in item.confirm_users.OrderBy(i => i.pos).ToList())
                      {
                        var user = users.Find(i => i.id == confirmItem.user);
                        var confirm = new StaticModel();

                        if (user != null)
                        {

                          if (checkCancel)
                          {
                            confirm = DbHrmForm.GetConfirmStatusDetail(4);
                          }
                          else
                          {
                            confirm = DbHrmForm.GetConfirmStatusDetail(confirmItem.status);
                          }

                          if (confirmItem.status == 3)
                          {
                            checkCancel = true;
                          }

                          <div class="is-flex is-align-items-center" title="@confirm.name"
                               style="opacity: @(confirmItem.status == 1 || confirmItem.status == 4 ? "0.2" : "1");">
                            <div class="user_item" title="@user.FullName">
                              <img class="image is-24x24 mr-2" src="@user.avatar" alt="IMG">
                              <div style="flex-shrink: 0; width: calc(100vw - 272px);">
                                <span class="text_1_line is-size-7">
                                  @user.FullName
                                </span>

                                @if (confirmItem.date > 0)
                                {
                                  <span class="is-size-7 has-text-black has-text-weight-medium">@(new DateTime(confirmItem.date).ToString("HH':'mm dd'/'MM'/'yyyy"))</span>
                                }

                                <span></span>
                              </div>
                            </div>


                            <span class="material-icons-outlined is-size-7 ml-1 @confirm.color">
                              @confirm.icon
                            </span>
                          </div>
                        }
                      }
                    </div>
                  </li>

                  <li class="column is-full is-flex is-align-items-center">
                    <span style="width: 127px; flex-shrink: 0;" class="is-size-7 has-text-weight-semibold">
                      Bình luận @(item.comment == 0 ? "" : $"({item.comment})"):
                    </span>
                    <span class="is-size-7 has-text-link" @onclick="() => GetDetail(item)">
                      Nhập bình luận
                    </span>
                  </li>
                </ul>
              }
            }
          }
          else
          {
            <div class="has-text-weight-medium is-size-6 mt-5 is-flex is-justify-content-center">
              Không tìm thấy dữ liệu phù hợp!
            </div>
          }
        }
        else
        {
          @if (tab == "1" || (tab == "3" && (checkAdmin || checkLead)) || Shared.IsEmpty(tab))
          {
            <div class="has-text-weight-medium is-size-6 mt-5 is-flex is-justify-content-center">
              Không có đơn từ!
            </div>
          }

          @if (tab == "2")
          {
            <div class="has-text-weight-medium is-size-6 mt-5 is-flex is-justify-content-center">
              Không có đơn từ cần phê duyệt!
            </div>
          }
        }
      </div>
    </div>
  </section>

  @if (showPopup)
  {
    <FormPopup dataList="dataList" OnUpdate="OnUpdate" />
  }

  <!-- Xác nhận thu hồi  -->
  @if (confirmCancel)
  {
    <CancelFormPopup formIdSelect="@formIdSelect" OnUpdate="ConfirmCancel" />
  }

  <!-- Xác nhận phê duyệt bảng công bị xoá  -->
  @if (lockConfirmShow)
  {
    <LockFormPopup dateLock="dateLock" OnUpdate="ConfirmLock" />
  }


  <!--Popup chi tiết đơn từ-->
  @if (detailPopup)
  {
    <FormDetailPopup commentTab="commentTab" workShiftList="workShiftList" timeList="timeList"
                     dayOffs="dayOffs" form="detailForm" users="users" OnUpdate="(e) => UpdateDetail(e)" />
  }
}

@code {
  [Parameter]
  public bool isMobile { get; set; }
  [Parameter]
  public string tab { get; set; }
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private long startDate;
  private long endDate;
  private List<UserModel> users = new();
  private List<HrmFormModel> dataList = new();
  private List<HrmFormModel> modelList = new();
  private List<HrmFormModel> selectModelList = new();
  private List<HrmWorkShiftModel> workShiftList = new();
  private List<HrmRulesModel.Form> dataFormList = new();
  private List<HrmTimeListModel> timeList = new();
  private List<HrmDayOffModel> dayOffs = new();
  private List<DepartmentModel> departments = new();
  private List<DepartmentModel> departmentUsers = new();
  private List<string> usersIdView = new();
  private List<HrmFormModel> dataLeadList = new();
  private List<HrmFormModel> dataAdminList = new();
  private List<long> dateLock = new();
  private List<string> images = new();
  private HrmFormModel formUpdate;

  private string _title = "Đơn từ";
  private bool checkAdmin;
  private bool checkLead;
  private string msgAccess = string.Empty;
  private string selectStatus = "";
  private string selectForm = "";
  private string filterKeyword = "";
  private bool showPopup;
  private string selectDepart = "";
  private bool confirmCancel;
  private bool lockConfirmShow;
  private bool lockConfirm;
  private string formIdSelect = "";
  private int statusUpdate;
  private bool imageShow;
  private bool detailPopup;
  private bool commentTab;
  private bool checkDate = true;
  private HrmFormModel detailForm;
  private bool checkParam;

  private SharedStorage shareStorage = new();

  private DotNetObjectReference<Form> obj;

  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "timekeeping", out msgAccess);
  }

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    obj = DotNetObjectReference.Create(this);

    // Quyền truy cập trang
    checkAdmin = Layout.User.role == 1 || (Layout.User.role == 2 && Layout.User.role_manage.timekeeping);
    departmentUsers = await DbDepartment.GetListByUser(Layout.Company.id, Layout.User.id);
    checkLead = departmentUsers.Any();

    Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
    startDate = start.Ticks;
    endDate = (end + new TimeSpan(23, 59, 59)).Ticks;

    departments = await DbDepartment.GetAll(Layout.Company.id);
    var rules = await DbHrmRules.Get(Layout.Company.id, Layout.Company.id);

    if (rules != null)
      dataFormList = rules.forms;

    workShiftList = await DbHrmWorkShift.GetListWithoutDelete(Layout.Company.id);
    dayOffs = await DbHrmDayOff.GetAllWithoutDelete(Layout.Company.id);

    users = await DbUser.GetAllWithinDelete(Layout.Company.id);

  }

  protected override async Task OnParametersSetAsync()
  {
    tab = tab ?? "1";

    if (!Shared.IsEmpty(tab))
    {
      var allowTab = new List<string> { "1", "2", "3" };
      if (!allowTab.Contains(tab))
        tab = "1";
    }

    if (tab == "1" || tab == "3" || Shared.IsEmpty(tab))
    {
      selectStatus = "";

      // chế độ mobile
      if (Layout.IsMobile && !isMobile)
      {
        var formId = "";
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("form", out var outForm))
        {
          formId = outForm.ToString();
          navigation.NavigateTo($"hrm/timekeeping?tab=3&form_tab=1&form_id={formId}&comment_tab=2", false);
          return;
        }
      }

      if (isMobile)
      {
        var formId = "";
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("form_id", out var outForm))
          formId = outForm.ToString();
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("comment_tab", out var outTab))
          commentTab = true;

        if (!string.IsNullOrEmpty(formId))
        {
          detailForm = null;
          await GetInit();
          detailForm = dataList.Find(i => i.id == formId);
          if (detailForm != null)
            detailPopup = true;
        }
      }
    }
    else if (tab == "2")
    {
      if (Layout.IsMobile && !isMobile)
      {
        navigation.NavigateTo($"hrm/timekeeping?tab=3&form_tab=2", false);
        return;
      }

      selectStatus = "1";
    }

    if (tab == "3")
    {
      if (!checkAdmin && !checkLead)
        tab = "1";
    }

    await GetInit();

    if (!isMobile)
    {
      ChangeNavigation();
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (modelList.Any() && selectModelList.Any())
      await JSRuntime.InvokeVoidAsync("dragScrollX");

    if (detailPopup)
      await JSRuntime.InvokeVoidAsync("ToggleOverflowHtml", true);
    else
      await JSRuntime.InvokeVoidAsync("ToggleOverflowHtml", false);

    if (firstRender)
      await JSRuntime.InvokeVoidAsync("window.SetDotNetReference", obj, "Create");
  }

  private void ChangeTab(int item)
  {
    tab = item.ToString();

    if (tab == "1" || tab == "3" || Shared.IsEmpty(tab))
    {
      selectStatus = "";
    }
    else if (tab == "2")
    {
      selectStatus = "1";
    }

    checkDate = true;
    filterKeyword = "";
    selectForm = "";
    Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
    startDate = start.Ticks;
    endDate = (end + new TimeSpan(23, 59, 59)).Ticks;
    if (!isMobile)
    {
      navigation.NavigateTo($"/hrm/form/{tab}", false);
    }
    else
    {
      navigation.NavigateTo($"/hrm/timekeeping?tab=3&form_tab={tab}", false);
    }
    GetData();
  }

  private void ChangeTimeDatepicker()
  {
    GetData();
  }

  [JSInvokable]
  public void Create()
  {
    if (tab == "1" || Shared.IsEmpty(tab))
    {
      showPopup = true;
      StateHasChanged();
    }
  }

  /// <summary>Lọc trạng thái </summary>
  private void ChangeStatus(ChangeEventArgs e)
  {
    selectStatus = e.Value.ToString();
    GetData();
  }

  /// <summary>Lọc đơn từ </summary>
  private void ChangeForm(ChangeEventArgs e)
  {
    selectForm = e.Value.ToString();
    GetData();
  }

  /// <summary>Tìm kiếm</summary>
  private void Search()
  {
    GetData();
  }

  /// <summary>Đổi phòng ban</summary>
  private void ChangeDepartment(ChangeEventArgs e)
  {
    selectDepart = e.Value.ToString();
    Filter();
  }

  /// <summary>Lọc kết quả tìm kiếm và lọc theo trạng thái theo ngày</summary>
  private void Filter()
  {
    if (tab == "1" || tab == "3" || Shared.IsEmpty(tab))
    {
      // 1: Chờ xác nhận, 2: Đã xác nhận, 3: Đã từ chối
      // lọc theo trạng thái trang đơn từ của tôi
      if (selectStatus == "3")
        selectModelList = modelList.Where(i => i.confirm_users.Any(i => i.status == 3)).ToList();
      else if (selectStatus == "2")
        selectModelList = modelList.Where(i => i.confirm_users.All(i => i.status == 2)).ToList();
      else if (selectStatus == "1")
        selectModelList = modelList.Where(i => i.confirm_users.Any(i => i.status == 1) && !i.confirm_users.Any(i => i.status == 3)).ToList();
      else
        selectModelList = modelList.Where(i => true).ToList();
    }

    if (tab == "2")
    {
      if (selectStatus == "3")
        selectModelList = modelList.Where(i => i.confirm_users.Find(i => i.user == Layout.User.id).status == 3).ToList();
      else if (selectStatus == "2")
        selectModelList = modelList.Where(i => i.confirm_users.Find(i => i.user == Layout.User.id).status == 2).ToList();
      else if (selectStatus == "1")
        selectModelList = modelList.Where(i => i.confirm_users.Find(i => i.user == Layout.User.id).status == 1).ToList();
      else
        selectModelList = modelList.Where(i => true).ToList();
    }

    if (tab == "2" || tab == "3")
    {
      // lọc theo user và phòng ban
      var userIdList = selectModelList.Select(i => i.user).ToList();
      var userList = shareStorage.MemberList.Where(i => userIdList.Contains(i.id)).ToList();

      userList = userList.Where(x =>
      {
        return (string.IsNullOrEmpty(selectDepart) ? true : x.departments_id.Contains(selectDepart)) &&
                (string.IsNullOrEmpty(filterKeyword) ? true : Shared.SearchKeyword(filterKeyword, x.name));
      }).ToList();

      // lọc tìm kiếm
      selectModelList = selectModelList.Where(x => userList.Select(i => i.id).Contains(x.user)).ToList();
    }

    // lọc theo đơn từ
    selectModelList = selectModelList.Where(x =>
    {
      return string.IsNullOrEmpty(selectForm) ? true : x.form.id == selectForm;
    }).ToList();

    // lọc theo thời gian
    selectModelList = selectModelList.Where(x => x.created >= startDate && x.created <= endDate).ToList();

    StateHasChanged();
  }

  /// <summary>Thay đổi danh sách xem theo từng chế độ</summary>
  private void GetData()
  {
    modelList = dataList.Where(x => (x.user == Layout.User.id
                                     || x.confirm_users.Find(i => i.user == Layout.User.id) != null && x.confirm_users.Find(i => i.user == Layout.User.id).pos == x.confirm_users.Min(i => i.pos))
                                     || (x.confirm_users.Find(i => i.user == Layout.User.id) != null
                                        && x.confirm_users.Find(i => i.user == Layout.User.id).pos > x.confirm_users.Min(i => i.pos)
                                          && x.confirm_users.Find(i => i.pos == x.confirm_users.Find(i => i.user == Layout.User.id).pos - 1).status == 2))
                        .ToList();
    if (tab == "1" || Shared.IsEmpty(tab))
      modelList = modelList.Where(i => i.user == Layout.User.id).ToList();
    if (tab == "2")
      modelList = modelList.Where(i => i.confirm_users.Select(i => i.user).Contains(Layout.User.id)).ToList();
    if (tab == "3")
      modelList = dataList.Where(i => true).ToList();

    Filter();
  }

  /// <summary>Phê duyệt đơn từ</summary>
  private async Task Confirm(HrmFormModel item, int status)
  {
    HrmFormModel form = Shared.Clone(item);
    formUpdate = Shared.Clone(item);
    statusUpdate = status;

    // kiểm tra đơn từ còn tồn tại không
    var check = DbHrmForm.Get(Layout.Company.id, form.id);
    if (check != null)
    {
      var confirmList = form.confirm_users.Where(i => true).ToList();
      var old = confirmList.Find(i => i.user == Layout.User.id);
      confirmList.RemoveAll(i => i.user == Layout.User.id);
      confirmList.Add(new()
        {
          user = old.user,
          pos = old.pos,
          status = status,
          date = DateTime.Now.Ticks
        });
      form.confirm_users = confirmList;

      // cập nhật bên bảng công
      if (form.confirm_users.All(i => i.status == 2))
      {
        var confirmItem = await HrmService.UpdateFormTimeSheetUser(Layout.Company.id, form, timeList, workShiftList, dayOffs, false);
        form = confirmItem.Item1;
        dateLock = confirmItem.Item2;
      }

      if (dateLock.Any())
        lockConfirmShow = true;

      if (!lockConfirmShow || lockConfirm)
      {
        // cập nhật bên bảng công
        if (form.confirm_users.All(i => i.status == 2))
        {
          var confirmItem = await HrmService.UpdateFormTimeSheetUser(Layout.Company.id, form, timeList, workShiftList, dayOffs, true);
          form = confirmItem.Item1;
        }

        await DbHrmForm.Update(Layout.Company.id, form);

        if (status == 2)
          await JSRuntime.InvokeVoidAsync("tagline", true, "Phê duyệt đơn từ thành công!");
        else if (status == 3)
          await JSRuntime.InvokeVoidAsync("tagline", true, "Từ chối đơn từ thành công!");

        dataList = await DbHrmForm.GetListByUser(Layout.Company.id, Layout.User.id);
        GetData();

        if (dateLock.Any())
        {
          SendMail(815, form.user, status, form);
          await SendNotify(815, form.user, status);
        }
        else
        {
          await SendNotify(814, form.user, status);
          SendMail(814, form.user, status, form);
        }

        // thông báo chuông cho người tiếp theo
        if (status == 2 && form.confirm_users.Find(i => i.user == Layout.User.id).pos != form.confirm_users.Max(i => i.pos))
        {
          var receiver = form.confirm_users.Find(i => i.pos == (form.confirm_users.Find(i => i.user == Layout.User.id).pos + 1));
          if (receiver != null)
          {
            form.users_comment.Add(receiver.user);

            await SendNotify(813, form, receiver.user);
            SendMail(813, form, receiver.user);
          }
        }
      }
    }
    else
    {
      dataList = await DbHrmForm.GetListByUser(Layout.Company.id, Layout.User.id);
      GetData();
      await JSRuntime.InvokeVoidAsync("tagline", false, "Đơn từ đã bị thu hồi!");
    }
  }

  private async Task OnUpdate()
  {
    showPopup = false;
    await GetInit();

    var userSelect = dataList.Select(i => i.user).Distinct().ToList();

    // lấy dữ liệu phân ca
    if (dataList.Any())
    {
      var min = dataList.SelectMany(i => i.work_date_shifts).Min(i => i.start);
      var max = dataList.SelectMany(i => i.work_date_shifts).Max(i => i.end);
      timeList = await DbHrmTimeList.GetByRangeAndUsers(Layout.Company.id, userSelect, min, max);
    }
  }

  private async Task ConfirmCancel(bool confirm)
  {
    if (confirm)
    {
      dataList = await DbHrmForm.GetListByUser(Layout.Company.id, Layout.User.id);
      GetData();
    }
    else
    {
      formIdSelect = "";
    }

    confirmCancel = false;
  }

  private async Task ConfirmLock(bool confirm)
  {
    lockConfirm = confirm;

    if (confirm)
      await Confirm(formUpdate, statusUpdate);

    lockConfirmShow = false;
  }

  private void ChangeDate(ChangeEventArgs e)
  {
    checkDate = false;
    var type = Convert.ToInt32(e.Value);
    Shared.GetTimeSpan(type, out DateTime start, out DateTime end);
    startDate = start.Ticks;
    endDate = (end + new TimeSpan(23, 59, 59)).Ticks;
    GetData();
  }

  private void GetDetail(HrmFormModel item, bool comment = true)
  {
    detailForm = Shared.Clone(item);
    detailPopup = true;
    if (Layout.IsMobile && comment)
      commentTab = true;
    else
      commentTab = false;
  }

  private async Task UpdateDetail(bool checkUpdate)
  {
    if (checkUpdate)
    {
      dataList = await DbHrmForm.GetListByUser(Layout.Company.id, Layout.User.id);
      GetData();
    }

    detailForm = null;
    detailPopup = false;
    commentTab = false;
  }

  private async Task SendNotify(int notifyType, string userId, int status)
  {
    var formStatus = DbHrmForm.GetConfirmStatusDetail(status);

    if (formStatus == null)
      return;

    // Gủi thông báo chuông
    await DbNotify.Create(Layout.Company.id, notifyType, formStatus.name.ToLower(), userId, Layout.User.id);
  }

  private void SendMail(int notifyType, string userId, int status, HrmFormModel form)
  {
    var creator = shareStorage.MemberList.Find(i => i.id == Layout.User.id);
    var receiverUser = shareStorage.MemberList.Find(i => i.id == userId);
    var formAuthor = shareStorage.MemberList.Find(i => i.id == form.user);
    if (creator != null && receiverUser != null)
    {
      string message = string.Empty;
      string title = string.Empty;

      var range = form.work_date_shifts.FirstOrDefault();
      var start = new DateTime(range.start);
      var end = new DateTime(range.end);
      var date = "";
      if (start.Date.Ticks == end.Date.Ticks)
        date = $"Ngày {start.ToString("dd'/'MM'/'yyyy")} (từ {start.ToString("HH'h'mm")} đến {end.ToString("HH'h'mm")})";
      else
        date = $"Ngày {start.ToString("dd'/'MM'/'yyyy '-' HH'h'mm")} đến Ngày {end.ToString("dd'/'MM'/'yyyy '-' HH'h'mm")}";

      // Gửi mail
      if (notifyType == 814)
      {
        title = $"{creator.name} đã {DbHrmForm.GetConfirmStatusDetail(status).name} đơn từ {form.form.name} của bạn {date}";
      }
      else if (notifyType == 815)
      {
        title = $"{creator.name} đã {DbHrmForm.GetConfirmStatusDetail(status).name} đơn từ {form.form.name} của bạn {date} nhưng có khoảng thời gian bị khoá bảng công";
      }

      new Task(() =>
      {
        EmailService.FormMail(Layout.Company, receiverUser.email, title, form, date, shareStorage.MemberList, $"{navigation.BaseUri}hrm/form/1", out message);
      }).Start();
    }
  }

  private void ChangeNavigation()
  {
    var formId = string.Empty;
    commentTab = false;
    detailPopup = false;
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("form", out var outForm))
      formId = outForm.ToString();
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tab", out var outTab))
      commentTab = true;

    if (!string.IsNullOrEmpty(formId))
    {
      detailForm = null;
      detailForm = dataList.Find(i => i.id == formId);
      if (detailForm != null)
        detailPopup = true;
    }
  }


  private async Task SendNotify(int notifyType, HrmFormModel item, string receiver)
  {
    // Gủi thông báo chuông
    await DbNotify.Create(Layout.Company.id, notifyType, item.form.name, receiver, item.user);
  }

  private void SendMail(int notifyType, HrmFormModel form, string receiver)
  {
    var creator = shareStorage.MemberList.Find(i => i.id == form.user);
    var receiverUser = shareStorage.MemberList.Find(i => i.id == receiver);

    if (creator != null && receiverUser != null)
    {
      string message = string.Empty;
      // Gửi mail

      var range = form.work_date_shifts.FirstOrDefault();
      var start = new DateTime(range.start);
      var end = new DateTime(range.end);

      var date = "";
      if (start.Date.Ticks == end.Date.Ticks)
        date = $"Ngày {start.ToString("dd'/'MM'/'yyyy")} (từ {start.ToString("HH'h'mm")} đến {end.ToString("HH'h'mm")})";
      else
        date = $"Ngày {start.ToString("dd'/'MM'/'yyyy '-' HH'h'mm")} đến Ngày {end.ToString("dd'/'MM'/'yyyy '-' HH'h'mm")}";

      var title = $"{creator.name} đã đăng ký đơn từ {form.form.name} {date}";

      new Task(() =>
      {
        EmailService.FormMail(Layout.Company, receiverUser.email, title, form, date, shareStorage.MemberList, $"{navigation.BaseUri}hrm/form/2", out message);
      }).Start();
    }
  }

  private async Task GetInit()
  {
    checkLead = false;

    if (checkAdmin)
      dataAdminList = await DbHrmForm.GetListAdmin(Layout.Company.id);
    else
    {
      // danh sách User của mình có cấp dưới
      if (departmentUsers.Count > 0)
      {
        foreach (var item in departmentUsers)
        {
          // TH: mình là trường phòng
          if (item.manager == Layout.User.id)
          {
            usersIdView.AddRange(item.members_list.Where(i => i.id != Layout.User.id).Select(i => i.id).ToList());
          }

          // TH: mình là phó phòng
          if (item.members_list.Find(i => i.id == Layout.User.id && i.role == 2) != null)
          {
            usersIdView.AddRange(item.members_list.Where(i => i.role == 3).Select(i => i.id).ToList());
          }
        }

        usersIdView = usersIdView.Where(i => i != Layout.User.id).Distinct().ToList();

        dataLeadList = await DbHrmForm.GetListByUsers(Layout.Company.id, usersIdView, Layout.User.id);
      }
    }

    if (checkAdmin)
      dataList = dataAdminList.Where(i => true).ToList();
    else if (checkLead)
      dataList = dataLeadList.Where(i => true).ToList();
    else
      dataList = await DbHrmForm.GetListByUser(Layout.Company.id, Layout.User.id);

    var userSelect = dataList.Select(i => i.user).Distinct().ToList();

    // lấy dữ liệu phân ca
    if (dataList.Any())
    {
      var min = dataList.SelectMany(i => i.work_date_shifts).Min(i => i.start);
      var max = dataList.SelectMany(i => i.work_date_shifts).Max(i => i.end);
      timeList = await DbHrmTimeList.GetByRangeAndUsers(Layout.Company.id, userSelect, min, max);
    }
    GetData();
  }

  public void Dispose()
  {
    try 
    {
      obj?.Dispose();
    }
    catch(Exception ex)
    {
      return;
    }
  }
}
