
@page "/"
@page "/{id}"
@layout LayoutLogin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="login_form">
  <div class="logo">
    <img src="/images/logo.png" alt="logo" />
  </div>
  @if (_loaded)
  {
    if (user == null)
    {
      <h1 class="title is-size-2 is-size-5-mobile">
        Chào mừng đến với Fastdo
      </h1>
      <div class="font_14">
        Tối ưu vận hành với bộ giải pháp công nghệ của Fastdo
      </div>
      <form @onsubmit="SignIn">
        <div class="title is-size-5">
          Đăng nhập
        </div>
        <div class="control has-icons-left">
          <input @bind="username" type="email" class="input"
                 placeholder="Nhập email..." autocomplete="username" />
          <span class="icon is-left has-text-black">
            <i class="material-icons-round is-size-6">account_circle</i>
          </span>
        </div>
        <div class="control has-icons-left has-icons-right">
          <input @bind="password" type="@(showpass ? "text" : "password")" class="input"
                 placeholder="Nhập mật khẩu..." autocomplete="current-password" />
          <span class="icon is-left has-text-black">
            <i class="material-icons-round is-size-6">lock</i>
          </span>
          @if (password.Length > 0)
          {
            <a class="icon is-right has-text-black" @onclick="() => showpass = !showpass">
              <i class="material-icons-round is-size-6">visibility</i>
            </a>
          }
        </div>
        <div class="control">
          <label class="checkbox">
            <input type="checkbox" checked />
            <span class="is-size-7">Ghi nhớ mật khẩu</span>
          </label>
        </div>
        @if (!string.IsNullOrEmpty(message))
        {
          <div class="has-text-danger has-text-centered is-italic mb-3">@message</div>
        }
        @if (tracking != null && tracking.fail_count >= 10 && DateTime.Now.Ticks < tracking.expired)
        {
          <button class="button is-link is-fullwidth mb-3 @(loading ? "is-loading" : "")" disabled>
            <span class="is-size-7">Đăng nhập</span>
          </button>
        }
        else
        {
          <button class="button is-link is-fullwidth mb-3 @(loading ? "is-loading" : "")" @onclick="SignIn" @onclick:preventDefault>
            <span class="is-size-7">Đăng nhập</span>
          </button>
        }
        <a class="button is-white is-fullwidth" href="/password">
          <span class="is-size-7">Quên mật khẩu?</span>
        </a>
      </form>
      <div class="is-size-7">
        <span class="has-text-grey">
          Đăng ký người dùng mới?
        </span>
        <a class="has-text-link has-text-weight-bold" href="https://fastdo.vn/lien-he/">
          Liên hệ ngay
        </a>
      </div>
    }
    else
    {
      <h1 class="title is-size-2 is-size-5-mobile">
        Chào mừng! @user.FullName
      </h1>
      <form class="font_14 container-auth scrolly">
        <div class="has-text-weight-bold has-text-link mb-3">
          Chọn tổ chức đăng nhập
        </div>
        @if (user.companys != null && user.companys.Count > 0)
        {
          foreach (var item in companys)
          {
            <div class="icon-text mb-3">
              <span class="image is-32x32 mr-2">
                <img src="/images/favicon.png" alt="icon" />
              </span>
              <a class="has-text-black has-text-weight-medium is-size-7" @onclick="() => GoCompany(item.id)">
                @item.name
              </a>
            </div>
          }
        }
        else
        {
          <div class="icon-text mb-3">
            <span class="icon is-medium mr-2 has-text-grey">
              <i class="material-icons-round is-size-2">help_center</i>
            </span>
            <span class="has-text-black is-size-7">
              Không tìm thấy tổ chức của bạn
            </span>
          </div>
        }

        @if (user.is_customer)
        {
          <div class="has-text-weight-bold has-text-link mb-3">
            Đăng nhập trang quản lý
          </div>
          <div class="icon-text mb-3">
            <span class="image is-32x32 mr-2">
              <img src="/images/favicon.png" alt="icon" />
            </span>
            <a class="has-text-black has-text-weight-medium is-size-7" href="/client/home">
              Quản lý tổ chức
            </a>
          </div>
        }

        @if (user.is_admin)
        {
          <div class="has-text-weight-bold has-text-link mb-3">
            Đăng nhập chế độ Admin
          </div>
          <div class="icon-text">
            <span class="image is-32x32 mr-2">
              <img src="/images/icon/fCMS.png" alt="icon" />
            </span>
            <a class="has-text-black has-text-weight-medium is-size-7" href="/admin/home">
              Fastdo CMS
            </a>
          </div>
        }

        @if (!string.IsNullOrEmpty(message))
        {
          <div class="has-text-danger has-text-centered is-italic mt-3">@message</div>
        }
      </form>
      <a class="button is-danger is-outlined is-fullwidth" @onclick="Logout">
        <span class="icon">
          <i class="material-icons-outlined is-size-6">logout</i>
        </span>
        <span class="has-text-weight-medium">Đăng xuất</span>
      </a>
    }
  }
  else
  {
    <div class="pb-5">
      <span class="button is-white is-loading">
        <span>Loading</span>
      </span>
    </div>
  }
  <div class="copyright">
    Copyright © 2022 FASTDO
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutLogin Layout { get; set; }
  [Parameter]
  public string id { get; set; }

  private bool _loaded = false;
  private bool loading = false;
  private bool showpass = false;
  private string message = string.Empty;
  private string username = string.Empty;
  private string password = string.Empty;
  private UserModel user = null;
  private UserLoginModel tracking = null;
  private string circuilt;

  private List<CompanyModel> companys = new();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      try
      {
        if (Layout.consentCookie)
        {
          var cookieUser = await JSRuntime.InvokeAsync<string>("getCookie", "_user");
          if (!string.IsNullOrEmpty(cookieUser))
            user = await DbMainUser.GetbySession(cookieUser, globalService);

          if (user != null)
          {
            companys = await DbMainCompany.GetActiveCompany(user.companys);
            if (!id.IsEmpty())
              await GoCompany(id);
            else
            {
              if (!user.is_admin && !user.is_customer)
              {
                if (user.companys != null)
                {
                  if (user.companys.Count == 1)
                    await GoCompany(user.companys[0].id);
                }
              }
            }
          }
          else
          {
            await JSRuntime.InvokeVoidAsync("deleteCookie", "_user");
            await JSRuntime.InvokeVoidAsync("deleteCookie", "_cycle");
            await JSRuntime.InvokeVoidAsync("deleteCookie", "_company");
          }
          _loaded = true;
          StateHasChanged();
        }
      }
      catch (Exception ex)
      {
        await JSRuntime.InvokeAsync<string>("console.warn", "Login: " + ex.ToString());
      }
    }

  }

  private async Task SignIn()
  {
    if (loading)
      return;
    loading = true;
    try
    {
      if (string.IsNullOrEmpty(username))
      {
        message = "Tên đăng nhập không được để trống!";
        return;
      }
      if (string.IsNullOrEmpty(password))
      {
        message = "Mật khẩu không được để trống!";
        return;
      }

      user = await DbMainUser.Login(username, password, globalService);

      if(user == null)
      {
        var userEmail = await DbMainUser.GetbyEmail(username, globalService);
        if(userEmail != null)
        {
          tracking = await DbMainUserLogin.Get(userEmail.id);

          if (tracking != null)
          {
            if (tracking.fail_count >= 10)
            {
              if (DateTime.Now.Ticks < tracking.expired)
              {
                message = "Bạn đã đăng nhập sai quá 10 lần. Tài khoản sẽ bị vô hiệu hóa trong vòng 15 phút!";
                user = null;
                return;
              }
              else
              {
                tracking = await DbMainUserLogin.Release(tracking);
              }
            }
          }
        }
      }

      if (user != null && user.active)
      {
        await JSRuntime.InvokeVoidAsync("setCookie", "_user", user.id);
        companys = await DbMainCompany.GetActiveCompany(user.companys);
        message = string.Empty;

        // Cập nhật session login
        var sessionHash = Handled.Shared.CreateMD5(user.id + DateTime.Now.Year + DateTime.Now.Month);

        // Từ ngày 1/12/2023 đổi cách login
        var expireDate = new DateTime(2023, 12, 1,0,0,0);
        if(DateTime.Now.Ticks > expireDate.Ticks)
        {
          sessionHash = Handled.Shared.CreateMD5(user.id);
        }

        if(user.session != sessionHash)
        {
          user.session = sessionHash;
          user.last_login = DateTime.Today.Ticks;
          user = await DbMainUser.UpdateSession(user, globalService);
        }
        if (tracking == null)
        {
          tracking = new()
            {
              user_id = user.id,
              update = DateTime.Now.Ticks,
            };

          tracking = await DbMainUserLogin.Create(tracking);
        }
        else
          tracking = await DbMainUserLogin.Release(tracking);


        if (!user.is_admin && !user.is_customer)
        {
          // Nếu không phải là admin thì chuyển đến tổ chức đầu tiên
          if (user.companys != null && user.companys.Count == 1)
            await GoCompany(user.companys[0].id);
        }
      }
      else
      {
        if (user == null)
        {
          new Task(async () =>
          {
            if (tracking != null)
            {
              tracking.fail_count += 1;
              if (tracking.fail_count < 10)
              {
                var ip = "Temporarily down";
                var device = await JSRuntime.InvokeAsync<string>("getDeviceName");
                var deviceName = await JSRuntime.InvokeAsync<string>("getUA");
                var current = DateTime.Now;
                tracking.details.Add($"{current.ToString("dd/MM/yy HH:MM")}_{ip}_{device}_{deviceName}");
                tracking = await DbMainUserLogin.Update(tracking);
                message = $"Tên đăng nhập hoặc mật khẩu không đúng ! Thử lại: {15 - tracking.fail_count} lần";
              }
              else
              {
                tracking = await DbMainUserLogin.Block(tracking);
                message = "Bạn đã đăng nhập sai quá 10 lần. Tài khoản sẽ bị vô hiệu hóa trong vòng 15 phút!";
              }
            }
            else
            {
              var userByEmail = await DbMainUser.GetbyEmail(username, globalService);
              if (userByEmail != null)
              {
                tracking = new()
                  {
                    user_id = userByEmail.id,
                    fail_count = 1,
                    update = DateTime.Now.Ticks,
                  };
                var ip = "Temporarily down";
                var device = await JSRuntime.InvokeAsync<string>("getDeviceName");
                var deviceName = await JSRuntime.InvokeAsync<string>("getUA");
                var current = DateTime.Now;
                tracking.details.Add($"{current.ToString("dd/MM/yy HH:MM")}_{ip}_{device}_{deviceName}");
                tracking = await DbMainUserLogin.Create(tracking);
                message = "Tên đăng nhập hoặc mật khẩu không đúng !";
              }
              else
                message = "Tài khoản không tồn tại!";
            }
          }).Start();
        }
        else
          message = "Tài khoản này đã bị khóa!";
      }

    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "SignIn()", ex.ToString(), "Signin Loading...");
    }
    finally
    {
      loading = false;
    }
  }

  private async Task GoCompany(string companyId)
  {
    try
    {
      var company = await DbMainCompany.Get(companyId);
      if (company != null && !company.delete)
      {
        // Lấy thông tin công ty
        if (user.companys.Where(x => x.id == companyId).Count() > 1)
        {
          // Xóa công ty trùng
          user.companys.RemoveAll(x => x.id == companyId);
          // Thêm lại công ty
          user.companys.Add(new() { id = company.id, name = company.name });
          await DbMainUser.Update(user, globalService,false);
        }
        else
        {
          // Cập nhật lại tên tổ chức
          var item = user.companys.FirstOrDefault(x => x.id == companyId);
          if (item != null && item.name != company.name)
          {
            item.name = company.name;
            await DbMainUser.Update(user, globalService,false);
          }
        }

        // Truy cập vào tổ chức
        if (company.status)
        {
          var userInCompany = await DbUser.Get(company.id, user.id, globalService);
          if (userInCompany != null)
          {
            await JSRuntime.InvokeVoidAsync("setCookie", "_company", companyId);
            string link = string.IsNullOrEmpty(userInCompany.page_default) ? "/homepage" : userInCompany.page_default;
            if (Layout.consentCookie)
              navigation.NavigateTo(link, true);
            else
              navigation.NavigateTo(link, false);
          }
          else
            await JSRuntime.InvokeVoidAsync("tagline", true, $"Tài khoản của bạn đã bị xóa khỏi công ty {company.name}!");
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", true, $"Công ty {company.name} đã dừng hoạt động trên hệ thống!");
      }
      else
      {
        if(user.companys.Where(x => x.id == companyId).Count() > 0)
        {
          user.companys.RemoveAll(x => x.id == companyId);
          await DbMainUser.Update(user, globalService, false);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Công ty này không tồn tại trên hệ thống!");
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GoCompany()", ex.ToString(), "GetCompany loading...");
    }
  }

  private async Task Logout()
  {
    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn đăng xuất khỏi phần mềm ?"))
      return;

    navigation.NavigateTo("/logout", true);
  }
}