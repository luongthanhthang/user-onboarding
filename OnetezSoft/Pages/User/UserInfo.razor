@page "/user/info"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="columns is-centered p-4">
  <div class="column is-small">
    <div class="card p-5">
      <h1 class="title is-5 has-text-info is-uppercase">
        Thông tin tài khoản
      </h1>
      @if (user != null)
      {
        <div class="field">
          <label class="label">
            Hình đại diện:
            <a class="ml-3" onclick="document.getElementById('file_avatar').click()">
              Chọn hình
            </a>
          </label>
          <div class="image is-64x64 is-radius">
            <img src="@user.avatar" alt="IMG">
          </div>
          <div class="is-hidden">
            <FileUpload Path="avatar" Accept="image/*" Size="200" FileId="file_avatar" OnUpload="x => user.avatar = x[0]" />
          </div>
        </div>
        <div class="field">
          <label class="label">Địa chỉ email</label>
          <div class="control">
            <input value="@user.email" type="email" class="input" readonly />
          </div>
        </div>
        <div class="field">
          <label class="label">Nhập mật khẩu cũ</label>
          <div class="control has-icons-right">
            <input @bind="passwordOld" type="@(showPassOld ? "text" : "password")" class="input" placeholder="Nhập mật khẩu cũ nếu cần thay đổi" />
            @if (passwordOld.Length > 0)
            {
              <a class="icon is-right has-text-black" @onclick="() => showPassOld = !showPassOld">
                <i class="material-icons-round is-size-6">visibility</i>
              </a>
            }
          </div>
        </div>
        <div class="field">
          <label class="label">Nhập mật khẩu mới</label>
          <div class="control has-icons-right">
            <input @bind="passwordNew" type="@(showPassNew ? "text" : "password")" class="input" placeholder="Nhập mật khẩu mới nếu cần thay đổi" />
            @if (passwordNew.Length > 0)
            {
              <a class="icon is-right has-text-black" @onclick="() => showPassNew = !showPassNew">
                <i class="material-icons-round is-size-6">visibility</i>
              </a>
            }
          </div>
        </div>
        <div class="field">
          <label class="label">Họ và tên</label>
          <div class="field is-grouped">
            <div class="control is-expanded">
              <input @bind="user.last_name" type="text" class="input" />
            </div>
            <div class="control is-expanded">
              <input @bind="user.first_name" type="text" class="input" />
            </div>
          </div>
        </div>
        <div class="field mt-4">
          <label class="label">Phòng ban mặc định</label>
          <div class="control">
            <div class="select is-fullwidth">
              <select @bind="user.department_default" class="is-family-code">
                <option value="">Không chọn</option>
                @foreach (var sl in departments)
                {
                  <option value="@sl.id">@sl.name</option>
                }
              </select>
            </div>
          </div>
        </div>
        <div class="field mt-4">
          <label class="label">Trang mặc định khi vào phần mềm</label>
          <div class="control">
            <div class="select is-fullwidth">
              <select @bind="user.page_default">
                <option value="">Không chọn</option>
                @foreach (var sl in pageList)
                {
                  <option value="@sl.Key">@sl.Value</option>
                }
              </select>
            </div>
          </div>
        </div>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" onclick="goBack()">
              <span>Quay lại</span>
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      }
      else
      {
        <div class="py-6">Dữ liệu không tồn tại hoặc đã bị xóa !</div>
      }
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Thông tin tài khoản";
  private UserModel user = new() { companys = new() };
  private List<DepartmentModel.SelectList> departments = new();
  private Dictionary<string, string> pageList = new();
  private string passwordOld = string.Empty;
  private string passwordNew = string.Empty;
  private bool showPassOld = false;
  private bool showPassNew = false;

  protected override async Task OnInitializedAsync()
  {
    pageList = PageList();
    user = await DbUser.Get(Layout.Company.id, Layout.User.id, globalService);
    if (user != null)
      departments = await DbDepartment.GetSelectListOfUser(Layout.Company.id, user.departments_id, null);
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(user.id))
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Dữ liệu không tồn tại hoặc đã bị xóa !");
      }
      else
      {
        // Cật nhật database công ty
        await DbUser.Update(Layout.Company.id, user, globalService);

        if (!string.IsNullOrEmpty(passwordNew))
        {
          if (user.password == Handled.Shared.CreateMD5(passwordOld))
          {
            // Cập nhật cho tất cả database
            user.password = Handled.Shared.CreateMD5(passwordNew);
            await DbMainUser.Update(user, globalService);
            await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin thành công!");
          }
          else
            await JSRuntime.InvokeVoidAsync("tagline", false, "Mật khẩu cũ không chính xác!");
        }
        else
        {
          // Cập nhật cho tất cả database
          await DbMainUser.Update(user, globalService);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin thành công!");

        }
        passwordOld = string.Empty;
        passwordNew = string.Empty;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }


  private Dictionary<string, string> PageList()
  {
    var results = new Dictionary<string, string>();
    results.Add("/blogs", "Tin tức");
    results.Add("/reports", "Thống kê");
    results.Add("/teams", "Đội nhóm");
    if (CheckAccess("todolist"))
      results.Add("/todolist", "Todolist");
    if (CheckAccess("work"))
      results.Add("/work", "Kế hoạch");
    if (CheckAccess("okrs"))
      results.Add("/okr/overview", "OKRs");
    if (CheckAccess("okrs"))
      results.Add("/cfr", "Ghi nhận");
    if (CheckAccess("kaizen"))
      results.Add("/kaizen", "Kaizen");
    if (CheckAccess("train"))
      results.Add("/educate/course/list", "Đào tạo");
    if (CheckAccess("timekeeping"))
      results.Add("/hrm/timekeeping", "Chấm công");
    return results;
  }

  private bool CheckAccess(string productId)
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, productId, out string message);
  }
}