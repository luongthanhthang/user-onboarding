@inject GlobalService globalService
@inject NavigationManager navigation

<div class="inner_section p-4 h-full">
  <div class="field is-grouped mb-5">
    <div class="control is-expanded">
      <p class="has-text-weight-semibold font_14">
        Danh sách KPIs nhập liệu
      </p>
    </div>
    <div class="control">
      <Dropdown CloseOnClickMenu=true>
        <Trigger>
          <div class="field is-grouped is-fullwidth has-text-black font_12 is-clickable">
            <div class="control m-0">
              <span class="icon is-size-6">
                <i class="material-icons-outlined">sort</i>
              </span>
            </div>

            <span class="text_1_line m-0 control" style="height: unset;">
              @sortName
            </span>

            <div class="control">
              <span class="icon is-size-6">
                <i class="material-icons-outlined">arrow_drop_down</i>
              </span>
            </div>
          </div>
        </Trigger>
        <MenuContent>
          @foreach (var item in sortList)
          {
            <a class="dropdown-item" @onclick="() => ChangeSort(item.Key)">
              @item.Value
            </a>
          }
        </MenuContent>
      </Dropdown>
    </div>
  </div>

  @if (dataKpisSort.Any())
  {
    <ul class="columns is-mobile is-multiline is-vcentered scrolly">
      <li class="column is-7 font_12 has-text-weight-semibold has-text-info">
        Nhân viên/ KPIs nhập liệu
      </li>
      <li class="column is-5 has-text-right font_12 has-text-weight-semibold has-text-info">
        Tiến độ
      </li>
    </ul>


    <ul class="columns kpis-list-report is-mobile is-multiline is-vcentered scrolly">
      @foreach (var kpis in dataKpisSort)
      {
        var metric = kpis.metrics.FirstOrDefault();
        var user = UserService.GetMember(userList, kpis.user);
        if (metric != null)
        {
          var progress = KpisService.GetProgressCheckin(metric.value, metric.target);

          var color = Shared.ProgressColor(progress);

          <li class="column is-7">
            <div class="user_item">
              <img class="image is-24x24 mr-2" title="@user.name" src="@user.avatar" alt="IMG">
              <a class="text_1_line has-text-link is-clickable" target="_blank"
                 href="@($"/kpis/root/{kpis.root}?id={kpis.id}&tab_overview=2")">
                @kpis.name
              </a>
            </div>
          </li>

          <li class="column is-5 has-text-right">
            <div class="progress_has_value">
              <progress class="progress custom progress-kpis is-small @color" value="@Convert.ToInt32(progress)" max="100"></progress>
              <span>@Shared.FormatPercent(progress)%</span>
            </div>
          </li>
        }
      }
    </ul>
  }
  else
  {
    <div class="is-flex is-justify-content-center is-align-items-center" style="height: calc(100% - 48px);">
      <span>Không có dữ liệu !</span>
    </div>
  }
</div>

@code {
  [CascadingParameter]
  private LayoutMain Layout { get; set; }
  [Parameter]
  public List<KpisModel> dataKpisInput { get; set; } = new();

  private Dictionary<string, string> sortList = new();
  private List<KpisModel> dataKpisSort = new();
  private string sortName;
  private string sortBy;
  private List<MemberModel> userList = new();

  protected override async Task OnInitializedAsync()
  {
    sortList.Add("value_des", "Cao đến thấp");
    sortList.Add("value_asc", "Thấp đến cao");
    userList = await globalService.GetUserList(Layout.Company.id);
  }

  protected override void OnParametersSet()
  {
    sortName = "Cao đến thấp";
    sortBy = "value_des";
    GetListSort();
  }

  private void ChangeSort(string key)
  {
    if (sortList.ContainsKey(key))
    {
      sortName = sortList[key];
      sortBy = key;
      GetListSort();
    }
  }

  private void GetListSort()
  {
    dataKpisInput = dataKpisInput.Where(i => i.metrics.FirstOrDefault() != null).ToList();
    if (sortBy == "value_asc")
      dataKpisSort = dataKpisInput.OrderBy(i => KpisService.GetProgressCheckin(i.metrics.FirstOrDefault().value, i.metrics.FirstOrDefault().target)).ToList();
    else if (sortBy == "value_des")
      dataKpisSort = dataKpisInput.OrderByDescending(i => KpisService.GetProgressCheckin(i.metrics.FirstOrDefault().value, i.metrics.FirstOrDefault().target)).ToList();
  }
}
