@page "/kpis/person/{Id}"
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@inject GlobalService globalService

@if (model != null && kpisRoot != null)
{
  var progress = KpisService.GetProgress(database, model, kpisRoot.id);
  var color = Shared.ProgressColor(progress);
  var user = UserService.GetMember(userList, model.user);
  var metric = model.metrics.FirstOrDefault();
  var parent = database.FirstOrDefault(i => i.id == model.parent);
  var userParent = new MemberModel();
  if (parent != null)
    userParent = UserService.GetMember(userList, parent.user);

  progress = Math.Round(progress, 1);

  <div class="columns is-variable is-3 h-full my-0">
    <div class="column is-8 py-0">
      <div class="flex_column is-fullwidth h-full">
        <ul class="columns is-vcentered is-variable is-2 is-mobile mb-2">
          <li class="column">
            <a class="icon-text font_14 has-text-link is-clickable" href="/kpis/person">
              <span class="icon">
                <span class="material-icons-outlined">arrow_back</span>
              </span>
              <span>Trở về</span>
            </a>
          </li>

          <li class="column is-narrow has-text-right font_14 has-text-grey">
            @if (model.status_checkin == 1 && model.date_checkin > 0)
            {
              @($"Chờ phê duyệt vào {new DateTime(model.date_checkin).ToString("dd'/'MM'/'yyyy")}")
            }
            else if (model.status_checkin == 2 && model.date_confirm > 0)
            {
              @($"Đã check-in vào {new DateTime(model.date_confirm).ToString("dd'/'MM'/'yyyy")}")
            }
          </li>
        </ul>

        <ul class="columns is-vcentered is-variable is-2 mb-1">
          <li class="column is-half">
            <Dropdown CloseOnClickMenu=true DropdownStyle="max-width: 100%;" TriggerStyle="max-width: 100%;">
              <Trigger>
                <div class="columns is-vcentered is-variable is-1 is-mobile is-fullwidth is-clickable is-size-5 has-text-weight-bold has-text-link">
                  <div class="column is-11">
                    <span class="text_1_line">@model.name</span>
                  </div>

                  <div class="column is-1 has-text-right">
                    <span class="icon">
                      <i class="material-icons-outlined">arrow_drop_down</i>
                    </span>
                  </div>
                </div>
              </Trigger>
              <MenuContent>
                @foreach (var item in dataList)
                {
                  <a class="dropdown-item" @onclick="() => ChangeKpis(item)">
                    @item.name
                  </a>
                }
              </MenuContent>
            </Dropdown>
            @if (metric != null)
            {
              <p class="has-text-grey-dark is-size-6 text_1_line" title="@($"{metric.name}: {Shared.ConvertCurrencyDouble(Math.Round(metric.target, 3))} {metric.units}")">
                @($"{metric.name}: {Shared.ConvertCurrencyDouble(Math.Round(metric.target, 3))} {metric.units}")
              </p>
            }
          </li>
          <li class="column is-half">
            <div class="field is-grouped is-justify-content-end">
              @if (isCheckin)
              {
                <div class="control">
                  <a class="button has-text-danger" style="border: none; background: none" @onclick="CancelCheckin">
                    <span class="icon">
                      <span class="material-icons-outlined is-size-6">cancel</span>
                    </span>
                    <span>Huỷ</span>
                  </a>
                </div>

                <div class="control">
                  <a class="button is-link" @onclick="CreateCheckin">
                    <span class="icon">
                      <span class="material-icons-outlined is-size-6">check</span>
                    </span>
                    <span>Cập nhật</span>
                  </a>
                </div>
              }
              else
              {
                @if (_accessManager)
                {
                  <div class="control">
                    <a class="button has-text-danger" style="border: none; background: none" @onclick="ShowRemove">
                      <span class="icon">
                        <span class="material-icons-outlined is-size-6">delete</span>
                      </span>
                      <span>Xoá</span>
                    </a>
                  </div>
                }

                <div class="control">
                  <a class="button has-text-link" style="border: none; background: none" @onclick="EditItem">
                    <span class="icon">
                      <span class="material-icons-outlined is-size-6">edit</span>
                    </span>
                    <span>Chỉnh sửa</span>
                  </a>
                </div>

                @if (checkinCreate != null)
                {
                  <div class="control">
                    <span class="is-italic has-text-grey">Chờ phê duyệt</span>
                  </div>
                }
                else
                {
                  if (checkAutoCheckin)
                  {
                    <div class="control">
                      <a class="button is-link" @onclick="ShowCheckin">
                        <span class="icon">
                          <span class="material-icons-outlined is-size-6">add</span>
                        </span>
                        <span>Tự check-in</span>
                      </a>
                    </div>
                  }
                  else
                  {
                    <div class="control">
                      <a class="button is-link" @onclick="ShowCheckin">
                        <span class="icon">
                          <span class="material-icons-outlined is-size-6">add</span>
                        </span>
                        <span>Check-in</span>
                      </a>
                    </div>
                  }
                }
              }
            </div>
          </li>
        </ul>

        <div class="flex_column is-fullwidth h-full is-justify-content-space-between scrolly" style="flex: 1;">
          @if (isCheckin && checkinCreate != null)
          {
            <div class="main_content">
              <div class="flex_column is-fullwidth">
                <p class="is-size-5 has-text-weight-bold has-text-black">Check-in KPIs</p>
                <div class="inner_section mt-2" style="flex: 1;">
                  <ul class="columns is-variable is-2 is-mobile is-multiline">
                    <li class="column is-half">
                      <p class="font_14 has-text-grey mb-2">Cập nhật kết quả thay đổi</p>

                      <_InputUpDown metric="metric"
                                    checkinCreate="checkinCreate"
                                    IsDownParameter="metric != null && metric.target < 0"
                                    model="model"
                                    OnUpdate="ChangeValueFluctuate" />

                      <p class="is-italic has-text-grey font_12">Đối với những KPIs mang tính chất chi phí thì chọn dấu "-"</p>

                    </li>

                    <li class="column is-half">
                      <p class="font_14 has-text-grey mb-2">Tiến độ thực đạt</p>

                      @if (metric != null)
                      {
                        <span class="text_1_line has-text-left font_12" title="@($"{Shared.ConvertCurrencyDouble(totalValueCheckin)} {metric.units}")">
                          <span class="has-text-black has-text-weight-medium">@(Shared.ConvertCurrencyDouble(totalValueCheckin))</span>
                          <span class="has-text-black has-text-weight-medium">/</span>
                          <span class="has-text-black has-text-weight-medium mr-1">@Shared.ConvertCurrencyDouble(Math.Round(metric.target, 3))</span>
                          <span class="has-text-grey">@metric.units</span>
                        </span>
                      }
                      <div class="progress_has_value">
                        <progress class="progress @colorEdit" value="@Convert.ToInt32(progressEdit)"
                                  style="height: 5px; width: calc(100% - 45px);" max="100"></progress>
                        <span>@Shared.FormatPercent(progressEdit)%</span>
                      </div>
                    </li>

                    <li class="column is-full">
                      <p class="font_14 has-text-grey">Nhận xét (*)</p>
                      <textarea @bind="checkinCreate.comment" class="textarea is_bg mt-2" rows="2" placeholder="Nhập nhận xét..." />
                    </li>

                    <li class="column is-full">
                      <div class="field is-grouped">
                        <div class="control has-text-grey">
                          File đính kèm:
                        </div>
                        <div class="control is-expanded" style="width: calc(100% - 132px)">
                          <FileUpload Multiple="true" Small="true" Cloud="true" OnUpload="x => checkinCreate.files.AddRange(x)" />
                        </div>
                      </div>
                      <div>
                        <FileViews Delete="true" Values="checkinCreate.files" />
                      </div>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          }

          <div class="main_content @(isCheckin && checkinCreate != null ? "mt-4" : "")">
            <div class="flex_column is-fullwidth">
              <p class="is-size-5 has-text-weight-bold has-text-black">Thông tin chung</p>
              <div class="inner_section scrolly mt-2" style="flex: 1;">
                <ul class="columns is-variable is-2 is-mobile is-multiline">
                  <li class="column is-4">
                    <span class="font_14 has-text-grey">Thực đạt</span>
                    <div class="field is-grouped mt-2">
                      @if (metric != null)
                      {
                        <span class="text_1_line has-text-black has-text-weight-medium font_14">
                          @($"{Shared.ConvertCurrencyDouble(Math.Round(metric.value, 3))} {metric.units}")
                        </span>
                      }
                    </div>
                  </li>

                  <li class="column is-4">
                    <span class="has-text-grey font_14">Tiến độ thực đạt</span>
                    <div class="progress_has_value mt-2">
                      <progress style="width: calc(100% - 45px);" class="progress progress-kpis is-small @color" value="@Convert.ToInt32(progress)" max="100"></progress>
                      <span>@Shared.FormatPercent(progress)%</span>
                    </div>
                  </li>

                  <li class="column is-4">
                    <p class="has-text-grey mb-2 font_14">Thời hạn</p>
                    <span class="has-text-black font_14 has-text-weight-medium">
                      @($"{new DateTime(model.start_date).ToString("dd'/'MM")} - {new DateTime(model.end_date).ToString("dd'/'MM")}")
                    </span>
                    <span class="font_14 has-text-grey">
                      @($"({KpisService.CheckDate(model.end_date)})")
                    </span>
                  </li>

                  @if (kpisRoot != null)
                  {
                    <li class="column is-4">
                      <p class="has-text-grey font_14">Thuộc cây KPIs</p>
                      <span class="has-text-black font_14 mt-2 text_1_line has-text-weight-medium">
                        @(kpisRoot.name)
                      </span>
                    </li>
                  }

                  @if (userParent != null)
                  {
                    <li class="column is-4">
                      <div class="field is-grouped mb-2">
                        <div class="control mr-1">
                          <p class="font_14 has-text-grey" style="line-height: 0;">Người giám sát</p>
                        </div>

                        <div class="control">
                          <div class="dropdown is-hoverable">
                            <div class="dropdown-trigger">
                              <span class="icon has-text-info">
                                <i class="material-icons-outlined is-size-6">info</i>
                              </span>
                            </div>
                            <div class="dropdown-menu" style="width: 200px;">
                              <div class="dropdown-content">
                                <div class="dropdown-item">
                                  Người phê duyệt bản check-in
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="user_item mt-2">
                        <img class="image is-24x24 mr-2" src="@userParent.avatar" alt="IMG">
                        <span class="text_1_line has-text-black font_14 has-text-weight-medium">@userParent.name</span>
                      </div>
                    </li>
                  }

                  @if (parent != null)
                  {
                    <li class="column is-4">
                      <p class="has-text-grey font_14">Thuộc bảng KPIs</p>
                      <span class="has-text-black font_14 mt-2 text_1_line has-text-weight-medium">
                        @(parent.name)
                      </span>
                    </li>
                  }

                  <li class="column is-full">
                    <p class="has-text-grey font_14 mb-2">Kế hoạch</p>
                    @if (model.plan_list.Any())
                    {
                      <PlanLink dataPlanKpis="model.plan_list" />
                    }
                    else
                    {
                      <p class="is-italic font_12">
                        Chưa có link kế hoạch
                      </p>
                    }
                  </li>

                  <li class="column is-full">
                    <p class="mb-2 has-text-grey font_14">File đính kèm</p>
                    @if (model.files.Any())
                    {
                      <FileViews Delete="false" Values="model.files" />
                    }
                    else
                    {
                      <p class="is-italic font_12">Chưa có file đính kèm</p>
                    }
                  </li>
                </ul>
              </div>
            </div>
          </div>

          @if (model != null)
          {
            <div class="main_content mt-4">
              <div class="flex_column is-fullwidth">
                <p class="is-size-5 has-text-weight-bold has-text-black">Tiến độ thực đạt KPIs</p>
                <div class="inner_section mt-2" style="flex: 1;">
                  <_ChartCheckin kpis="model" @bind-CheckReload="checkReloadChart" />
                </div>
              </div>
            </div>
          }
        </div>
      </div>
    </div>

    <div class="column is-4 py-0 h-full main_content h-full">
      <div class="inner_section scrolly h-full @(tab == 2 ? "is-flex is-flex-direction-column" : "")">
        <ul class="columns is-vcentered mx-0 mt-0 mb-4 is-clickable has-text-link tree_kpis_slidebar">
          <li class="column is-half pt-0 has-text-centered view-tag @(tab == 1 ? "is-active" : "")" @onclick="() => ChangeTab(1)">
            Lịch sử check-in
          </li>
          <li class="column is-half pt-0 has-text-centered view-tag  @(tab == 2 ? "is-active" : "")" @onclick="() => ChangeTab(2)">
            Bình luận
          </li>
        </ul>
        @if (tab == 1)
        {
          <_HistoryCheckin model="model" kpisRoot="kpisRoot" dataCheckin="dataCheckin" cycle="cycle" database="database" />
        }
        else if (tab == 2)
        {
          <Comments modelId="@model.id"
                    nameModule="kpis"
                    isOnlyInComment="true"
                    membersSourceComment="userSourceComment"
                    GetUserComment="(e) => userComment = e.Where(i => true).ToList()"
                    UpdateCountComment="UpdateCountComment"
                    NotiListTag="SendNoti" />
        }
      </div>
    </div>
  </div>

  @if (isEdit)
  {
    <_KpisPopup model=model kpisRoot="kpisRoot" cycle="cycle" dataMetric="dataMetric" OnUpdate="OnUpdate" />
  }

  @if (model != null && isDelete && cycle != null)
  {
    <_DeleteKpisPopup model="model" kpisRoot="kpisRoot" cycle="cycle" database="database" OnRemove="OnRemove" />
  }
}
else
{
  <section class="p-4">
    <div class="has-text-grey has-text-centered py-6">
      Dữ liệu không tồn tại hoặc đã xóa
    </div>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "tab")]
  public int tab { get; set; } = 1;

  private List<KpisModel> dataList = new();
  private List<KpisModel> database = new();
  private List<KpisMetricModel> dataMetric = new();
  private List<KpisCheckinModel> dataCheckin = new();

  private KpisModel model;
  private KpisModel kpisRoot;
  private KpisCycleModel cycle;
  private bool isEdit;
  private bool isCheckin;
  private bool isDelete;
  private KpisCheckinModel checkinCreate;
  private bool checkAutoCheckin;
  private bool _accessManager;
  private List<MemberModel> userList = new();
  private bool checkReloadChart = true;
  private bool isLoadTag;
  private double totalValueCheckin = 0;
  private double progressEdit = 0;
  private string colorEdit = "";

  private List<MemberModel> userSourceComment = new();
  private List<string> userComment = new();

  protected override async Task OnInitializedAsync()
  {
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);

    userList = await globalService.GetUserList(Layout.Company.id);

    await GetData();

    dataMetric = await DbKpisMetric.GetList(Layout.Company.id);

    if (!Shared.IsEmpty(Layout.CycleKpisId))
      cycle = shareStorage.KpisCycles.Find(i => i.id == Layout.CycleKpisId);

    if (cycle != null)
      _accessManager = cycle.managers.Contains(Layout.User.id);

    CheckAutoCheckin();

    GetMemberComment();

    await GetDataCheckin();

    GetEditItem();
  }

  protected override void OnParametersSet()
  {
    var allowTab = new List<int> { 1, 2 };
    if (!allowTab.Contains(tab))
      tab = 1;
  }

  private async Task ChangeKpis(KpisModel item)
  {
    if (!isCheckin && !isEdit)
    {
      model = item;
      kpisRoot = database.FirstOrDefault(i => model.root == i.id);
      await GetDataCheckin();
      GetEditItem();
      CheckAutoCheckin();
      navigation.NavigateTo($"/kpis/person/{item.id}");
      checkReloadChart = true;
      StateHasChanged();
    }
  }

  private async Task ChangeTab(int item)
  {
    tab = item;
    if (tab == 2)
    {
      await JSRuntime.InvokeVoidAsync("setFocus", "component-comment");
      await JSRuntime.InvokeVoidAsync("textAutoSize", "component-comment");
    }

    StateHasChanged();
  }

  private void ChangeValueFluctuate(KpisCheckinModel itemUpdate)
  {
    checkinCreate = itemUpdate;
    if (model.metrics.FirstOrDefault() != null)
    {
      totalValueCheckin = model.metrics.FirstOrDefault().value + itemUpdate.value_fluctuate;
      progressEdit = KpisService.GetProgressCheckin(totalValueCheckin, model.metrics.FirstOrDefault().target);
    }

    totalValueCheckin = Math.Round(totalValueCheckin, 3);

    colorEdit = Shared.ProgressColor(progressEdit);
  }

  private void ResetValue()
  {
    totalValueCheckin = model.metrics.FirstOrDefault().value;
    progressEdit = KpisService.GetProgressCheckin(totalValueCheckin, model.metrics.FirstOrDefault().target);

    totalValueCheckin = Math.Round(totalValueCheckin, 3);

    colorEdit = Shared.ProgressColor(progressEdit);
  }

  #region bình luận
  private void GetMemberComment()
  {
    userSourceComment = KpisService.GetMemberComment(userList, database, model, kpisRoot, cycle);
  }

  private async Task UpdateCountComment(int count)
  {
    model.comment = count;
    await DbKpis.Update(Layout.Company.id, model);
    StateHasChanged();
  }

  private async Task SendNoti(List<string> userMentions)
  {
    await KpisService.SendNotifyComment(userMentions, userComment, database, model, kpisRoot, Layout.Company.id, Layout.User.id, cycle);
  }
  #endregion

  private void EditItem()
  {
    if (!isCheckin)
    {
      isEdit = true;
    }
  }

  private void ShowCheckin()
  {
    if (!isEdit)
    {
      isCheckin = true;
      checkinCreate = new();
      if (model != null && model.metrics.FirstOrDefault() != null)
        checkinCreate.value = Math.Round(model.metrics.FirstOrDefault().value, 3);

      ResetValue();
    }
  }

  private void CancelCheckin()
  {
    if (!isEdit)
    {
      isCheckin = false;
      checkinCreate = null;
      ResetValue();
    }
  }

  private async Task CreateCheckin()
  {
    if (!isEdit && model != null)
    {
      var result = await KpisService.UpdateCheckin(checkinCreate, model, kpisRoot, database, cycle, Layout.Company.id, Layout.User.id, checkAutoCheckin);
      if (result.Item1)
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, $"{result.Item2}");

        dataCheckin.Add(checkinCreate);
        dataCheckin = dataCheckin.OrderByDescending(i => i.date_create).ToList();

        // check phải tự checkin không
        if (checkAutoCheckin)
        {
          model.status_checkin = 2;
          model.date_confirm = DateTime.Now.Ticks;

          var kpisUpdate = Shared.Clone(model);

          if (model != null && model.metrics.FirstOrDefault() != null)
            kpisUpdate.metrics.FirstOrDefault().value = checkinCreate.value;

          await KpisService.SyncData(Layout.Company.id, database, Layout.CycleKpisId, kpisRoot, kpisUpdate);
        }

        GetEditItem();
        await GetData();
        isCheckin = false;
        checkReloadChart = true;
        StateHasChanged();
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, $"{result.Item2}");
    }
  }

  private void OnUpdate(KpisModel e)
  {
    if (e != null)
    {
      var index = dataList.FindIndex(i => i.id == e.id);
      if (index != -1)
      {
        dataList.RemoveAll(i => i.id == e.id);
        dataList.Insert(index, e);
      }
      else
        dataList.Add(e);

      model = e;
      kpisRoot = database.FirstOrDefault(i => model.root == i.id);
    }

    StateHasChanged();
    isEdit = false;
  }

  private void ShowRemove()
  {
    isDelete = true;
  }

  private void OnRemove(bool e)
  {
    if (e)
    {
      navigation.NavigateTo("/kpis/person");
    }

    isDelete = false;
  }

  private async Task GetData()
  {
    database = await DbKpis.GetListForCheckin(Layout.Company.id, Layout.CycleKpisId);

    dataList = database.Where(i => i.user == Layout.User.id && i.type == 1).ToList();

    if (!Shared.IsEmpty(Id) && dataList.Select(i => i.id).Contains(Id))
    {
      model = database.FirstOrDefault(i => i.id == Id);
      if (model != null)
        kpisRoot = database.FirstOrDefault(i => model.root == i.id);
    }
  }

  private async Task GetDataCheckin()
  {
    if (model != null)
    {
      dataCheckin = await DbKpisCheckin.GetList(Layout.Company.id, model.cycle, model.id);
      dataCheckin.RemoveAll(i => Shared.IsEmpty(i.user_confirm) && i.status_checkin == 2);
    }
  }

  private void GetEditItem()
  {
    var currentCheckin = dataCheckin.FirstOrDefault();
    if (currentCheckin != null && currentCheckin.status_checkin == 1 && currentCheckin.date_confirm == 0)
      checkinCreate = new();
    else
      checkinCreate = null;
  }

  private void CheckAutoCheckin()
  {
    if (model != null)
    {
      var parent = database.FirstOrDefault(i => i.id == model.parent);
      if (parent != null)
        checkAutoCheckin = parent.user == Layout.User.id;
    }
  }
}
