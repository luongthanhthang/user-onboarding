@page "/blogs"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject ProtectedLocalStorage storage

<PageTitle>@_title</PageTitle>

<section class="main_content">
  <div class="card">
    <ul class="columns is-vcentered">
      <li class="column is-narrow">
        <h1 class="title is-5 has-text-info">
          TIÊU ĐIỂM
        </h1>
      </li>
      <li class="column">
        <hr class="m-0">
      </li>
    </ul>

    @if (hotList.Count >= 1)
    {
      <ul class="columns is-variable is-2 mb-3">
        @if (hotList.Count > 0)
        {
          var item = hotList[0];
          var cat = GetCategory(item.category);
          <li class="column is-half">
            <a class="blog_item image is-5by4 is_radius is_cover"
               href="@(Shared.IsEmpty(item.link) ? $"/blogs/{item.id}" : item.link)"
               target="@(Shared.IsEmpty(item.link) ? "_self" : "_blank")"
               style="background-image: url('@item.image');">
              @if (item.date > DateTime.Now.AddDays(-7).Ticks)
              {
                <span class="tag is-rounded is-danger">Tin mới</span>
              }
              @if (cat != null)
              {
                <span class="tag is-rounded has-text-weight-semibold"
                      style="background: @cat.color; color: #fff; left: 10px; right: auto;">
                  @cat.name
                </span>
              }
              <div>
                <div>
                  <div class="mt-2 is-size-7">
                    @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
                  </div>
                  <h3 class="is-size-6 has-text-weight-semibold text_2_line mb-2" style="height: 3em;">
                    @item.name
                  </h3>
                  <div class="text_3_line">
                    @item.desc
                  </div>
                </div>
              </div>
            </a>
          </li>
        }
        @if (hotList.Count > 1)
        {
          <li class="column is-half">
            <ul class="columns is-multiline is-variable is-2">
              @for (int i = 1; i < hotList.Count; i++)
              {
                var item = hotList[i];
                var cat = GetCategory(item.category);
                <li class="column is-half">
                  <a class="blog_item image is-5by4 is_radius is_cover"
                     href="@(Shared.IsEmpty(item.link) ? $"/blogs/{item.id}" : item.link)"
                     target="@(Shared.IsEmpty(item.link) ? "_self" : "_blank")"
                     style="background-image: url('@item.image');">
                    @if (item.date > DateTime.Now.AddDays(-7).Ticks)
                    {
                      <span class="tag is-rounded is-danger">Tin mới</span>
                    }
                    @if (cat != null)
                    {
                      <span class="tag is-rounded has-text-weight-semibold"
                            style="background: @cat.color; color: #fff; left: 10px; right: auto;">
                        @cat.name
                      </span>
                    }
                    <div>
                      <div>
                        <div class="mt-2 is-size-7">
                          @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
                        </div>
                        <h3 class="is-size-6 has-text-weight-semibold text_2_line" style="height: 3em;">
                          @item.name
                        </h3>
                      </div>
                    </div>
                  </a>
                </li>
              }
            </ul>
          </li>
        }
      </ul>
    }

    <div class="tabs">
      <ul>
        <li class="@(string.IsNullOrEmpty(category) ? "is-active" : "")">
          <a class="has-text-weight-normal" @onclick='() => ChangeCategory("")'>Tất cả</a>
        </li>
        @foreach (var item in categorys)
        {
          <li class="@(category == item.id ? "is-active" : "")">
            <a class="has-text-weight-normal" @onclick="() => ChangeCategory(item.id)">@item.name</a>
          </li>
        }
      </ul>
    </div>

    <ul class="columns is-multiline">
      @for (int i = 0; i < countView; i++)
      {
        if (i >= dataList.Count) break;
        var item = dataList[i];
        var link = string.IsNullOrEmpty(item.link) ? $"/blogs/{item.id}" : item.link;
        var target = string.IsNullOrEmpty(item.link) ? "_self" : "_blank";
        var cat = GetCategory(item.category);

        <li class="column is-one-quarter">
          <div class="card">
            <div class="card-image">
              @if (item.date > DateTime.Now.AddDays(-7).Ticks)
              {
                <span class="tag is-rounded is-danger">Tin mới</span>
              }
              <a class="image is-4by3" href="@link" target="@target">
                <img src="@item.image" alt="img" />
              </a>
            </div>
            <div class="card-content px-4 py-2">
              <div class="mt-2 is-size-7">
                @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
              </div>
              <h3 class="font_14 text_2_line" style="height: 3em;">
                <a class="has-text-black has-text-weight-medium" href="@link" target="@target">@item.name</a>
              </h3>
              <div class="my-2" style="height: 24px;">
                @if (cat != null)
                {
                  <span class="tag is-rounded has-text-weight-semibold" style="background: @cat.color; color: #fff">
                    @cat.name
                  </span>
                }
              </div>
            </div>
          </div>
        </li>
      }
      @if (countView < dataList.Count)
      {
        <li class="column is-full has-text-centered pt-3">
          <a class="has-text-weight-semibold" @onclick="ViewMore">Xem thêm</a>
        </li>
      }
    </ul>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Tin tức";
  private List<BlogModel> hotList = new();
  private List<BlogModel> dataList = new();
  private List<BlogModel> database = new();
  private List<CompanyModel.Category> categorys = new();
  private List<string> departments = new();
  private string category = string.Empty;
  private int countView = 8;

  protected override async Task OnInitializedAsync()
  {
    // Danh mục tin tức
    var company = await DbMainCompany.Get(Layout.Company.id);
    categorys = company.blog_category;
    // Phòng ban trực thuộc
    departments = Layout.User.departments_id;
    // Dữ liệu bài viết
    database = await DbBlog.GetListShow(Layout.Company.id, null);
    GetPinList();
    GetDataList();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      category = await JSRuntime.InvokeAsync<string>("getCookie", "blog_category");
      var cookieCountView = await JSRuntime.InvokeAsync<string>("getCookie", "blog_countview");
      if (!Shared.IsEmpty(cookieCountView))
        countView = Convert.ToInt32(cookieCountView);
      if (!string.IsNullOrEmpty(category) || countView != 8)
      {
        GetDataList();
        StateHasChanged();
      }
    }
  }


  /// <summary>
  /// Lọc theo danh mục
  /// </summary>

  private async Task ChangeCategory(string value)
  {
    countView = 8;
    category = value;
    GetDataList();
    await JSRuntime.InvokeVoidAsync("setCookie", "blog_category", category);
    await JSRuntime.InvokeVoidAsync("setCookie", "blog_countview", countView);
  }


  /// <summary>
  /// Xử lý việc xem thêm
  /// </summary>

  private async Task ViewMore()
  {
    countView += 8;
    await JSRuntime.InvokeVoidAsync("setCookie", "blog_countview", countView);
  }



  private void GetPinList()
  {
    var pinList = database.Where(x => x.pin).OrderBy(x => x.pos).ToList();
    // Tin ghim của tổng công ty
    hotList = pinList.Where(x => x.is_all).ToList();
    // Tin ghim của công ty con
    if (hotList.Count < 5)
    {
      var list = pinList.Where(x => !x.is_all && departments.Contains(x.department)).ToList();
      hotList.AddRange(list);
    }
    // Thiếu tin thì đưa tin mới lên
    if (hotList.Count < 5)
    {
      var hotListId = hotList.Select(x => x.id);
      var list = database.Where(x => departments.Contains(x.department)
        && !hotListId.Contains(x.id)).ToList();
      hotList.AddRange(list);
    }
    // Sắp xếp
    hotList = hotList.Take(5).ToList();
  }

  private void GetDataList()
  {
    dataList = database.Where(x => departments.Contains(x.department)).ToList();
    if (!string.IsNullOrEmpty(category))
      dataList = dataList.Where(x => x.category == category).ToList();
  }

  /// <summary>
  /// Lấy tên danh mục
  /// </summary>
  private CompanyModel.Category GetCategory(string id)
  {
    return categorys.FirstOrDefault(x => x.id == id);
  }
}