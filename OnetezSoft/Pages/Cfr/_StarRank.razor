@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="">
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        BẢNG XẾP HẠNG
      </h1>
    </li>
    <li class="column is-narrow">
      <Dropdown>
        <Trigger>
          <a class="icon-text">
            <span>
              @(rankTab == 1 ? "Nhận được" : rankTab == 2 ? "Cho đi" : "Đặc biệt")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeRankTab(1)">
            Nhận được
          </a>
          <a class="dropdown-item" @onclick="() => ChangeRankTab(2)">
            Cho đi
          </a>
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown css="is-right" department="@rankDepartment.name" OnUpdate="ChangeRankDepartment" />
    </li>
    <li class="column is-narrow">
      <Dropdown CloseOnClickMenu=true>
        <Trigger>
          <a class="icon-text">
            <span class="has-text-link">
              @(rankDay == 2 ? "Tháng này" : rankDay == 3 ? "Quý này" : "Tất cả")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeRankDay(2)">
            Tháng này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeRankDay(3)">
            Quý này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeRankDay(0)">
            Tất cả
          </a>
        </MenuContent>
      </Dropdown>
    </li>
  </ul>
  <div class="scrolly inner_section" style="height: 450px;">
    @if (rankTab == 3)
    {
      <ul class="columns is-multiline is-variable is-2">
        @foreach (var item in rankList)
        {
          var create = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_create);
          var receive = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_receive);

          <li class="column is-full">
            @if (create != null)
            {
              <div class="user_item mb-2">
                <img class="image is-36x36 mr-2" src="@create.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-medium has-text-info">
                    <span class="mr-2">@create.name</span>
                  </p>
                  <p class="text_1_line is-size-7" style="width: 250px;">
                    @create.departments_name
                  </p>
                </div>
              </div>
            }
            @if (receive != null)
            {
              <div class="user_item mb-3 pl-6" style="background: url(/images/arrow_sub.png) 20px 0px no-repeat;">
                <img class="image is-36x36 mr-2" src="@receive.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-medium has-text-info">@receive.name</p>
                  <p class="text_1_line is-size-7" style="width: 250px;">
                    @receive.departments_name
                  </p>
                </div>
              </div>
            }
            @if (!string.IsNullOrEmpty(item.evaluate_name))
            {
              <h3 class="title is-6 has-text-info mb-2">
                @item.evaluate_name
              </h3>
            }
            @if (!item.privacy || item.user_create == Layout.User.id || item.user_receive == Layout.User.id)
            {
              <div class="text_3_line mb-2" onclick="toggleText(this)">
                @((MarkupString)Shared.GetLinks(item.content))
              </div>
            }
            else
            {
              <div class="mb-2 is-italic">
                Nội dung lời nhắn không được công khai!
              </div>
            }
            <div class="field is-grouped">
              <div class="control">
                <span class="icon-text">
                  <span class="icon is-small" title="@(item.privacy ? "Riêng tư" : "Công khai")">
                    <i class="material-icons-round">@(item.privacy ? "lock" : "public")</i>
                  </span>
                  <span class="has-text-weight-semibold">@item.star</span>
                  <span class="icon">
                    <i class="material-icons-outlined has-text-warning">star</i>
                  </span>
                </span>
              </div>
              <div class="control">•</div>
              <div class="control has-text-weight-medium text_1_line" style="max-width: 280px;">
                @if (string.IsNullOrEmpty(item.okr_name))
                {
                  <span>Tất cả OKRs</span>
                }
                else
                {
                  <span>@item.okr_name</span>
                }
              </div>
              <div class="control">•</div>
              <div class="control">
                @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date_create))
              </div>
            </div>
            <hr class="mt-3 mb-0" />
          </li>
        }
      </ul>
    }
    else
    {
      <ul class="columns is-multiline is-vcentered is-mobile is-variable is-2">
        @foreach (var item in rankDict)
        {
          var user = shareStorage.MemberList.SingleOrDefault(x => x.id == item.Key);
          <li class="column is-three-quarters">
            <div class="user_item">
              <img class="image is-36x36 mr-2" src="@user.avatar" alt="IMG">
              <div>
                <p class="has-text-weight-semibold has-text-info">
                  @user.name
                </p>
                <p class="text_1_line is-size-7" style="width: 250px;">
                  @user.departments_name
                </p>
              </div>
            </div>
          </li>
          <li class="column is-one-quarter has-text-right">
            <span class="icon-text">
              <span class="has-text-weight-semibold">@item.Value</span>
              <span class="icon">
                <i class="material-icons-outlined has-text-warning">star</i>
              </span>
            </span>
          </li>
        }
      </ul>
    }
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private int rankTab = 1;
  private int rankDay = 2;
  private DepartmentModel.SelectList rankDepartment = new() { name = "Tất cả phòng ban" };
  private List<OkrCfrModel> rankList = new();
  private Dictionary<string, int> rankDict = new();

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);

    if (!string.IsNullOrEmpty(Layout.User.department_default))
      rankDepartment = departments.SingleOrDefault(x => x.id == Layout.User.department_default);
    if (rankDepartment == null)
      rankDepartment = new() { name = "Tất cả phòng ban" };

    await Start();
  }

  private async Task ChangeRankTab(int type)
  {
    rankTab = type;
    await Start();
  }

  private async Task ChangeRankDay(int type)
  {
    rankDay = type;
    await Start();
  }

  private async Task ChangeRankDepartment(string id)
  {
    var item = departments.FirstOrDefault(x => x.id == id);
    if (item == null)
      rankDepartment = new() { name = "Tất cả phòng ban" };
    else
      rankDepartment = item;
    await Start();
  }

  private async Task<bool> Start()
  {
    bool _success = true;
    try
    {
      DateTime? filterStart = null;
      DateTime? filterEnd = null;
      if (rankDay != 0)
      {
        Shared.GetTimeSpan(rankDay, out DateTime start, out DateTime end);
        filterStart = start;
        filterEnd = end;
      }

      var dataList = await DbOkrCfr.GetList(Layout.Company.id, filterStart, filterEnd);
      var userList = string.IsNullOrEmpty(rankDepartment.id) ? shareStorage.MemberList :
        shareStorage.MemberList.Where(x => x.departments_id.Contains(rankDepartment.id)).ToList();

      if (rankTab == 1 || rankTab == 2)
      {
        rankDict.Clear();
        foreach (var user in userList)
        {
          int total = 0;
          if (rankTab == 1)
          {
            total = (from x in dataList
                     where x.user_receive == user.id
                     select x.star).Sum();
          }
          else
          {
            total = (from x in dataList
                     where x.user_create == user.id
                     select x.star).Sum();
          }
          rankDict.Add(user.id, total);
        }

        rankDict = rankDict.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
      }
      else
      {
        var userListId = (from x in userList select x.id).ToList();
        rankList = (from x in dataList
                    where x.special
                    && (userListId.Contains(x.user_create) || userListId.Contains(x.user_receive))
                    orderby x.date_create descending
                    select x).ToList();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Start()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}