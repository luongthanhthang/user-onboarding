@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="flex_column h-full">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        GHI NHẬN - TẶNG SAO
      </h1>
    </li>
    <li class="column is-narrow">
      <div class="dropdown @(departmentShow ? "is-active" : "")">
        <div class="dropdown-trigger">
          <a class="icon-text" @onclick="() => departmentShow = !departmentShow">
            <span class="has-text-link">
              @department.name.Replace("└─", "").Replace("'", "")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </div>
        <div class="dropdown-menu">
          <div class="dropdown-content">
            @foreach (var sl in departments)
            {
              <a class="dropdown-item is-family-code" @onclick="() => ChangeDepartment(sl)">
                @((MarkupString)sl.name.Replace("'", "&nbsp;"))
              </a>
            }
          </div>
        </div>
      </div>
    </li>
  </ul>
  <ul class="columns is-variable is-2 mb-2 is-centered">
    <li class="column is-6">
      <div class="card inner_section has-text-centered">
        <span class="button is-fullwidth is-transparent is-white has-text-link is-size-5">
          <span class="icon is-large">
            <i class="material-icons-outlined">grade</i>
          </span>
          <strong>
            @User.star_distribute
          </strong>
        </span>
        <span>Sao được cấp</span>
      </div>
    </li>
    <li class="column is-6">
      <div class="card inner_section has-text-centered">
        <span class="button is-fullwidth is-transparent is-white has-text-primary is-size-5">
          <span class="icon is-large">
            <i class="material-icons-outlined is-size-4">grade</i>
          </span>
          <strong>@User.star_total</strong>
        </span>
        <span>Sao của bạn</span>
      </div>
    </li>
  </ul>

  <div style="flex:1" class="flex_column">
    <div class="inner_section flex_column" style="flex:1;">
      <ul class="columns is-multiline is-vcentered is-mobile is-variable is-2 mb-2">
        <li class="column is-two-thirds">
          <div class="field">
            <label class="label">Người nhận</label>
            <div class="control has-icons-right has_suggest">
              <input class="input is_bg" type="text" placeholder="Nhập tên nhân viên..."
                     autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
              <ul class="suggest">
                @foreach (var item in userSuggests)
                {
                  <li class="rsitem" @onclick="() => UserSelected(item)">
                    <div class="user_item">
                      <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                      <span>@item.name</span>
                    </div>
                  </li>
                }
              </ul>
              <span class="icon is-right">
                <i class="material-icons-outlined">search</i>
              </span>
            </div>
          </div>
        </li>
        <li class="column is-one-third">
          <div class="field">
            <label class="label">&nbsp;</label>
            <div class="control">
              <div class="select is-fullwidth is_bg">
                <select @bind="current.type">
                  <option value="2">Ghi nhận</option>
                  <option value="3">Tặng sao</option>
                </select>
              </div>
            </div>
          </div>
        </li>
      </ul>
      <ul class="columns is-multiline is-vcentered is-mobile is-variable is-2" style="flex:1">
        <li class="column is-full h-full flex_column">
          @if (current.type == 2)
          {
            <div class="field">
              <label class="label">Tiêu chí ghi nhận</label>
              <div class="control">
                <div class="select is-fullwidth is_bg">
                  <select @bind="current.evaluate">
                    <option>Chọn tiêu chí ghi nhận</option>
                    @foreach (var sl in evaluates)
                    {
                      <option value="@sl.id">@sl.name (@sl.star)</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          }
          else
          {
            <div class="field">
              <label class="label">Số sao muốn tặng</label>
              <div class="control">
                <input @bind="current.star" type="number" class="input is_bg" placeholder="Nhập số sao" min="0" />
              </div>
            </div>
          }
          <div class="field flex_column" style="flex:1">
            <label class="label">Nội dung</label>
            <div class="control" style="flex:1">
              <textarea @bind="current.content" class="textarea h-full is_bg scrolly" placeholder="Nhập nội dung..." style="min-height: 159px;flex:1;" />
            </div>
          </div>
          <div class="field is-grouped is-grouped-right mt-4">
            <div class="control is-expanded">
              <label class="checkbox">
                <input @bind="current.privacy" type="checkbox" />
                <span>Riêng tư</span>
              </label>
            </div>
            <div class="control">
              <a class="button is-info" @onclick="Cancel">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">refresh</i>
                </span>
                <span>Nhập lại</span>
              </a>
            </div>
            <div class="control">
              <a class="button is-link" @onclick="Send" style="width: 90px;">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">send</i>
                </span>
                <span>Gửi</span>
              </a>
            </div>
          </div>
        </li>
      </ul>
    </div>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();
  [Parameter]
  public UserModel User { get; set; }
  [Parameter]
  public List<CfrEvaluateModel> evaluates { get; set; } = new();

  private OkrCfrModel current = new() { type = 2 };
  private DepartmentModel.SelectList department = new() { name = "Tất cả phòng ban" };
  private List<MemberModel> userSuggests = new();
  private string filterUserName = string.Empty;
  private bool departmentShow = false;

  private List<MemberModel> userList = new();

  protected override async Task OnInitializedAsync()
  {
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    userList = shareStorage.MemberList;
  }

  private void ChangeDepartment(DepartmentModel.SelectList item)
  {
    department = item;
    departmentShow = false;
  }

  private string UserSearch
  {
    get => filterUserName;
    set
    {
      filterUserName = value;
      current.user_receive = string.Empty;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in userList)
        {
          bool check = true;
          if (!string.IsNullOrEmpty(department.id))
            if (item.departments_id == null || !item.departments_id.Contains(department.id))
              check = false;
          if (!Handled.Shared.SearchKeyword(filterUserName, item.name))
            check = false;

          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private async Task UserSelected(MemberModel item)
  {
    try
    {
      current.user_receive = item.id;
      filterUserName = item.name;
      userSuggests = new();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UserSelected()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private void Cancel()
  {
    filterUserName = null;
    current = new() { type = 2 };
  }

  private async Task<bool> Send()
  {
    bool _success = true;
    try
    {
      if (current.type == 2)
      {
        var evaluate = evaluates.SingleOrDefault(x => x.id == current.evaluate);
        if (evaluate != null)
        {
          current.star = evaluate.star;
          current.evaluate_name = evaluate.name;
        }
        else
          current.star = 0;
      }
      else
        current.evaluate = null;

      current.user_create = Layout.User.id;

      if (string.IsNullOrEmpty(current.user_receive))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn người nhận!");
      else if (current.user_receive == Layout.User.id)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không thể " + (current.type == 2 ? "ghi nhận" : "tặng sao") + " cho chính mình!");
      else if (current.type == 2 && string.IsNullOrEmpty(current.evaluate))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn tiêu chí ghi nhận!");
      else if (current.type == 2 && User.star_total + User.star_distribute < current.star)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không đủ số sao để ghi nhận!");
      else if (current.type == 3 && current.star == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn số sao muốn tặng!");
      else if (current.type == 3 && User.star_total < current.star)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không đủ số sao để tặng sao!");
      else if (string.IsNullOrEmpty(current.content))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập nội dung!");
      else
      {
        // Ghi nhận
        if (current.type == 2)
        {

          // Lưu lịch sử ghi nhận
          await DbOkrCfr.Create(Layout.Company.id, current);

          // Trừ số sao người ghi nhận
          if (User.star_distribute >= current.star)
            User.star_distribute -= current.star;
          else if (User.star_distribute <= 0)
            User.star_total -= current.star;
          else
          {
            User.star_total -= current.star - User.star_distribute;
            User.star_distribute = 0;
          }
          User.star_give += current.star;
          await DbUser.Update(Layout.Company.id, User, globalService);

          // Cộng số sao người được ghi nhận
          var userReceive = await DbUser.Get(Layout.Company.id, current.user_receive, globalService);
          if (userReceive != null)
          {
            userReceive.star_total += current.star;
            userReceive.star_receive += current.star;
            await DbUser.Update(Layout.Company.id, userReceive, globalService);
          }

          // Tính thành tựu
          await DbOkrCfr.Achievement(Layout.Company.id, current.user_receive, globalService);

          // Gửi thông báo chuông
          await DbNotify.Create(Layout.Company.id, 901, current.star.ToString(), current.user_receive, Layout.User.id);
          await JSRuntime.InvokeVoidAsync("tagline", true, $"Bạn đã gửi ghi nhận cho {filterUserName} thành công!");
        }
        // Tặng sao
        else
        {
          // Lưu lịch sử tặng sao
          await DbOkrCfr.Create(Layout.Company.id, current);

          // Trừ sao người tặng sao
          User.star_total -= current.star;
          User.star_give += current.star;
          await DbUser.Update(Layout.Company.id, User, globalService);

          // Cộng số sao người được tặng sao
          var userReceive = await DbUser.Get(Layout.Company.id, current.user_receive, globalService);
          if (userReceive != null)
          {
            userReceive.star_total += current.star;
            userReceive.star_receive += current.star;
            await DbUser.Update(Layout.Company.id, userReceive, globalService);
          }

          // Gửi thông báo chuông
          await DbNotify.Create(Layout.Company.id, 902, current.star.ToString(), current.user_receive, Layout.User.id);
          await JSRuntime.InvokeVoidAsync("tagline", true, $"Bạn đã tặng {current.star} sao cho {filterUserName} thành công!");
        }
        Cancel();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Send()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}