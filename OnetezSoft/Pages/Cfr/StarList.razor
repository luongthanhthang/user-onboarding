@page "/cfr"
@using OnetezSoft.Pages.Config;
@inject IJSRuntime JSRuntime
@inject GlobalService globalService
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (!CheckAccess())
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-content" style="max-width: 360px;">
      <div class="box has-text-centered pt-5">
        <span class="icon is-large has-text-danger">
          <i class="material-icons-outlined is-size-1">error_outline</i>
        </span>
        <div class="is-size-6 py-4 has-text-weight-semibold">
          @msgAccess
        </div>
      </div>
    </div>
  </div>
}
else
{
  <section class="main_content">
    <ul class="columns is-multiline is-variable is-2" style="align-items:stretch;width:100%;flex:1;">
      <li class="column is-half" style="@(Layout.IsMobile ? "" : "height:700px")">
        <_StarCreate departments="@departments" User="@User" evaluates="evaluates" />
      </li>

      <li class="column is-half" style="@(Layout.IsMobile ? "" : "height:700px")">
        <_StarLogs departments="@departments" />
      </li>

      <li class="column is-half">
        <_StarChart />
      </li>

      <li class="column is-half">
        <_StarRank departments="@departments" />
      </li>
    </ul>
  </section>
}



@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private string _title = "CFRs - Ghi nhận & Tặng sao";

  private UserModel User = new();
  private List<DepartmentModel.SelectList> departments = new();

  private List<CfrEvaluateModel> evaluates = new();
  private string msgAccess = string.Empty;

  protected override async Task OnParametersSetAsync()
  {
    var departs = await DbDepartment.GetSelectList(Layout.Company.id, null, 0, null);
    departments.AddRange(departs);
    evaluates = await DbCfrEvaluate.GetList(Layout.Company.id);
    User = await DbUser.Get(Layout.Company.id, Layout.User.id, globalService);

    MessagingCenter.Subscribe<CfrStarAction, string>(this, "starChanged", async (sender, value) =>
   {
     if (User != null && Layout.Company != null && User.id == value)
     {
       User = await DbUser.Get(Layout.Company.id, User.id, globalService);
       await InvokeAsync(StateHasChanged);
     }
   });

    MessagingCenter.Subscribe<CfrStarList, string>(this, "starChanged", async (sender, value) =>
   {
     if (User != null && Layout.Company != null && User.id == value)
     {
       User = await DbUser.Get(Layout.Company.id, User.id, globalService);
       await InvokeAsync(StateHasChanged);
     }
   });
  }

  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "cfr", out msgAccess);
  }
}