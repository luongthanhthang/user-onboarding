@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="flex_column" style="height:100%">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        NHẬT KÝ
      </h1>
    </li>
    <li class="column is-narrow">
      <Dropdown>
        <Trigger>
          <a class="icon-text">
            <span>
              @(logsTab == 2 ? "Ghi nhận" : "Tặng sao")
            </span>
            <span class="icon">
              <span class="material-icons-outlined">
                arrow_drop_down
              </span>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item @(logsTab == 2 ? "is-active" : "")">
            <span @onclick="() => ChangeTab(2)">Ghi nhận</span>
          </a>
          <a class="dropdown-item @(logsTab == 3 ? "is-active" : "")">
            <span @onclick="() => ChangeTab(3)">Tặng sao</span>
          </a>
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <Dropdown CloseOnClickMenu=true>
        <Trigger>
          <a class="icon-text">
            <span class="has-text-link">
              @(logsDay == 2 ? "Tháng này" : logsDay == 3 ? "Quý này" : "Tất cả")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeDay(2)">
            Tháng này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDay(3)">
            Quý này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDay(0)">
            Tất cả
          </a>
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <Dropdown CloseOnClickMenu=true>
        <Trigger>
          <a class="icon-text">
            <span class="has-text-link">
              @(logsReceive ? "Đã nhận" : "Đã gửi")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeReceive(true)">
            Đã nhận
          </a>
          <a class="dropdown-item" @onclick="() => ChangeReceive(false)">
            Đã gửi
          </a>
        </MenuContent>
      </Dropdown>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1;min-height:300px;">
    <ul class="columns is-multiline is-variable is-2">
      @foreach (var item in logList)
      {
        var create = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_create);
        var receive = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_receive);

        <li class="column is-full">
          <hr class="mt-0 mb-3" />
          @if (create != null)
          {
            <div class="user_item mb-2">
              <img class="image is-36x36 mr-2" src="@create.avatar" alt="IMG">
              <div>
                <p class="has-text-weight-medium has-text-info">
                  <span class="mr-2">@create.name</span>
                </p>
                <p class="text_1_line is-size-7" style="width: 250px;">
                  @create.departments_name
                </p>
              </div>
            </div>
          }
          @if (receive != null)
          {
            <div class="user_item mb-3 pl-6" style="background: url(/images/arrow_sub.png) 20px 0px no-repeat;">
              <img class="image is-36x36 mr-2" src="@receive.avatar" alt="IMG">
              <div>
                <p class="has-text-weight-medium has-text-info">@receive.name</p>
                <p class="text_1_line is-size-7" style="width: 250px;">
                  @receive.departments_name
                </p>
              </div>
            </div>
          }

          @if (!string.IsNullOrEmpty(item.evaluate_name))
          {
            <h3 class="title is-6 has-text-info mb-2">
              @item.evaluate_name
            </h3>
          }
          <div class="text_3_line mb-2" onclick="toggleText(this)">
            @((MarkupString)Shared.GetLinks(item.content))
          </div>
          <div class="field is-grouped">
            @if (Layout.User.id == item.user_receive)
            {
              <div class="control">
                @if (item.like)
                {
                  <span class="icon is-small has-text-danger" title="Bạn đã thả tim">
                    <i class="material-icons-outlined is-size-6">favorite</i>
                  </span>
                }
                else
                {
                  <a class="icon is-small has-text-dark" title="Thả tim" @onclick="() => Like(item, create)">
                    <i class="material-icons-outlined is-size-6">favorite_border</i>
                  </a>
                }
              </div>
              <div class="control has-text-grey">•</div>
            }
            else if (item.like && receive != null)
            {
              <div class="control">
                <span class="icon is-small has-text-danger" title="@receive.name đã thả tim.">
                  <i class="material-icons-outlined is-size-6">favorite</i>
                </span>
              </div>
              <div class="control has-text-grey">•</div>
            }
            <div class="control">
              <span class="icon-text has-text-dark">
                <span class="icon is-small" title="@(item.privacy ? "Riêng tư" : "Công khai")">
                  <i class="material-icons-round">@(item.privacy ? "lock" : "public")</i>
                </span>
                <span class="has-text-weight-semibold">@item.star</span>
                <span class="icon is-small">
                  <i class="material-icons-outlined has-text-warning">star</i>
                </span>
              </span>
            </div>
            <div class="control has-text-grey">•</div>
            <div class="control has-text-grey">
              @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date_create))
            </div>
          </div>
        </li>
      }
    </ul>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private int logsTab = 2;
  private int logsDay = 2;
  private bool logsReceive = true;
  private List<OkrCfrModel> logList = new();

  private SharedStorage shareStorage = new();

  protected override async Task OnParametersSetAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out var outType))
      logsTab = Convert.ToInt32(outType);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("send", out var outSend))
      logsReceive = !Convert.ToBoolean(outSend);
    await Start();
  }



  private async Task ChangeTab(int type)
  {
    logsTab = type;
    await Start();
  }

  private async Task ChangeDay(int type)
  {
    logsDay = type;
    await Start();
  }

  private async Task ChangeReceive(bool value)
  {
    logsReceive = value;
    await Start();
  }

  private async Task<bool> Start()
  {
    bool _success = true;
    try
    {
      DateTime? logsStart = null;
      DateTime? logsEnd = null;
      if (logsDay != 0)
      {
        Shared.GetTimeSpan(logsDay, out DateTime start, out DateTime end);
        logsStart = start;
        logsEnd = end;
      }

      if (logsReceive)
        logList = await DbOkrCfr.GetListReceive(Layout.Company.id, Layout.User.id, logsTab, logsStart, logsEnd);
      else
        logList = await DbOkrCfr.GetListGive(Layout.Company.id, Layout.User.id, logsTab, logsStart, logsEnd);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Start()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Like(OkrCfrModel item, MemberModel create)
  {
    bool _success = true;
    try
    {
      var name = create != null ? "cho " + create.name : "thành công!";
      item.like = true;
      await DbOkrCfr.Update(Layout.Company.id, item);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Bạn đã thả tim " + name);
      await DbNotify.Create(Layout.Company.id, 903, item.type.ToString(), item.user_create, Layout.User.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Like()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}