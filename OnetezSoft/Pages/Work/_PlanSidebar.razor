@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@implements IDisposable

<div class="card teams_left plan py-3 @(Layout.IsMobile ? "" : navLess ? "" : "is-less")" style="height:calc(var(--window-height) - 51px);">
  @if (Layout.IsMobile)
  {
    <div class="px-3 mb-4 has-text-weight-semibold">
      <div class="user_item p-1 @(url.StartsWith("/work/my-task") ? "has_bg" : "")">
        <img class="image is-24x24 mr-2" src="@Layout.User.avatar" alt="IMG">
        <a href="/work/my-task">Công việc của tôi</a>
      </div>
    </div>
  }
  else
  {
    <div class="px-3">
      <div class="user_item p-1 @(url.StartsWith("/work/my-task") ? "has_bg" : "")">
        <img class="image is-24x24 mr-2" src="@Layout.User.avatar" alt="IMG">
        <a href="/work/my-task">Công việc của tôi</a>
      </div>
    </div>
    <hr class="my-3">
  }
  <div class="px-3 is_filter">
    <div class="control has-icons-right mb-3">
      <input @bind="keyword" @bind:event="oninput" type="text"
             class="input is-small is-rounded is_bg" placeholder="Tiêu đề kế hoạch">
      <span class="icon is-right">
        <i class="material-icons-round is-size-6">search</i>
      </span>
    </div>
    <Dropdown DropdownClass="is-fullwidth is-size-7" CloseOnClickMenu=true>
      <Trigger>
        <a class="icon-text is-fullwidth">
          @if (orderBy == 1)
          {
            <span style="flex-grow: 1;">Sắp xếp theo: A-Z</span>
          }
          else if (orderBy == 2)
          {
            <span style="flex-grow: 1;">Sắp xếp theo: Z-A</span>
          }
          else if (orderBy == 3)
          {
            <span style="flex-grow: 1;">Sắp xếp theo: mới nhất</span>
          }
          else if (orderBy == 4)
          {
            <span style="flex-grow: 1;">Sắp xếp theo: cũ nhất</span>
          }
          else
          {
            <span style="flex-grow: 1;">Sắp xếp theo</span>
          }
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
          </span>
        </a>
      </Trigger>
      <MenuContent>
        <a class="dropdown-item @(orderBy == 1 ? "has-text-weight-semibold" : "")"
        @onclick="() => Orderby(1)">Tiêu đề A-Z</a>
        <a class="dropdown-item @(orderBy == 2 ? "has-text-weight-semibold" : "")"
        @onclick="() => Orderby(2)">Tiêu đề Z-A</a>
        <a class="dropdown-item @(orderBy == 3 ? "has-text-weight-semibold" : "")"
        @onclick="() => Orderby(3)">Ngày tạo mới nhất</a>
        <a class="dropdown-item @(orderBy == 4 ? "has-text-weight-semibold" : "")"
        @onclick="() => Orderby(4)">Ngày tạo cũ nhất</a>
      </MenuContent>
    </Dropdown>
    <a id="sidebar_plan_refresh" class="is-hidden" @onclick="GetList">Làm mới</a>
  </div>
  <div class="px-3 pb-5 scrolly" style="flex:1;">
    @foreach (var type in typeList.OrderBy(x => x.id))
    {
      var hidden = toggle.Contains(type.id);
      <hr class="my-3">
      <a class="icon-text is-fullwidth" @onclick="() => Toggle(type.id)">
        <span class="icon mr-2" style="border-radius: 4px; background: @type.color;">
          <i class="material-icons-outlined is-size-6">@type.icon</i>
        </span>
        <span class="is-size-7 has-text-weight-semibold" style="flex-grow: 1;">@type.name</span>
        <span class="icon is-small">
          <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_drop_down" : "arrow_right")</i>
        </span>
      </a>
      if (hidden)
      {
        var list = planList.ContainsKey(type.id) ? planList[type.id] : new();
        @foreach (var plan in list)
        {
          var link = "/work/" + plan.id + (!string.IsNullOrEmpty(Tab) ? $"/{Tab}" : "") + (!string.IsNullOrEmpty(View) ? $"/{View}" : "");
          var show = string.IsNullOrEmpty(keyword) || Shared.SearchKeyword(keyword, plan.name);
          var active = url.Contains(plan.id) ? "active" : "";
          <div class="sidebar_plan_item @active @(show ? "icon-text " : "is-hidden")">
            <a class="has-text-info" href="@link" style="flex-grow: 1;" title="@plan.name">
              @plan.name
            </a>
            <Dropdown DropdownClass="icon is-small is-right is_hover">
              <Trigger>
                <a class="icon is-small">
                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                </a>
              </Trigger>
              <MenuContent>
                <a class="dropdown-item is-hidden">
                  Ghim kế hoạch
                </a>
                @if (type.id == 0)
                {
                  <a class="dropdown-item" @onclick="() => PinPlan(plan)">
                    Hủy ghim
                  </a>
                }
                else
                {
                  <a class="dropdown-item" @onclick="() => PinPlan(plan)">
                    Ghim kế hoạch
                  </a>
                }
                @if (type.id == 3)
                {
                  <a class="dropdown-item" @onclick="() => HidePlan(plan)">
                    Hủy lưu trữ
                  </a>
                }
                else
                {
                  <a class="dropdown-item" @onclick="() => HidePlan(plan)">
                    Thêm vào lưu trữ
                  </a>
                }
                <a class="dropdown-item" @onclick="() => ExportPlan(plan)">
                  Xuất file Excel
                </a>
                <a class="dropdown-item has-text-danger" @onclick="() => LeavePlan(plan)">
                  Rời khỏi kế hoạch
                </a>
                <a class="dropdown-item has-text-danger" @onclick="() => DeletePlan(plan)">
                  Xóa kế hoạch
                </a>
              </MenuContent>
            </Dropdown>
          </div>
        }
        @if (list.Count == 0)
        {
          <div class="sidebar_plan_item has-text-grey">Không có kế hoạch</div>
        }
      }
    }
  </div>
  <div class="px-3">
    <a class="button is-info is-fullwidth" @onclick="CreatePlan">
      <span class="icon">
        <i class="material-icons-round is-size-5">add</i>
      </span>
      <span>Tạo kế hoạch</span>
    </a>
  </div>
</div>

<_PlanCreate model="planEdit" OnUpdate="OnCreate" />

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Tab { get; set; }
  [Parameter]
  public string View { get; set; }
  [Parameter]
  public bool navLess { get; set; }

  private string url = string.Empty;
  private List<int> toggle = new() { 0, 1 };
  private Dictionary<int, List<WorkPlanModel>> planList = new();
  private WorkPlanModel planEdit = null;
  private string keyword = string.Empty;
  private int orderBy = 0;
  private bool toggleOrderby = false;
  private List<StaticModel> typeList = new();

  private DotNetObjectReference<_PlanSidebar> obj;

  protected override void OnInitialized()
  {
    obj = DotNetObjectReference.Create(this);

    typeList.Clear();
    typeList.Add(new() { id = 0, name = "Kế hoạch đã ghim", icon = "push_pin", color = "#AEC6FF" });
    typeList.Add(new() { id = 3, name = "Kế hoạch lưu trữ", icon = "archive", color = "#FFEDE9" });
    typeList.Add(new() { id = 1, name = "Kế hoạch đang diễn ra", icon = "show_chart", color = "#FFFDC6" });
    typeList.Add(new() { id = 2, name = "Kế hoạch hoàn thành", icon = "done_all", color = "#CEF9CC" });

    MessagingCenter.Subscribe<_PlanHeader, string>(this, "changeView", (sender, value) =>
    {
      if (!string.IsNullOrEmpty(value))
      {
        Tab = value.Split("_").First();
        View = value.Split("_").Last();
      }
    });

  }

  protected override async Task OnParametersSetAsync()
  {
    url = navigation.Uri.Replace(navigation.BaseUri, "/");
    await GetList();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await JSRuntime.InvokeVoidAsync("window.SetDotNetReference", obj, "CreatePlan");
  }

  public async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      // Lấy dự án tham gia
      var data = await DbWorkPlan.GetListJoin(Layout.Company.id, Layout.User.id);

      // Sắp xếp
      if (orderBy == 1)
        data = data.OrderBy(x => x.name).ToList();
      else if (orderBy == 2)
        data = data.OrderByDescending(x => x.name).ToList();
      else if (orderBy == 3)
        data = data.OrderByDescending(x => x.date_start).ToList();
      else if (orderBy == 4)
        data = data.OrderBy(x => x.date_start).ToList();

      // Phân nhóm
      planList.Clear();
      foreach (var type in typeList)
      {
        var list = new List<WorkPlanModel>();
        if (type.id == 0)
        {
          list = data.Where(x => Layout.User.plans_pin != null && Layout.User.plans_pin.Contains(x.id)).ToList();
        }
        else if (type.id == 3)
        {
          list = data.Where(x => Layout.User.plans_pin != null && Layout.User.plans_hide.Contains(x.id)).ToList();
          data.RemoveAll(x => Layout.User.plans_pin != null && Layout.User.plans_hide.Contains(x.id));
        }
        else if (type.id == 1 || type.id == 2)
        {
          list = data.Where(x => x.status == type.id).ToList();
          data.RemoveAll(x => x.status == type.id);
        }
        planList.Add(type.id, list);
      }

      toggleOrderby = false;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task Orderby(int value)
  {
    orderBy = value;
    await GetList();
  }

  private void Toggle(int id)
  {
    toggleOrderby = false;
    if (toggle.Contains(id))
      toggle.Remove(id);
    else
      toggle.Add(id);
  }

  private async Task<bool> PinPlan(WorkPlanModel item)
  {
    bool _success = true;
    try
    {
      if (Layout.User.plans_pin.Contains(item.id))
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn hủy ghim kế hoạch: {item.name}?"))
          return _success;
        Layout.User.plans_pin.Remove(item.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy ghim kế hoạch " + item.name);
      }
      else
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn ghim kế hoạch: {item.name}?"))
          return _success;
        Layout.User.plans_pin.Add(item.id);
        Layout.User.plans_hide.Remove(item.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã ghim kế hoạch " + item.name);
      }
      await DbUser.Update(Layout.Company.id, Layout.User, globalService);
      await GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "PinPlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> HidePlan(WorkPlanModel item)
  {
    bool _success = true;
    try
    {
      if (Layout.User.plans_hide.Contains(item.id))
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn hủy lưu trữ kế hoạch: {item.name}?"))
          return _success;
        Layout.User.plans_hide.Remove(item.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy lưu trữ kế hoạch " + item.name);
      }
      else
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn lưu trữ kế hoạch: {item.name}?"))
          return _success;
        Layout.User.plans_hide.Add(item.id);
        Layout.User.plans_pin.Remove(item.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã lưu trữ kế hoạch " + item.name);
      }
      await DbUser.Update(Layout.Company.id, Layout.User, globalService);
      await GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "HidePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeletePlan(WorkPlanModel item)
  {
    bool _success = true;
    try
    {
      if (WorkService.RoleInPlan(item, Layout.User.id) == 1)
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa kế hoạch {item.name}. Việc này sẽ khiến dữ liệu công việc trong kế hoạch bị mất.\nBạn có chắc chắn muốn thực hiện?"))
          return _success;
        // Thông báo chuông
        foreach (var user in item.members)
          await DbNotify.ForPlan(Layout.Company.id, 705, item.id, null, user.id, Layout.User.id);
        await WorkService.DeletePlan(Layout.Company.id, item.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa kế hoạch thành công!");
        navigation.NavigateTo("/work");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không có quyền xóa kế hoạch này!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeletePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> LeavePlan(WorkPlanModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn rời khỏi kế hoạch này?"))
        return _success;
      if (await WorkService.RemoveMemberInPlan(Layout.Company.id, item.id, Layout.User.id))
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã rời khỏi kế hoạch thành công!");
      else if (WorkService.CheckPlanSingleManager(item, Layout.User.id))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đang là quản lý duy nhất của kế hoạch, vui lòng thêm quản lý khác trước khi rời khỏi kế hoạch!");
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "LeavePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  [JSInvokable]
  public async Task CreatePlan()
  {
    if (planEdit == null)
    {
      planEdit = new()
        {
          creator = Layout.User.id,
          members = new() { new() { id = Layout.User.id, role = 1 } },
          labels = new(),
          sections = new(),
          timelines = new(), 
          sheets = new() { new() { id = Mongo.RandomId(), name = "Sheet 1", possition = 1 } },
        };
      await JSRuntime.InvokeVoidAsync("setFocus", "plan_name");
      StateHasChanged();
    }
  }

  private async Task<bool> OnCreate(WorkPlanModel item)
  {
    bool _success = true;
    try
    {
      if (item != null)
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã tạo kế hoạch: " + item.name);
        navigation.NavigateTo("/work/" + item.id);
      }
      planEdit = null;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnCreate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }


  ///  <summary>
  /// Hàm xuất file Excel kế hoạch
  /// </summary>
  /// <returns></returns>
  private async Task ExportPlan(WorkPlanModel model)
  {
    Dictionary<string, List<WorkPlanModel.Task>> taskGroups = new();
    List<WorkPlanModel.Task> taskList = new();
    await JSRuntime.InvokeVoidAsync("tagline", true, "Chúng tôi đang xử lý file Excel của bạn...");
    var data = await DbWorkPlan.Get(Layout.Company.id, model.id);

    taskList = await DbWorkTask.GetListInPlan(Layout.Company.id, model.id);

    taskList = (from x in taskList orderby x.pos, x.date_end select x).ToList();
    foreach (var group in data.sections)
    {
      var tasks = taskList.Where(x => x.section_id == group.id).ToList();
      taskGroups.Add(group.id, tasks);
    }

    Dictionary<string, List<List<string>>> dataExport = new();
    var logsPlan = await DbWorkLog.GetAllListPlan(Layout.Company.id, data.id);
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    var source = shareStorage.MemberList;


    foreach (var sheet in data.sheets)
    {
      List<List<string>> sheetData = new List<List<string>>();
      sheetData.Add(new List<string>
      {
        "Nhóm công việc",
        "Tên công việc chính",
        "Tên công việc phụ",
        "Ngày tạo",
        "Ngày bắt đầu",
        "Ngày kết thúc",
        "Mô tả",
        "Thành viên",
        "Mức độ ưu tiên",
        "Trạng thái",
        "Ngày cập nhật trạng thái",
        "Nhãn dán"
      });
      dataExport.Add(sheet.name, sheetData);

      var filterred = data.sections.Where(x => x.sheet == sheet.id).ToList();

      foreach (var task in filterred)
      {
        var tasks = taskGroups[task.id];
        foreach (var item in tasks)
        {
          var logTask = logsPlan.Where(x => x.task == item.id).Last();
          var logChangedStatus = logsPlan.FirstOrDefault(x => x.task == item.id && x.name == "Cập nhật trạng thái");
          string memberName = string.Empty;
          string labelName = string.Empty;
          var priority = WorkService.Priority(item.priority);
          var status = WorkService.Status(item.status);

          foreach (var member in item.members)
          {
            var user = source.SingleOrDefault(x => x.id == member.id);
            string userName = user != null ? user.name : "";
            memberName += userName;

            if (member != item.members.Last())
              memberName += ", ";
          }

          foreach (var x in item.labels)
          {
            var label = data.labels.SingleOrDefault(l => x == l.id);
            string name = label != null ? label.name : "";
            labelName += name;

            if (x != item.labels.Last())
              labelName += ", ";
          }


          string groupTaskName = task.name;
          string taskName = string.IsNullOrEmpty(item.name) ? "" : item.name;
          string priorityName = string.IsNullOrEmpty(priority.name) ? "" : priority.name;

          string statusName = string.IsNullOrEmpty(status.name) ? "" : status.name;
          string dateStart = item.date_start > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(item.date_start)) : "";
          string dateEnd = item.date_end > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(item.date_end)) : "";

          string createLog = logTask != null ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(logTask.date)) : "";
          string detail = string.IsNullOrEmpty(item.detail) ? "" : "\"" + item.detail.Replace("\n", "\"\n\"") + "\"";
          string updatedStatusLog = logChangedStatus != null ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(logChangedStatus.date)) : "";
          // Handle sub task belong task and plan
          List<WorkPlanModel.Task> subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.id, item.id);

          sheetData.Add(new List<string>
          {
              // Nhóm công việc
              groupTaskName,
              // Tên công việc chính
              taskName,
              // Tên công việc phụ
              "",
              // Ngày tạo
              createLog,
              // Ngày bắt đầu
              dateStart,
              // Ngày kết thúc
              dateEnd,
              // Mô tả
              detail,
              // Thành viên
              memberName,
              // Mức độ ưu tiên
              priorityName,
              // Trạng thái
              statusName,
              // Ngày cập nhật trạng thái
              updatedStatusLog,
              // Nhãn dán
              labelName,
          });


          foreach (WorkPlanModel.Task sub in subTasks)
          {

            string subTaskMember = "";
            string labelSubTask = "";

            StaticModel statusSub = WorkService.Status(sub.status);
            string subTaskName = string.IsNullOrEmpty(sub.name) ? "" : sub.name;

            string subTaskStart = sub.date_start > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(sub.date_start)) : "";
            string subTaskEnd = sub.date_end > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(sub.date_end)) : "";
            string subTaskDetail = string.IsNullOrEmpty(sub.detail) ? "" : "\"" + sub.detail.Replace("\n", "\"\n\"") + "\"";
            string subTaskStatus = string.IsNullOrEmpty(statusSub.name) ? "" : status.name;

            foreach (var member in sub.members)
            {
              var user = source.SingleOrDefault(x => x.id == member.id);
              string userName = user != null ? user.name : "";
              subTaskMember += userName;

              if (member != sub.members.Last())
                subTaskMember += ", ";
            }

            foreach (var x in sub.labels)
            {
              var label = data.labels.SingleOrDefault(l => x == l.id);
              string name = label != null ? label.name : "";
              labelSubTask += name;

              if (x != sub.labels.Last())
                labelSubTask += ", ";
            }

            sheetData.Add(new List<string>
            {
              // Nhóm công việc
              "",
              // Tên công việc chính
              "",
              // Tên công việc phụ
              subTaskName,
              // Ngày tạo
              "",
              // Ngày bắt đầu
              subTaskStart,
              // Ngày kết thúc
              subTaskEnd,
              // Mô tả
              subTaskDetail,
              // Thành viên
              subTaskMember,
             // Mức độ ưu tiên
              priorityName,
              // Trạng thái
              subTaskStatus,
              "",
              // Nhãn dán
              labelSubTask
            });
          }
        }
      }

    }
    var file = Files.ExportExcelMultiSheets(dataExport, data.name);
    await JSRuntime.InvokeAsync<string>("newTab", file);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hoàn thành việc tải xuống file Excel!");
  }

  public void Dispose()
  {
    try
    {
      MessagingCenter.Unsubscribe<_PlanHeader, string>(this, "changeView");
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }
}