@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(parent.priority);
  var deadline = WorkService.TaskDeadline(model);
}
<div class="column is-full">
  <ul id="task_@model.id" class="task_list is_sub columns is-gapless is-size-7 is-fullwidth">
    <li class="column" style="width: calc(100% - 630px); box-shadow: inset 4px 0px 0px 0px @priority.color;">
      <div class="icon-text item_title pl-0">
        @if (!edit)
        {
          <a class="item_name has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")"
          @onclick="View" title="@model.name">
            @model.name
          </a>
        }
        else
        {
          <input class="input is-small is_underline item_name has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")"
          @bind-value="model.name" @onfocusout="UpdateTitle" />
        }
        @if (EditMode && !edit)
        {
          <span class="icon is_hover">
            <a class="material-icons-round is-size-7 has-text-dark" title="Thêm công việc phụ" @onclick="() => edit = true">
              edit
            </a>
          </span>
        }
        @if (deadline != null)
        {
          <span 
            class="tag"
            title="@(model.date_done == 0 ? "" : "Ngày done: " + new DateTime(model.date_done).ToString("dd/MM HH:mm"))"
            style="background: @(deadline.color + "30"); color: #555; overflow: visible;;margin-left:auto">
            @deadline.name
          </span>
        }
      </div>
    </li>
    <li class="column is-narrow" style="width: 110px;">
      @if (isTeam)
      {
        string start = new DateTime(model.date_start).ToString("dd/MM");
        string end = new DateTime(model.date_end).ToString("dd/MM");
        <div class="icon-text">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">event</i>
          </span>
          <span>@(start + " - " + end)</span>
        </div>
      }
      else
      {
        <_InputDate @bind-Start="model.date_start"
        @bind-End="model.date_end"
                                HasTime
                                Minimal
                                IsRange
                     Format="dd/MM"
                     DefaultString="Thời gian"
                     OnRangeSelect="UpdateDate" />
      }

     </li>
     <li class="column is-narrow" style="width: 130px;"></li>
     <li class="column is-narrow" style="width: 110px;">
      <_MemberList members="model.members" sources="members" isEdit="EditMode" isTask="true" isSubTask="true"
                    isRight="true" OnUpdate="UpdateMembers" />
     </li>
     <li class="column is-narrow" style="width: 80px;">
       <Dropdown CloseOnClickMenu=true>
         <Trigger>
           <a class="icon-text">
             <span class="tag @status.color" style="width: 58px;">@status.name</span>
             @if (EditMode)
             {
               <span class="icon is-small">
                 <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
               </span>
             }
           </a>
         </Trigger>
         <MenuContent>
          @if (EditMode)
          {
            @foreach (var item in WorkService.StatusSub())
            {
              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
            }
          }
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow has-text-centered" style="width: 30px;">
      @if (EditMode)
      {
        <Dropdown CloseOnClickMenu=true DropdownClass="is-right">
          <Trigger>
            <a class="icon">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </a>
          </Trigger>
          <MenuContent>
            <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa việc phụ này</a>
          </MenuContent>
        </Dropdown>
      }
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback OnView { get; set; }
  [Parameter]
  public bool EditMode { get; set; }
  [Parameter]
  public bool edit { get; set; }
  [Parameter]
  public bool isTeam { get; set; }

  private string oldTitle;

  protected override void OnInitialized()
  {
    oldTitle = model.name;
  }

  private async Task View()
  {
    await OnView.InvokeAsync();
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\".\nBạn có chắc chắn muốn thực hiện?"))
        return _success;
      await DbWorkTask.Delete(Layout.Company.id, model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa một công việc phụ thành công!");
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc phụ", model.name, parent.plan_id, parent.id, Layout.User);

      await OnUpdate.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      return false;
    }
    return _success;
  }

  private async Task<bool> UpdateDate(DateRange range)
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      return false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int id)
  {
    bool _success = true;
    try
    {
      model.status = id;
      model.date_done = model.status == 4 ? DateTime.Now.Ticks : 0;
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateLabels()
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateLabels()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var userList = shareStorage.MemberList;

      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, userList);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateTitle()
  {
    edit = false;
    if (string.IsNullOrEmpty(oldTitle))
    {
      if (string.IsNullOrEmpty(model.name))
      {
        await OnUpdate.InvokeAsync(null);
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
    else
    {
      if(string.IsNullOrEmpty(model.name))
      {
        model.name = oldTitle;
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
  }
}