@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@using ClosedXML.Excel;

@if (Layout.IsMobile)
{
  <div class="header-sticky m-0 p-0">
    <div class="header-title icon-text">
      <a class="icon has-text-link" href="/work">
        <i class="material-icons-outlined is-size-5">arrow_back</i>
      </a>
      <div class="is-size-6 has-text-dark has-text-weight-semibold" style="flex-grow: 1;">
        @(!string.IsNullOrEmpty(model.name) ? model.name : "Chi tiết Kế hoạch")
      </div>
      <div class="icon is-small dropdown is-hoverable is-right is_hover">
        <div class="dropdown-trigger">
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-6">more_horiz</i>
          </span>
        </div>
        <div class="dropdown-menu is-size-7" style="min-width: 0;">
          <div class="dropdown-content">
            <a class="dropdown-item is-hidden">
              Ghim kế hoạch
            </a>
            <a class="dropdown-item" @onclick="PinPlan">
              @(Layout.User.plans_pin.Contains(model.id) ? "Hủy ghim" : "Ghim") kế hoạch
            </a>
            <a class="dropdown-item" @onclick="HidePlan">
              @(Layout.User.plans_hide.Contains(model.id) ? "Hủy" : "Thêm vào") lưu trữ
            </a>
            <a class="dropdown-item has-text-danger" @onclick="LeavePlan">
              Rời khỏi kế hoạch
            </a>
            <a class="dropdown-item has-text-danger" @onclick="DeletePlan">
              Xóa kế hoạch
            </a>
          </div>
        </div>
      </div>
    </div>
    <div class="header-tabs">
      <ul class="columns is-mobile is-variable is-1">
        <li class="column is-one-third">
          <a class="button is-small is-fullwidth @(tab == "detail" ? "has_bg has-text-link" : "is-white")"
             href="/work/@model.id/detail">
            Tổng quan
          </a>
        </li>
        <li class="column is-one-third">
          <a class="button is-small is-fullwidth @(tab == "task" ? "has_bg has-text-link" : "is-white")"
             href="/work/@model.id/task">
            Công việc
          </a>
        </li>
        <li class="column is-one-third">
          <a class="button is-small is-fullwidth @(tab == "chart" ? "has_bg has-text-link" : "is-white")"
             href="/work/@model.id/chart">
            Thống kê
          </a>
        </li>
      </ul>
    </div>
  </div>
}
else
{
  <div>
    <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-flex is-align-items-center">
        @if (isEdit)
        {
          <div style="width: 100%" class="has-text-weight-bold has-text-dark is-size-5 text_inline">
            <input style="max-width: 100%" @onblur="EditName" @bind="model.name" type="text" class="input input_title_plan" />
          </div>
        }
        else
        {
          <Dropdown CloseOnClickMenu=true DropMenuStyle="left: 5%">
            <Trigger>
              <a style="padding-left: 0px !important; " class="icon-text hover p-2 is-flex is-align-items-center ">
                <span class="icon image is-24x24">
                  <img src="/images/modules/work.png" alt="module-image">
                </span>
                <div title="@(!string.IsNullOrEmpty(model.name) ? model.name : "Chi tiết Kế hoạch")" style="max-width: 500px; height: unset" class="has-text-weight-bold has-text-dark is-size-5 text_1_line">
                  @(!string.IsNullOrEmpty(model.name) ? model.name : "Chi tiết Kế hoạch")
                </div>
                <span class="icon has-text-dark ml-2">
                  <i class="material-icons-outlined is-size-4">expand_more</i>
                </span>
              </a>
            </Trigger>
            <MenuContent>
              @if (plans.Any())
              {
                foreach (var plan in plans)
                {
                  var link = "/work/" + plan.id + (!string.IsNullOrEmpty(tab) ? $"/{tab}" : "") + (!string.IsNullOrEmpty(view) ? $"/{view}" : "");
                  <a href="@link" class="dropdown-item">
                    <div style="max-width: 500px;" class="icon-text text_1_line">
                      <span class="icon is-small mr-2">
                        <img src="/images/modules/work.png" alt="module-image">
                      </span>
                      <span class="font_14">@plan.name</span>
                    </div>
                  </a>
                }
              }
              else
              {
                <a class="dropdown-item">
                  <div class="icon-text">
                    <span class="font_14">Không có kế hoạch nào!</span>
                  </div>
                </a>
              }
            </MenuContent>
          </Dropdown>

          <Dropdown CloseOnClickMenu=true>
            <Trigger>
              <a class="icon-text ">
                <span class="icon has-text-dark">
                  <i class="material-icons-outlined is-size-4">more_horiz</i>
                </span>
              </a>
            </Trigger>
            <MenuContent>
              @if (WorkService.RoleInPlan(model, Layout.User.id) == 1)
              {
                <a @onclick="() => isEdit = !isEdit" class="dropdown-item">
                  <div class="icon-text">
                    <span class="icon is-small mr-2">
                      <i class="material-icons-outlined is-size-6">edit</i>
                    </span>
                    <span class="font_14">Chỉnh sửa tiêu đề</span>
                  </div>
                </a>
              }
              <a class="dropdown-item">
                <div class="icon-text" @onclick="PinPlan">
                  <span class="icon is-small mr-2">
                    <i class="material-icons-outlined is-size-6">push_pin</i>
                  </span>
                  <span class="font_14">@(Layout.User.plans_pin.Contains(model.id) ? "Hủy ghim" : "Ghim") kế hoạch</span>
                </div>
              </a>
              <a class="dropdown-item">
                <div class="icon-text" @onclick="HidePlan">
                  <span class="icon is-small mr-2">
                    <i class="material-icons-outlined is-size-6">archive</i>
                  </span>
                  <span class="font_14">@(Layout.User.plans_hide.Contains(model.id) ? "Hủy" : "Thêm vào") lưu trữ</span>
                </div>
              </a>
              <hr class="m-0" />
              <a class="dropdown-item" @onclick="CopyLink">
                <div class="icon-text">
                  <span class="icon is-small mr-2">
                    <i class="material-icons-outlined is-size-6">attach_file</i>
                  </span>
                  <span class="font_14">Sao chép đường dẫn</span>
                </div>
              </a>
              <hr class="m-0" />
              <a class="dropdown-item" @onclick="HandleExportExcel">
                <div class="icon-text">
                  <span class="icon image is-rounded is-16x16 mr-2">
                    <img src="./images/excel_icon.png" alt="IMG">
                  </span>
                  <span class="font_14">Xuất file Excel</span>
                </div>
              </a>
              <a class="dropdown-item" @onclick="LeavePlan">
                <div class="icon-text has-text-danger">
                  <span class="icon is-small mr-2">
                    <i class="material-icons-outlined is-size-6">login</i>
                  </span>
                  <span class="font_14">Rời khỏi kế hoạch</span>
                </div>
              </a>
              @if (WorkService.RoleInPlan(model, Layout.User.id) == 1)
              {
                <a class="dropdown-item" @onclick="DeletePlan">
                  <div class="icon-text has-text-danger">
                    <span class="icon is-small mr-2">
                      <i class="material-icons-outlined is-size-6">delete</i>
                    </span>
                    <span class="font_14">Xóa kế hoạch</span>
                  </div>
                </a>
              }

            </MenuContent>
          </Dropdown>
        }

      </li>
      <li class="column is-narrow @(tab == "detail" ? "plan-nav-active" : "")">
        <a class="has-text-@(tab == "detail" ? "link has-text-weight-semibold" : "black")" href="/work/@model.id/detail">
          Tổng quan
        </a>
      </li>
      <li class="column is-narrow  @(tab == "task" ? "plan-nav-active" : "")">
        <a class="has-text-@(tab == "task" ? "link has-text-weight-semibold" : "black")" href="/work/@model.id/task?sheet=@sheetId">
          Công việc
        </a>
      </li>
      <li class="column is-narrow  @(tab == "chart" ? "plan-nav-active" : "")">
        <a class="has-text-@(tab == "chart" ? "link has-text-weight-semibold" : "black")" href="/work/@model.id/chart?sheet=@sheetId">
          Thống kê
        </a>
      </li>

      @if (tab == "task")
      {
        <li class="column is-narrow">
          <div style="width: 1px; height: 24px; background: #D9D9D9;"></div>
        </li>
        <li class="column is-narrow">
          <Dropdown DropdownClass="is-right" CloseOnClickMenu=true MenuClass="is-size-7">
            <Trigger>
              <a class="icon-text has-text-black">
                @if (tab != "task")
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">list</i>
                  </span>
                  <span>Chế độ xem</span>
                }
                else if (view == "gantt")
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">clear_all</i>
                  </span>
                  <span>Chế độ Gantt</span>
                }
                else if (view == "board")
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-6">dashboard</i>
                  </span>
                  <span>Chế độ Board</span>
                }
                else if (view == "calendar")
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-6">calendar_today</i>
                  </span>
                  <span>Chế độ Calendar</span>
                }
                else
                {
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">list</i>
                  </span>
                  <span>Chế độ List</span>
                }
                <span class="icon is-small has-text-grey">
                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </Trigger>
            <MenuContent>
              <a class="dropdown-item px-1 icon-text has-text-@(view == "list" ? "link" : "grey")"
              @onclick='() => ChangeView("list")'>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">list</i>
                </span>
                <span>Chế độ List</span>
              </a>
              <a class="dropdown-item px-1 icon-text has-text-@(view == "board" ? "link" : "grey")"
              @onclick='() => ChangeView("board")'>
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">dashboard</i>
                </span>
                <span>Chế độ Board</span>
              </a>
              <a class="dropdown-item px-1 icon-text has-text-@(view == "gantt" ? "link" : "grey")"
              @onclick='() => ChangeView("gantt")'>
                <span class="icon">
                  <i class="material-icons-outlined is-size-5">clear_all</i>
                </span>
                <span>Chế độ Gantt</span>
              </a>
              <a class="dropdown-item px-1 icon-text has-text-@(view == "calendar" ? "link" : "grey")"
              @onclick='() => ChangeView("calendar")'>
                <span class="icon">
                  <i class="material-icons-outlined is-size-7">calendar_today</i>
                </span>
                <span>Chế độ Calendar</span>
              </a>
            </MenuContent>
          </Dropdown>
        </li>
      }
    </ul>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel model { get; set; }
  [Parameter]
  public EventCallback<string> OnChangeView { get; set; }

  private Dictionary<string, List<WorkPlanModel.Task>> taskGroups = new();
  private List<WorkPlanModel.Task> taskList = new();
  private List<WorkPlanModel> plans = new();

  private string tab = "detail";
  private string view = "";
  private bool isEdit = false;
  private string sheetId = "";

  protected override async Task OnParametersSetAsync()
  {
    string url = navigation.Uri.Replace(navigation.BaseUri, "/");
    plans = await DbWorkPlan.GetListJoin(Layout.Company.id, Layout.User.id);
    if (model != null)
    {
      if (url.Contains(model.id + "/chart"))
        tab = "chart";
      else if (url.Contains(model.id + "/task"))
      {
        tab = "task";
        if (url.Contains("/task/board"))
          view = "board";
        else if (url.Contains("/task/gantt"))
          view = "gantt";
        else if (url.Contains("/task/calendar"))
          view = "calendar";
        else
          view = "list";
      }
    }

    if (Layout.User.plans_pin == null)
    {
      Layout.User.plans_pin = new();
    }
    if (Layout.User.plans_hide == null)
    {
      Layout.User.plans_hide = new();
    }
    sheetId = model.sheets.Count > 0 ? model.sheets.First().id : "";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && Layout.IsMobile)
    {
      await JSRuntime.InvokeVoidAsync("stickyHeaderMobile");
    }
  }

  private async Task PinPlan()
  {
    if (Layout.User.plans_pin == null)
    {
      Layout.User.plans_pin = new();
    }
    if (Layout.User.plans_hide == null)
    {
      Layout.User.plans_hide = new();
    }

    if (Layout.User.plans_pin != null && Layout.User.plans_pin.Contains(model.id))
    {
      Layout.User.plans_pin.Remove(model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy ghim kế hoạch " + model.name);
    }
    else
    {
      Layout.User.plans_pin.Add(model.id);
      Layout.User.plans_hide.Remove(model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã ghim kế hoạch " + model.name);
    }
    await DbUser.Update(Layout.Company.id, Layout.User, globalService);
  }

  private async Task<bool> HidePlan()
  {
    bool _success = true;
    try
    {
      if (Layout.User.plans_pin == null)
      {
        Layout.User.plans_pin = new();
      }
      if (Layout.User.plans_hide == null)
      {
        Layout.User.plans_hide = new();
      }
      if (Layout.User.plans_hide.Contains(model.id))
      {
        Layout.User.plans_hide.Remove(model.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hủy lưu trữ kế hoạch " + model.name);
      }
      else
      {
        Layout.User.plans_hide.Add(model.id);
        Layout.User.plans_pin.Remove(model.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã lưu trữ kế hoạch " + model.name);
      }
      await DbUser.Update(Layout.Company.id, Layout.User, globalService);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "HidePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeletePlan()
  {
    bool _success = true;
    try
    {
      if (WorkService.RoleInPlan(model, Layout.User.id) == 1)
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa kế hoạch {model.name}. Việc này sẽ khiến dữ liệu công việc trong kế hoạch bị mất.\nBạn có chắc chắn muốn thực hiện?"))
          return _success;
        // Thông báo chuông
        foreach (var user in model.members)
          await DbNotify.ForPlan(Layout.Company.id, 705, model.id, null, user.id, Layout.User.id);
        await WorkService.DeletePlan(Layout.Company.id, model.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa kế hoạch thành công!");
        navigation.NavigateTo("/work");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không có quyền xóa kế hoạch này!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeletePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> LeavePlan()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn rời khỏi kế hoạch này?"))
        return _success;
      if (await WorkService.RemoveMemberInPlan(Layout.Company.id, model.id, Layout.User.id))
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã rời khỏi kế hoạch thành công!");
      else if (WorkService.CheckPlanSingleManager(model, Layout.User.id))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn đang là quản lý duy nhất của kế hoạch, vui lòng thêm quản lý khác trước khi rời khỏi kế hoạch!");
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "LeavePlan()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task ChangeView(string value)
  {
    await OnChangeView.InvokeAsync(value);
  }

  private async Task EditName()
  {
    if (string.IsNullOrEmpty(model.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề kế hoạch!");
    else
    {
      var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
      if (model.name != old.name)
      {
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật tiêu đề", model.name, model.id, null, Layout.User);
        // Thông báo chuông
        foreach (var user in model.members)
          await DbNotify.ForPlan(Layout.Company.id, 701, model.id, null, user.id, Layout.User.id);
      }
      await DbWorkPlan.Update(Layout.Company.id, model);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin của dự án.");
      isEdit = false;
    }

  }

  private async void CopyLink()
  {
    var formatLink = navigation.BaseUri + "work/" + model.id + "/detail";
    await JSRuntime.InvokeVoidAsync("copyToClipboard", formatLink);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã copy đường dẫn kế hoạch!");
  }

  ///  <summary>
  /// Hàm xuất file Excel kế hoạch
  /// </summary>
  /// <returns></returns>
  private async Task HandleExportExcel()
  {
    await JSRuntime.InvokeVoidAsync("tagline", true, "Chúng tôi đang xử lý file Excel của bạn...");
    var data = await DbWorkPlan.Get(Layout.Company.id, model.id);
    taskList = await DbWorkTask.GetListInPlan(Layout.Company.id, model.id);

    taskGroups.Clear();
    taskList = (from x in taskList orderby x.pos, x.date_end select x).ToList();
    foreach (var group in data.sections)
    {
      var tasks = taskList.Where(x => x.section_id == group.id).ToList();
      taskGroups.Add(group.id, tasks);
    }

    Dictionary<string, List<List<string>>> dataExport = new();
    var logsPlan = await DbWorkLog.GetAllListPlan(Layout.Company.id, data.id);
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    var source = shareStorage.MemberList;


    foreach (var sheet in data.sheets)
    {
      List<List<string>> sheetData = new List<List<string>>();
      sheetData.Add(new List<string>
      {
        "Nhóm công việc",
        "Tên công việc chính",
        "Tên công việc phụ",
        "Ngày tạo",
        "Ngày bắt đầu",
        "Ngày kết thúc",
        "Mô tả",
        "Thành viên",
        "Mức độ ưu tiên",
        "Trạng thái",
        "Ngày cập nhật trạng thái",
        "Nhãn dán"
      });
      dataExport.Add(sheet.name, sheetData);

      var filterred = data.sections.Where(x => x.sheet == sheet.id).ToList();

      foreach (var task in filterred)
      {
        var tasks = taskGroups[task.id];
        foreach (var item in tasks)
        {
          var logTask = logsPlan.Where(x => x.task == item.id).Last();
          var logChangedStatus = logsPlan.FirstOrDefault(x => x.task == item.id && x.name == "Cập nhật trạng thái");
          string memberName = string.Empty;
          string labelName = string.Empty;
          var priority = WorkService.Priority(item.priority);
          var status = WorkService.Status(item.status);

          foreach (var member in item.members)
          {
            var user = source.SingleOrDefault(x => x.id == member.id);
            string userName = user != null ? user.name : "";
            memberName += userName;

            if (member != item.members.Last())
              memberName += ", ";
          }

          foreach (var x in item.labels)
          {
            var label = data.labels.SingleOrDefault(l => x == l.id);
            string name = label != null ? label.name : "";
            labelName += name;

            if (x != item.labels.Last())
              labelName += ", ";
          }


          string groupTaskName = task.name;
          string taskName = string.IsNullOrEmpty(item.name) ? "" : item.name;
          string priorityName = string.IsNullOrEmpty(priority.name) ? "" : priority.name;

          string statusName = string.IsNullOrEmpty(status.name) ? "" : status.name;
          string dateStart = item.date_start > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(item.date_start)) : "";
          string dateEnd = item.date_end > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(item.date_end)) : "";

          string createLog = logTask != null ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(logTask.date)) : "";
          string detail = string.IsNullOrEmpty(item.detail) ? "" : "\"" + item.detail.Replace("\n", "\"\n\"") + "\"";
          string updatedStatusLog = logChangedStatus != null ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(logChangedStatus.date)) : "";
          // Handle sub task belong task and plan
          List<WorkPlanModel.Task> subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.id, item.id);

          sheetData.Add(new List<string>
          {
              // Nhóm công việc
              groupTaskName,
              // Tên công việc chính
              taskName,
              // Tên công việc phụ
              "",
              // Ngày tạo
              createLog,
              // Ngày bắt đầu
              dateStart,
              // Ngày kết thúc
              dateEnd,
              // Mô tả
              detail,
              // Thành viên
              memberName,
              // Mức độ ưu tiên
              priorityName,
              // Trạng thái
              statusName,
              // Ngày cập nhật trạng thái
              updatedStatusLog,
              // Nhãn dán
              labelName,
          });


          foreach (WorkPlanModel.Task sub in subTasks)
          {

            string subTaskMember = "";
            string labelSubTask = "";

            StaticModel statusSub = WorkService.Status(sub.status);
            string subTaskName = string.IsNullOrEmpty(sub.name) ? "" : sub.name;

            string subTaskStart = sub.date_start > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(sub.date_start)) : "";
            string subTaskEnd = sub.date_end > 0 ? string.Format("{0:dd/MM/yyyy - HH:mm}", new DateTime(sub.date_end)) : "";
            string subTaskDetail = string.IsNullOrEmpty(sub.detail) ? "" : "\"" + sub.detail.Replace("\n", "\"\n\"") + "\"";
            string subTaskStatus = string.IsNullOrEmpty(statusSub.name) ? "" : status.name;

            foreach (var member in sub.members)
            {
              var user = source.SingleOrDefault(x => x.id == member.id);
              string userName = user != null ? user.name : "";
              subTaskMember += userName;

              if (member != sub.members.Last())
                subTaskMember += ", ";
            }

            foreach (var x in sub.labels)
            {
              var label = data.labels.SingleOrDefault(l => x == l.id);
              string name = label != null ? label.name : "";
              labelSubTask += name;

              if (x != sub.labels.Last())
                labelSubTask += ", ";
            }

            sheetData.Add(new List<string>
            {
              // Nhóm công việc
              "",
              // Tên công việc chính
              "",
              // Tên công việc phụ
              subTaskName,
              // Ngày tạo
              "",
              // Ngày bắt đầu
              subTaskStart,
              // Ngày kết thúc
              subTaskEnd,
              // Mô tả
              subTaskDetail,
              // Thành viên
              subTaskMember,
             // Mức độ ưu tiên
              priorityName,
              // Trạng thái
              subTaskStatus,
              "",
              // Nhãn dán
              labelSubTask
            });
          }
        }
      }

    }
    var file = Files.ExportExcelMultiSheets(dataExport, data.name);
    await JSRuntime.InvokeAsync<string>("newTab", file);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã hoàn thành việc tải xuống file Excel!");
  }
}