@page "/work/{PlanId}/chart"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>Thống kê kế hoạch</PageTitle>

<section id="page_fwork" class="main_content plan  @(url == "/work" ? "is_nav" : "is_data") @(Layout.User.custom.sidebar_fwork  ? "" : "is-less")">
  @if (!Layout.IsMobile || (url == "/work"))
  {
    <div class="card is_nav @(Layout.User.custom.sidebar_fwork ? "" : "is-less")" style="height:100%; position: relative; border-radius: unset">
      <_PlanSidebar navLess="Layout.User.custom.sidebar_fwork" />
      @if (Layout.User.custom.sidebar_fwork)
      {
        <div class="sidebar-plan-icon">
          <div title="Đóng lại '['" class="sidebar-plan-icon-container" @onclick="ToogleSidebar">
            <span class="icon is-size-5 has-text-white">
              <i class="material-icons-outlined">navigate_before</i>
            </span>
          </div>
        </div>
      }
      else
      {
        <div class="sidebar-plan-icon">
          <div title="Mở ra ']'" class="sidebar-plan-icon-container is-white" @onclick="ToogleSidebar">
            <span class="icon is-size-5 has-text-grey">
              <i class="material-icons-outlined">navigate_next</i>
            </span>
          </div>
        </div>
      }
    </div>
  }
  @if (!Layout.IsMobile || url != "/work")
  {
    <div style="max-height: calc(100% - 60px);" class="is_expanded is_data scrolly">
      @if (model != null && string.IsNullOrEmpty(model.id))
      {
        <_PlanHeader model="model" OnChangeView="ChangeView"  />
      }
      else if (model != null)
      {
        <_PlanHeader model="model" OnChangeView="ChangeView"  />

        <div class="mb-5">
          <h1 class="title is-5 mb-2 is-size-6-mobile has-text-info is-uppercase">THỐNG KÊ CÔNG VIỆC</h1>
          <div class="inner_section">
            @if(taskList.Count == 0)
            {
              <div class="has-text-centered font_16 has-text-weight-medium">Không có công việc nào!</div>
            }
            else
            {
              <ul class="columns is-variable is-2">
                <li class="column is-half @(Layout.IsMobile ? "" : "pl-6")">
                  <div style="height: 150px;">
                    <canvas id="chartPlan_date" height="150"></canvas>
                  </div>
                  <div class="has-text-info pt-2 pl-6">Tỉ lệ đúng hạn</div>
                </li>
                <li class="column is-half @(Layout.IsMobile ? "" : "pl-6")">
                  <div style="height: 150px;">
                    <canvas id="chartPlan_done" height="150"></canvas>
                  </div>
                  <div class="has-text-info pt-2 pl-6">Tỉ lệ hoàn thành</div>
                </li>
              </ul>              
            }
          </div>
        </div>

        <div class="mb-5">
          <h1 class="title is-5 mb-2 is-size-6-mobile has-text-info is-uppercase">THỐNG KÊ NHÓM CÔNG VIỆC</h1>

          <div class="inner_section">
            @if (taskList.Count == 0)
            {
              <div class="has-text-centered font_16 has-text-weight-medium">Không có nhóm công việc nào!</div>
            }
            else
            {
              if (Layout.IsMobile)
              {
                foreach (var item in model.sections)
                {
                  var tasks = taskList.Where(x => x.section_id == item.id).ToList();
                  var report = WorkService.ReportTasks(tasks);
                  var value = Shared.Progress(report.done, report.total);

                  <div class="py-2 is-size-7">
                    <div class="has-text-weight-semibold font_14">@item.name</div>
                    <div class="icon-text mt-1">
                      <span class="icon is-small has-text-success">
                        <i class="material-icons-outlined is-size-6">done</i>
                      </span>
                      <span class="has-text-grey" style="width: 130px;">Công việc đúng hạn:</span>
                      <span class="has-text-weight-medium">@report.ontime</span>
                    </div>
                    <div class="icon-text mt-1">
                      <span class="icon is-small has-text-danger">
                        <i class="material-icons-outlined is-size-6">error_outline</i>
                      </span>
                      <span class="has-text-grey" style="width: 130px;">Công việc trễ hạn:</span>
                      <span class="has-text-weight-medium">@report.late</span>
                    </div>
                    <div class="icon-text mt-1">
                      <span class="icon is-small has-text-success">
                        <i class="material-icons-outlined is-size-6">done_all</i>
                      </span>
                      <span class="has-text-grey" style="width: 130px;">Tỉ lệ hoàn thành:</span>
                      <span class="has-text-weight-medium">@Shared.ConvertNumber(value)%</span>
                    </div>
                  </div>
                }
              }
              else
              {
                <ul class="columns is-multiline is-vcentered is-variable is-1 mb-0 has-text-grey is-size-7">
                  <li class="column is-5">
                    Nhóm công việc
                  </li>
                  <li class="column is-2 has-text-centered">
                    Công việc đúng hạn
                  </li>
                  <li class="column is-2 has-text-centered">
                    Công việc trễ hạn
                  </li>
                  <li class="column is-3">
                    Tỉ lệ hoàn thành
                  </li>
                </ul>
                <ul class="columns is-multiline is-vcentered is-variable is-1">
                  @foreach (var item in model.sections)
                  {
                    var tasks = taskList.Where(x => x.section_id == item.id).ToList();
                    var report = WorkService.ReportTasks(tasks);
                    var value = Shared.Progress(report.done, report.total);
                    var color = Shared.ProgressColor(value);
                    <li class="column is-full">
                      <hr class="m-0">
                    </li>
                    <li class="column is-5">
                      @item.name
                    </li>
                    <li class="column is-2 has-text-centered">
                      @report.ontime
                    </li>
                    <li class="column is-2 has-text-centered">
                      @report.late
                    </li>
                    <li class="column is-3">
                      <div class="progress_has_value">
                        <progress class="progress is-small @color" value="@value" max="100"></progress>
                        <span class="has-text-link">@Shared.ConvertNumber(value)%</span>
                      </div>
                    </li>
                  }
                </ul>
              }
            }
          </div>
        </div>

        <div>
          <ul class="columns is-vcentered is-variable is-2 mb-2">
            <li class="column">
              <h1 class="title is-5 is-size-6-mobile has-text-info is-uppercase">THỐNG KÊ THEO THÀNH VIÊN</h1>
            </li>
            <li class="column is-one-quarter">
              <div class="control has-icons-right">
                <input @bind="filterStaff" class="input is-rounded is-small is_bg" type="text"
                       placeholder="Tên nhân viên..." @onkeydown="FilterStaff">
                <span class="icon is-right is-small">
                  <i class="material-icons-outlined is-size-5">search</i>
                </span>
              </div>
            </li>
          </ul>

          <div class="inner_section">
            <ul class="columns is-multiline is-vcentered is-variable is-1 mb-0 has-text-grey is-size-7 is-hidden-mobile">
              <li class="column is-5">
                Thành viên
              </li>
              <li class="column is-1 has-text-centered">
                Tham gia
              </li>
              <li class="column is-1 has-text-centered">
                Hoàn thành
              </li>
              <li class="column is-2 has-text-centered">
                Tỉ lệ hoàn thành
              </li>
              <li class="column is-1 has-text-centered">
                Đúng hạn
              </li>
              <li class="column is-2 has-text-centered">
                Tỉ lệ đúng hạn
              </li>
            </ul>
            <ul class="columns is-multiline is-vcentered is-variable is-1">
              @foreach (var item in members)
              {
                if (Shared.SearchKeyword(filterStaff, item.name))
                {
                  var tasks = taskList.Where(x => x.members.Where(m => m.id == item.id).Count() > 0).ToList();
                  var report = WorkService.ReportTasks(tasks);
                  var done = Shared.Progress(report.done, report.total);
                  var ontime = Shared.Progress(report.ontime, report.total);

                  <li class="column is-full">
                    <hr class="m-0 is-hidden-mobile">
                  </li>
                  <li class="column is-5">
                    <div class="user_item">
                      <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
                      <div>
                        <p class="has-text-weight-semibold has-text-info font_14">
                          @item.name
                        </p>
                        <p class="text_1_line has-text-grey is-size-7">
                          @item.departments_name
                        </p>
                      </div>
                    </div>
                  </li>
                  @if (Layout.IsMobile)
                  {
                    <li class="column is-size-7">
                      <div class="icon-text">
                        <span class="icon has-text-success">
                          <i class="material-icons-outlined is-size-6">done_all</i>
                        </span>
                        <span class="has-text-grey" style="flex-grow: 1;">Công việc hoàn thành:</span>
                        <span class="has-text-centered" style="width: 50px;">
                          @report.done/@report.total
                        </span>
                        <span class="has-text-centered" style="width: 50px;">
                          @Shared.ConvertNumber(done)%
                        </span>
                      </div>
                      <div class="icon-text mt-1">
                        <span class="icon has-text-success">
                          <i class="material-icons-outlined is-size-6">done</i>
                        </span>
                        <span class="has-text-grey" style="flex-grow: 1;">Công việc đúng hạn:</span>
                        <span class="has-text-centered" style="width: 50px;">
                          @report.ontime/@report.total
                        </span>
                        <span class="has-text-centered" style="width: 50px;">
                          @Shared.ConvertNumber(ontime)%
                        </span>
                      </div>
                    </li>
                  }
                  else
                  {
                    <li class="column is-1 has-text-centered">
                      @report.total
                    </li>
                    <li class="column is-1 has-text-centered">
                      @report.done
                    </li>
                    <li class="column is-2 has-text-centered">
                      @Shared.ConvertNumber(done)%
                    </li>
                    <li class="column is-1 has-text-centered">
                      @report.ontime
                    </li>
                    <li class="column is-2 has-text-centered">
                      @Shared.ConvertNumber(ontime)%
                    </li>
                  }
                }
              }
            </ul>
          </div>
        </div>
      }
      else
      {
        <div class="card p-6 has-text-centered">
          Không tìm thấy kế hoạch
        </div>
      }
    </div>
    <_PlanSheets currentSheet="currentSheet"
                 roleManager="roleManager"
                 model="model"
                 OnChangedSheet="OnChangedSheet"
                 OnDeleteSheet="OnDeleteSheet" />
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string PlanId { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "sheet")]
  public string? sheet { get; set; }


  private string url = string.Empty;
  private WorkPlanModel model = new();
  private List<WorkPlanModel.Task> taskList = new();
  private List<MemberModel> members = new();
  private string filterStaff = string.Empty;
  private Dictionary<string, List<WorkPlanModel.Task>> taskGroups = new();
  private WorkPlanModel.Sheet currentSheet = new();
  private bool roleManager = false;


  protected override async Task OnParametersSetAsync()
  {
    url = navigation.Uri.Replace(navigation.BaseUri, "/");
    model = await DbWorkPlan.Get(Layout.Company.id, PlanId);
    taskList = await DbWorkTask.GetListInPlan(Layout.Company.id, model.id);
    SplitTaskList();
    if (model != null)
    {
      if (RoleView().Result)
      {
        if (!string.IsNullOrEmpty(sheet))
          model.sections = model.sections.Where(x => x.sheet == sheet).ToList();
        else
        {
          sheet = model.sheets.FirstOrDefault()?.id;
          model.sections = model.sections.Where(x => x.sheet == sheet).ToList();
        }
        currentSheet = model.sheets.FirstOrDefault(x => x.id == sheet);

        // Danh sách thành viên
        members = await GetMembers();
        // Thống kê công việc
        await ChartOverView();
        // Cập nhật thống kê
        await DbWorkReport.Update(Layout.Company.id, PlanId);
        // Quyền trong kế hoạch
        roleManager = WorkService.RoleInPlan(model, Layout.User.id) == 1;
      }
      else
      {
        model.id = string.Empty;
        model.detail = "Bạn không có quyền xem chi tiết kế hoạch này!";
      }
    }
  }

  private async Task<bool> RoleView()
  {
    try
    {
      // Kiểm tra quyền xem kế hoạch
      if (WorkService.ViewInPlan(model, Layout.User.id))
        return true;
      // Kiểm tra theo quyền cấp trên có cấp dưới tham gia
      var departmentAll = await DbDepartment.GetAll(Layout.Company.id);
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      foreach (var member in model.members)
      {
        var staff = shareStorage.MemberList.FirstOrDefault(x => x.id == member.id);
        if (staff != null && await DbDepartment.CheckManagerRole(Layout.Company.id, staff, Layout.User.id, departmentAll))
          return true;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "RoleView()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    return false;
  }

  private async Task<List<MemberModel>> GetMembers()
  {
    var listId = model.members.Select(x => x.id).ToList();
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    return shareStorage.MemberList.Where(x => listId.Contains(x.id)).ToList();
  }

  private async Task FilterStaff(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
      await JSRuntime.InvokeVoidAsync("console.log", "Tìm: " + filterStaff);
    else if (args.Key == "Escape")
    {
      filterStaff = string.Empty;
      await JSRuntime.InvokeVoidAsync("console.log", "Tìm: " + filterStaff);
    }
  }

  private async Task ChartOverView()
  {
    var sections = model.sections.Where(x => x.sheet == sheet).ToList();
    taskList = taskList.Where(x => sections.Where(s => s.id == x.section_id).Count() > 0).ToList();
    var report = WorkService.ReportTasks(taskList);
    if (taskList != null)
    {
      var colors = "#435cab,#e47c83,#f6d248";
      var labels = ("Đúng hạn,Trễ hạn,Đang thực hiện").Split(",");
      var values = new int[3];
      values[0] = report.ontime;
      values[1] = report.late;
      values[2] = report.total - report.ontime - report.late;
      await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartPlan_date", labels, values, colors);
    }
    // Thống kê hoàn thành
    if (taskList != null)
    {
      var colors = "#435cab,#e47c83";
      var labels = ("Hoàn thành,Chưa hoàn thành").Split(",");
      var values = new int[2];
      values[0] = report.done;
      values[1] = report.total - report.done;
      await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartPlan_done", labels, values, colors);
    }
  }

  private async Task ToogleSidebar()
  {
    Layout.User.custom.sidebar_fwork = !Layout.User.custom.sidebar_fwork;

    await DbUser.Update(Layout.Company.id, Layout.User, globalService);
  }


  private void SplitTaskList()
  {
    taskGroups.Clear();
    taskList = (from x in taskList orderby x.pos, x.date_end select x).ToList();
    foreach (var group in model.sections)
    {
      var tasks = taskList.Where(x => x.section_id == group.id).ToList();
      if (tasks.Count == 0)
        tasks = new() { new() { name = "Chưa có công việc", section_id = group.id } };

      taskGroups.Add(group.id, tasks);
    }
  }

  private async Task ChangeView(string value)
  {
    if (value == "gantt")
      await JSRuntime.InvokeVoidAsync("dragScrollX");
    navigation.NavigateTo($"/work/{model.id}/task/{value}?sheet={sheet}");
  }
  

  private void OnChangedSheet(string sheetId)
  {
    sheet = sheetId;
    currentSheet = model.sheets.SingleOrDefault(x => x.id == sheetId);
    navigation.NavigateTo($"/work/{model.id}/chart?sheet={sheet}");
  }


  private async Task OnDeleteSheet(bool isConfirm)
  {
    if (isConfirm)
    {
      int index = model.sheets.FindIndex(x => x.id == currentSheet.id);
      string nextSheet = index == 0 ? model.sheets[index + 1].id : model.sheets[index - 1] != null ? model.sheets[index - 1].id : model.sheets[index + 1].id;
      if (await WorkService.DeleteSheet(Layout.Company.id, model.id, currentSheet.id))
      {
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa sheet thành công!");
        OnChangedSheet(nextSheet);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
    }
  }

}