@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@using System.IO

@if (Layout.IsMobile)
{
  <div class="field is-grouped mb-2">
    <div class="control is-expanded is-size-6 has-text-weight-medium">
      Files lưu trữ
    </div>
  </div>
}

<div class="scrolly py-1 is-mobile" style="flex: 1 1 0%;">
  @foreach (var day in fileDates)
  {
    var date = new DateTime(day);
    var dateFiles = files.Where(x => new DateTime(x.date).Date.Ticks == day);
    if(dateFiles.Count() > 0)
    {
      <div class="field is-grouped mb-4">
        <div class="control">
          @date.ToString("dd/MM/yyyy")
        </div>
        <div class="control is-expanded">
          <hr class="my-0"/>
        </div>
      </div>
      <div class="columns is-variable is-2 is-vcentered is-multiline">
        @foreach(var item in dateFiles)
        {
          var extension = Path.GetExtension(item.name);
          <div class="column is-narrow">
            <a class="folder" href="@item.link">
              <img src="/images/icon/extension/@StorageService.GetIconFromExtension(extension)" alt="file icon" class="mb-2"/>
              <p class="text_1_line has-text-grey-dark">
                @item.name
              </p>
              <span class="has-text-grey">
                @SizeToString(item.size)
              </span>
            </a>
          </div>
        }
      </div>
    }
  }
  @if(fileDates.Count == 0) 
  {
    <div class="is-italic is-size-7">
      Chưa có file lưu trữ
    </div>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }

  private List<FileModel> files = new();
  private List<FileModel> fileLog = new();
  private List<long> fileDates = new();
  private long unit = 1024;

  protected override async Task OnInitializedAsync()
  {
    await GetData();
  }

  private async Task GetData()
  {
    var tasks = await DbWorkTask.GetListInTask(Layout.Company.id, parent.plan_id, parent.id);
    var subTaskFiles = tasks.SelectMany(x => x.files).ToList();
    var comments = await DbWorkComment.GetList(Layout.Company.id, parent.plan_id, parent.id, true);
    var commentTaskFiles = comments.SelectMany(x => x.files).ToList();

    var fileLink = new List<string>() { };

    fileLink.AddRange(parent.files);
    fileLink.AddRange(subTaskFiles);
    fileLink.AddRange(commentTaskFiles);

    fileLink = fileLink.Distinct().ToList();

    fileLog = await DbStorageLog.GetList(Layout.Company.id);

    files = fileLog.Where(x => fileLink.Contains(x.link) && !x.is_delete).ToList();

    fileDates = files.GroupBy(x => x.date).Select(x => new DateTime(x.Key).Date.Ticks).ToList();
    fileDates = fileDates.Distinct().ToList();
    fileDates = fileDates.OrderByDescending(x => x).ToList();
  }

  private string SizeToString(double size)
  {
    if (size >= unit * 1000 * 1000)
      return string.Format("{0:0.00} GB", size / (unit * 1000 * 1000));
    else if (size >= unit * 1000)
      return string.Format("{0:0.00} MB", size / (unit * 1000));
    else
      return string.Format("{0:0.00} KB", size / unit);
  }
}
