@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(parent.priority);
  var deadline = WorkService.TaskDeadline(model);
  long dateS = model.date_start;
  long dateE = model.date_end;
}

<div class="task_board card px-3 py-2 is-size-7">
  <ul class="columns is-multiline is-vcentered is-variable is-1">
    <li class="column is-10">
      @if(deadline != null)
      {
        <span class="tag" style="background: @(deadline.color + "30"); color: #555;">
          @deadline.name
        </span>
      }
    </li>
    <li class="column is-2 has-text-right">
      @if(isEdit)
      {
        <div class="dropdown is-hoverable is-right">
          <div class="dropdown-trigger">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </span>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa việc phụ này</a>
            </div>
          </div>
        </div>
      }
    </li>
    <li class="column is-full">
      @if (!edit)
      {
        <a class="has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")"
        @onclick="View">@model.name</a>
        @if (EditMode)
        {
          <span class="icon">
            <span class="material-icons-outlined is-size-7 ml-1" @onclick="() => edit= true">
              edit
            </span>
          </span>
        }
      }
      else
      {
        <input class="input is-small is_underline has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")" @onfocusout="UpdateTitle" @bind="@model.name"/>
      }
    </li>
    <li class="column is-half">
      <_InputDate 
        @bind-Start="model.date_start"
        @bind-End="model.date_end"
        HasTime
        Minimal
        IsRange
        Format="dd/MM"
        DefaultString="Thời gian"
        OnRangeSelect="UpdateDate" />
     </li>
    <li class="column is-half has-text-right">
      <_MemberList members="model.members" sources="members" isRight="true" isEdit="isEdit" 
        isTask="true" isSubTask="true" OnUpdate="UpdateMembers" />
    </li>
    <li class="column is-narrow">
      <div class="dropdown @(toggleStatus ? "is-active" : "")">
        <div class="dropdown-trigger">
          <a class="icon-text" @onclick="ToggleStatus">
            <span class="tag @status.color" style="width: 58px;">@status.name</span>
            <span class="icon is-small">
              <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
            </span>
          </a>
        </div>
        @if(isEdit)
        {
          <div class="dropdown-menu">
            <div class="dropdown-content">
              @foreach (var item in WorkService.StatusSub())
              {
                <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
              }
            </div>
          </div>
        }
      </div>
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback OnView { get; set; }
  [Parameter]
  public bool EditMode { get; set; }
  [Parameter]
  public bool edit { get; set; }

  private bool toggleStatus = false;
  private string oldTitle;

  private async Task ToggleStatus()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleStatus = !toggleStatus;
  }

  private async Task View()
  {
    await OnView.InvokeAsync();
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\".\nBạn có chắc chắn muốn thực hiện?"))
        return _success;
      await DbWorkTask.Delete(Layout.Company.id, model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc phụ", model.name, parent.plan_id, parent.id, Layout.User);
      await OnUpdate.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateDate(DateRange range)
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int id)
  {
    bool _success = true;
    try
    {
      toggleStatus = false;
      model.status = id;
      model.date_done = model.status == 4 ? DateTime.Now.Ticks : 0;
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateLabels()
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateLabels()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var userList = shareStorage.MemberList;

      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      await DbWorkTask.Update(Layout.Company.id, model);
      // Lưu lịch sử
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, userList);

      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateTitle()
  {
    edit = false;
    if (string.IsNullOrEmpty(oldTitle))
    {
      if (string.IsNullOrEmpty(model.name))
      {
        await OnUpdate.InvokeAsync(null);
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
    else
    {
      if (string.IsNullOrEmpty(model.name))
      {
        model.name = oldTitle;
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
  }
}