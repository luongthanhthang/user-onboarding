@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(model.priority);
  var toggle = toggleList.Contains(model.id);
  var deadline = WorkService.TaskDeadline(model);
  long dateS = model.date_start;
  long dateE = model.date_end;
}

<div id="task_@model.id" class="task_board card p-4 mb-3 is-size-7">
  <ul class="columns is-multiline is-vcentered is-variable is-1">
    <li class="column">
      @if (editRole)
      {
        <Dropdown CloseOnClickMenu=true>
          <Trigger>
            <a class="icon-text">
              <span class="tag" style="background: @(priority.color + "30"); color: @priority.color;">
                @(priority.id == 0 ? "Chọn mức độ" : priority.name)
              </span>
              <span class="icon is-small">
                <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
              </span>
            </a>
          </Trigger>
          <MenuContent>
            @foreach (var item in WorkService.Priority())
            {
              <a class="dropdown-item" style="color: @item.color;" @onclick="() => ChangePriorty(item.id)">@item.name</a>
            }
          </MenuContent>
        </Dropdown>
      }
      else
      {
        if (model.priority > 0)
        {
          <span class="tag" style="background: @(priority.color + "30"); color: @priority.color;">@priority.name</span>
        }
        else
        {
          <span class="tag" style="background:transparent">Không có</span>
        }
      }
      @if(deadline != null)
      {
        <span class="tag" style="background: @(deadline.color + "30"); color: #555;">@deadline.name</span>
      }
    </li>
    <li class="column is-narrow">
      @if(editRole)
      {
        <div class="dropdown is-hoverable is-right">
          <div class="dropdown-trigger">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </span>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <a class="dropdown-item" @onclick="ViewSub">Tạo công việc phụ</a>
              <a class="dropdown-item" @onclick="AddTodo">Tạo Todolist liên kết</a>
              <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa công việc này</a>
            </div>
          </div>
        </div>
      }
    </li>
    <li class="column is-full">
      <div class="icon-text">
        @if(!edit)
        {
          <a class="is-block font_14 has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")"
          @onclick="Edit">@model.name</a>
          @if(editRole)
          {
            <span class="icon">
              <span class="material-icons-outlined is-size-7 ml-1" @onclick="() => edit= true">
                edit
              </span>
            </span>
          }
        }
        else
        {
          <input class="input is-small is_underline is-block font_14 has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")" @onfocusout="UpdateTitle" @bind="@model.name"/>
        }
        @if (editRole)
        {
          <span class="icon">
            <span class="material-icons-outlined is-size-7 ml-1" @onclick="AddSub">
              add
            </span>
          </span>
        }
      </div>
    </li>
    <li class="column is-half">
      <_InputDate 
        @bind-Start="model.date_start"
        @bind-End="model.date_end"
        HasTime
        Minimal
        IsRange
        Format="dd/MM"
        DefaultString="Thời gian"
        OnRangeSelect="UpdateDate" />
    </li>
    <li class="column is-half has-text-right">
      <_MemberList members="model.members" sources="members" isRight="true" isEdit="editRole" isTask="true" 
        OnUpdate="UpdateMembers" />
    </li>
    <li class="column is-full">
      <div class="dropdown is-right @(toggleStatus ? "is-active" : "")">
        <div class="dropdown-trigger">
          <a class="icon-text" @onclick="ToggleStatus">
            <span class="tag @status.color">@status.name</span>
            <span class="icon is-small">
              <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
            </span>
          </a>
        </div>
        @if(editRole)
        {
          <div class="dropdown-menu">
            <div class="dropdown-content">
              @foreach (var item in WorkService.Status())
              {
                <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
              }
            </div>
          </div>
        }
      </div>
    </li>
    @if(model.sub_task > 0)
    {
      <li class="column is-full">
        <a class="icon-text" @onclick="Toggle">
          <span>Công việc phụ</span>
          <span class="icon-text">
            <i class="material-icons-outlined is-size-6">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
          </span>
        </a>
      </li>
      @if(toggle)
      {
        <li class="column is-full">
          @foreach (var child in subTasks)
          {
            <_TaskCardChild 
              model="child" 
              parent="model" 
              members="members" 
              isEdit="@(editRole ? true : child.members.Find(x => x.id == Layout.User.id) != null)"
              edit="newList.Contains(child.id)"
              OnUpdate="e => UpdateSubTasks(e)" OnView="ViewSub" />
          }
        </li>
      }
    }
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public bool showPlan { get; set; }
  [Parameter]
  public List<string> toggleList { get; set; } = new();
  [Parameter]
  public EventCallback<string> OnToggle { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnAddSub { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnTodolist { get; set; }
  [Parameter]
  public bool edit { get; set; }

  private List<string> newList = new();
  private string oldTitle;
  private bool togglePriority = false;
  private bool toggleStatus = false;
  private List<WorkPlanModel.Task> subTasks = new();

  protected override void OnInitialized()
  {
    oldTitle = model.name;
  }

  private async Task<bool> Toggle()
  {
    bool _success = true;
    try
    {
      if (toggleList.Contains(model.id))
        subTasks = new();
      else
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await OnToggle.InvokeAsync(model.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Toggle()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task AddSub()
  {
    var item = new WorkPlanModel.Task()
      {
        id = Mongo.RandomId(),
        name = "Công việc phụ mới",
        status = 1,
        plan_id = plan.id,
        parent_id = model.id,
        members = new()
        {
          new WorkPlanModel.Member()
          {
            id = Layout.User.id,
            role = 2,
          }
        },
      };

    if (Layout.IsMobile)
      subTasks.Insert(0, item);
    else
      subTasks.Add(item);

    if (!toggleList.Contains(model.id))
      toggleList.Add(model.id);

    newList.Add(item.id);

    await UpdateSubTasks(item, true);
  }

  private async Task TogglePriority()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    togglePriority = !togglePriority;
  }

  private async Task ToggleStatus()
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    toggleStatus = !toggleStatus;
  }

  private async Task Edit()
  {
    await OnEdit.InvokeAsync(model);
  }

  private async Task ViewSub()
  {
    await OnAddSub.InvokeAsync(model);
  }

  private async Task AddTodo()
  {
    await OnTodolist.InvokeAsync(model);
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\". Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return true;
      // Thông báo chuông
      foreach (var user in plan.members)
        await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, model.id, user.id, Layout.User.id);
      // Xóa công việc
      await DbWorkTask.Delete(Layout.Company.id, model.id);
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", model.name, model.plan_id, null, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
      await OnUpdate.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateDate(DateRange range)
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thực hiện",
        string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(model.date_start), new DateTime(model.date_end)), model.plan_id, model.id, Layout.User);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangePriorty(int id)
  {
    bool _success = true;
    try
    {
      togglePriority = false;
      model.priority = id;
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.CreateLog(Layout.Company.id, "Cập nhật mức độ ưu tiên",
        WorkService.Priority(model.priority).name, model.plan_id, model.id, Layout.User);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangePriorty()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int statusId)
  {
    bool _success = true;
    try
    {
      toggleStatus = false;
      var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, model, statusId);
      if (statusId == 4)
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, message);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var userList = shareStorage.MemberList;

      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, userList);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateSubTasks(WorkPlanModel.Task item, bool create = false)
  {
    bool _success = true;
    try
    {
      if (item != null)
      {
        if (newList.Contains(item.id) && !create)
          newList.Remove(item.id);
        var check = await DbWorkTask.Get(Layout.Company.id, item.id);

        if (check == null)
        {
          var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
          var userList = shareStorage.MemberList;

          var memberIds = plan.members.Select(x => x.id);
          var editMembers = userList.Where(x => memberIds.Contains(x.id)).ToList();

          await DbWorkTask.Create(Layout.Company.id, item);
          await WorkService.CreateLog(Layout.Company.id, "Thêm công việc phụ", item.name, model.plan_id, model.id, Layout.User);
          await WorkService.LogTaskMembers(Layout.Company.id, null, item, Layout.User, editMembers);
        }
      }

      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await WorkService.UpdateSubTaskCount(Layout.Company.id, model.id, subTasks.Count);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateSubTasks()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateTitle()
  {
    edit = false;
    if (string.IsNullOrEmpty(oldTitle))
    {
      if (string.IsNullOrEmpty(model.name))
      {
        await OnUpdate.InvokeAsync(null);
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
    else
    {
      if (string.IsNullOrEmpty(model.name))
      {
        model.name = oldTitle;
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
  }
}
