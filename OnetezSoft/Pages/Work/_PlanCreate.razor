@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@if(model != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section style="overflow: visible" id="plan_popup" class="modal-card is-medium">
      @if(Layout.IsMobile)
      {
        <section class="modal-card-head">
          <div class="modal-card-title">
            <div class="icon-text">
              <a class="icon has-text-link" @onclick="Cancel">
                <i class="material-icons-outlined is-size-5">arrow_back</i>
              </a>
              <h1 class="is-size-6 has-text-dark has-text-weight-semibold">Tạo kế hoạch mới</h1>
            </div>
          </div>
        </section>
        <section class="modal-card-body is-size-7">
          <div class="card p-4">
            <div class="field">
              <div class="control has-icons-left">
                <input @bind="model.name" id="plan_name" class="input has-text-weight-semibold is_bg" type="text" 
                  placeholder="Nhập tiêu đề kế hoạch"> 
                <span class="icon is-left has-text-dark">
                  <i class="material-icons-outlined is-size-5">edit</i>
                </span>
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Thành viên:
              </div>
              <div class="control is-expanded">
                <_MemberPlan members="model.members" sources="shareStorage.MemberList" isEdit="true" OnUpdate="UpdateMembers" />
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Ngày kết thúc:
              </div>
              <div class="control is-expanded">
                <DateRangePicker @bind-StartDate="dateE" SingleDatePicker="true" Opens="SideType.Center">
                  <PickerTemplate>
                    <a id="@context.Id" @onclick="context.Toggle" class="icon-text">
                      <span class="icon is-small mr-1">
                        <i class="material-icons-outlined is-size-6">calendar_today</i>
                      </span>
                      @if (context.TStartDate != null)
                      {
                        <span>@context.TStartDate.Value.ToString("dd/MM/yyyy")</span>
                      }
                      else
                      {
                        <span>dd/mm/yyyy</span>
                      }
                    </a>
                  </PickerTemplate>
                </DateRangePicker>
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Chế độ bảo mật:
              </div>
              <div class="control is-expanded">
                <div class="dropdown is-hoverable">
                  <div class="dropdown-trigger">
                    <a class="icon-text">
                      <span>@(model.is_private ? "Riêng tư" : "Công khai")</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </div>
                  <div class="dropdown-menu">
                    <div class="dropdown-content">
                      <a class="dropdown-item" @onclick="() => model.is_private = true">Riêng tư</a>
                      <a class="dropdown-item" @onclick="() => model.is_private = false">Công khai</a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            @if (ProductService.CheckStorage(Layout.Company))
            {
              <div class="field is-grouped">
                <div class="control has-text-grey" style="width: 120px;">Tài nguyên:</div>
                <div class="control">
                  <FileUpload Path="work/detail" Cloud="true" Multiple="true" Small="true" OnUpload="x => model.files.AddRange(x)" />
                </div>
              </div>
              <FileViews Delete="true" Values="model.files" />
            }
            <div class="field">
              <div class="control has-text-grey mb-2">Mô tả kế hoạch</div>
              <div class="control">
                <textarea @bind="model.detail" class="textarea is-small is_bg" placeholder="Nhập mô tả kế hoạch..." rows="10" />
              </div>
            </div>
            <div class="has-text-right">
              <a class="button is-link is-small" @onclick="Update">
                <span class="icon">
                  <i class="material-icons-round is-size-6">done</i>
                </span>
                <span>Hoàn tất</span>
              </a>
              <a class="button has-text-danger is-small" @onclick="Cancel">
                <span class="icon">
                  <i class="material-icons-round is-size-6">close</i>
                </span>
                <span>Hủy</span>
              </a>
            </div>
          </div>
        </section>
      }
      else
      {
        <section class="modal-card-head">
          <div class="modal-card-title">
            <div class="control has-icons-left">
              <input @bind="model.name" id="plan_name" class="input is-size-6 is_bg" type="text" 
                placeholder="Nhập tiêu đề kế hoạch"> 
              <span class="icon is-left has-text-dark">
                <i class="material-icons-outlined is-size-5">edit</i>
              </span>
            </div>
          </div>
          <a class="delete is-medium" @onclick="Cancel"></a>
        </section>
        <section class="modal-card-body p-0" style="overflow: visible;">
          <ul class="columns is-variable is-0">
            <li class="column is-2 p-4" style="background-color: #FBFBFB;">
              <ul>
                <li class="mb-4">
                  <span class="has-text-grey is-size-7">Thiết lập cơ bản</span>
                </li>
                <li class="mb-4">
                  <a class="has-text-@(tabMenu == 1 ? "black" : "info")" @onclick="() => tabMenu = 1">
                    Thông tin chung
                  </a>
                </li>
                <li class="mb-4">
                  <a class="icon-text is-fullwidth" @onclick="() => toggleMenu = !toggleMenu">
                    <span class="has-text-grey is-size-7" style="flex-grow: 1;">Thiết lập khác</span>
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">arrow_@(toggleMenu ? "drop_down" : "right")</i>
                    </span>
                  </a>
                </li>
                @if(toggleMenu)
                {
                  <li class="mb-4 is-hidden">
                    <a class="has-text-@(tabMenu == 2 ? "black" : "info")" @onclick="() => tabMenu = 2">
                      Tài nguyên
                    </a>
                  </li>
                  <li class="mb-4 is-hidden">
                    <a class="has-text-@(tabMenu == 3 ? "black" : "info")" @onclick="() => tabMenu = 3">
                      Cột mốc
                    </a>
                  </li>
                  <li class="mb-4">
                    <a class="has-text-@(tabMenu == 4 ? "black" : "info")" @onclick="() => tabMenu = 4">
                      Nhãn công việc
                    </a>
                  </li>
                  <li class="mb-4 is-hidden">
                    <a class="has-text-@(tabMenu == 5 ? "black" : "info")" @onclick="() => tabMenu = 5">
                      OKRs liên kết
                    </a>
                  </li>
                }
              </ul>
            </li>
            @if(tabMenu == 1)
            {
              <li class="column is-10 is-size-7 p-4">
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Thành viên:
                  </div>
                  <div class="control is-expanded">
                    <_MemberPlan members="model.members" sources="shareStorage.MemberList" isEdit="true" OnUpdate="UpdateMembers" />
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Ngày kết thúc:
                  </div>
                  <div class="control is-expanded">
                    <DateRangePicker @bind-StartDate="dateE" SingleDatePicker="true">
                      <PickerTemplate>
                        <a id="@context.Id" @onclick="context.Toggle" class="icon-text">
                          <span class="icon is-small mr-1">
                            <i class="material-icons-outlined is-size-6">calendar_today</i>
                          </span>
                          @if (context.TStartDate != null)
                          {
                            <span>@context.TStartDate.Value.ToString("dd/MM/yyyy")</span>
                          }
                          else
                          {
                            <span>dd/mm/yyyy</span>
                          }
                        </a>
                      </PickerTemplate>
                    </DateRangePicker>
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Chế độ bảo mật:
                  </div>
                  <div class="control is-expanded">
                    <div class="dropdown is-hoverable">
                      <div class="dropdown-trigger">
                        <a class="icon-text">
                          <span>@(model.is_private ? "Riêng tư" : "Công khai")</span>
                          <span class="icon">
                            <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                          </span>
                        </a>
                      </div>
                      <div class="dropdown-menu">
                        <div class="dropdown-content">
                          <a class="dropdown-item" @onclick="() => model.is_private = true">Riêng tư</a>
                          <a class="dropdown-item" @onclick="() => model.is_private = false">Công khai</a>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                @if (ProductService.CheckStorage(Layout.Company))
                {
                  <div class="field is-grouped">
                    <div class="control has-text-grey" style="width: 120px;">Tài nguyên:</div>
                    <div class="control">
                      <FileUpload Path="work/detail" Cloud="true" Multiple="true" Small="true" OnUpload="x => model.files.AddRange(x)" />
                    </div>
                  </div>
                  <FileViews Delete="true" Values="model.files" />
                }
                <div class="field">
                  <div class="control has-text-grey mt-2 mb-2">Mô tả kế hoạch</div>
                  <div class="control">
                    <textarea @bind="model.detail" class="textarea is_bg" placeholder="Nhập mô tả kế hoạch..." rows="5" />
                  </div>
                </div>

              </li>
            }
            else if(tabMenu == 4)
            {
              <li class="column is-10 is-size-7 p-4">
                <div class="has-text-grey mb-3">
                  Nhãn công việc giúp bạn phân loại công việc một cách dễ dàng và hiệu quả.
                  Các thành viên trong kế hoạch sẽ sử dụng chung một bộ nhãn kế hoạch.
                </div>
                <div class="field is-grouped">
                  <div class="control" style="width: 50%;">
                    <input @bind="label.name" class="input is_bg" type="text" placeholder="Nhập tiêu đề nhãn">
                  </div>
                  <div class="control">
                    <div class="input_color" style="background: @(label.color + "30"); color: @label.color;">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">palette</i>
                      </span>
                      <input @bind="label.color" type="color">
                    </div>
                  </div>
                  <div class="control">
                    <a class="button is-link" @onclick="UpdateLabel">
                      <span class="icon">
                      <i class="material-icons-outlined is-size-5">
                        @(string.IsNullOrEmpty(label.id) ? "add" : "done")
                      </i>
                      </span>
                    </a>
                  </div>
                </div>
                @if(model.labels.Count > 0)
                {
                  <div class="has-text-grey py-2">Chọn nhãn để chỉnh sửa</div>
                  <div class="tags">
                    @foreach (var item in model.labels)
                    {
                      <span class="tag" style="background: @(item.color + "30"); color: @item.color;">
                        <span class="mr-2" @onclick="() => label = item">@item.name</span>
                        <a class="delete is-small" @onclick="() => model.labels.Remove(item)"></a>
                      </span>
                    }
                  </div>
                }
              </li>
            }
          </ul>
        </section>
        <section class="modal-card-foot is-right">
          <a class="button has-text-danger is-small" @onclick="Cancel">
            <span class="icon">
              <i class="material-icons-round is-size-6">close</i>
            </span>
            <span>Hủy</span>
          </a>
          <a class="button is-link is-small @(isLoading ? "is-loading" : "")" @onclick="Update">
            <span class="icon">
              <i class="material-icons-round is-size-6">done</i>
            </span>
            <span>Hoàn tất</span>
          </a>

        </section>
      }
    </section>
  </section>
}

@code{
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel model { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel> OnUpdate { get; set; }

  private bool toggleMenu = false;
  private int tabMenu = 1;
  private DateTimeOffset? dateE = null;
  private WorkPlanModel.Label label = new() { color = Shared.ColorRandom(0) };
  private bool isLoading = false;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
  }

  private void Reset()
  {
    model = null;
    toggleMenu = false;
    tabMenu = 1;
    dateE = null;
    label = new() { color = Shared.ColorRandom(0) };
  }

  private async Task Cancel()
  {
    if(model.files.Any())
    {
      foreach (var link in model.files)
      {
        StorageService.DeleteFile(link);
      }
    }
    await OnUpdate.InvokeAsync(null);
    Reset();
  }

  private async Task Update()
  {
    isLoading = true;
    try
    {
      if (await Validation())
      {
        model.status = 1;
        model.date_start = DateTime.Today.Ticks;
        model.date_end = dateE != null ? dateE.Value.Ticks : 0;
        await DbWorkPlan.Create(Layout.Company.id, model);
        // Lưu lịch sử
        await WorkService.CreateLog(Layout.Company.id, "Khởi tạo kế hoạch", "", model.id, null, Layout.User);
        // Thông báo mail
        if(model.members.Where(x => x.id != Layout.User.id).Count() > 0)
        {
          var userList = shareStorage.MemberList;
          var userInfo = model.members
                          .Where(x => x.id != Layout.User.id)
                          .Select(x => UserService.GetMember(userList, x.id))
                          .ToList();
          userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

          var send = new Task(() =>
          {
            EmailService.JoinedPlan(userInfo, Layout.User.FullName, model.name, $"{navigation.BaseUri}work/{model.id}/detail", out string message);
          });

          send.Start();
        }
        // Thông báo chuông
        foreach (var user in model.members)
        {
          await DbNotify.ForPlan(Layout.Company.id, 700, model.id, null, user.id, Layout.User.id);
        }

        await OnUpdate.InvokeAsync(model);
        Reset();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    finally
    {
      isLoading = false;
    }
  }

  private async Task<bool> Validation()
  {
    if(Shared.IsEmpty(model.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề kế hoạch.");
    else if(model.members.Count == 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Kế hoạch chưa có thành viên.");
    else
      return true;
    return false;
  }

  private async Task UpdateLabel()
  {
    if(Shared.IsEmpty(label.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề nhãn.");
    else if(Shared.IsEmpty(label.color))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn màu cho nhãn.");
    else {
      if(Shared.IsEmpty(label.id))
      {
        label.id = Mongo.RandomId();
        model.labels.Add(label);
      }
      label = new() { color = Shared.ColorRandom(0) };
    }
  }

  private void UpdateMembers()
  {
    
  }
}