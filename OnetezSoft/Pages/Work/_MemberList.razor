@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<Dropdown DropdownClass="@(isRight ? "is_members  is-right" : "is_members ")"
          CloseOnClickMenu=false
          MenuClass="px-3 has-text-left"
          MenuStyle="max-height: none;min-width:300px"
          Toggle="toggle"
          OnToggle="Toggle">
  <Trigger>
    <div class="avatar_list">
      @foreach (var item in ShortList())
      {
        <span class="image is-rounded is-24x24 has-background-grey" title="@item.name">
          @if (string.IsNullOrEmpty(item.avatar))
          {
            <span class="is-text">@item.name</span>
          }
          else
          {
            <img src="@item.avatar" alt="AVT">
          }
        </span>
      }
      @if (isEdit)
      {
        <a class="icon has-background-white has-text-grey is-bordered is-rounded @(members.Count == 0 ? "" : "ml-3")">
          <i class="material-icons-outlined is-size-6">add</i>
        </a>
      }
      else
      {
        <a class="icon has-text-grey @(members.Count == 0 ? "" : "ml-3")">
          <i class="material-icons-outlined is-size-5">
            expand_more
          </i>
        </a>
      }
    </div>
  </Trigger>
  <MenuContent>
    @if (isEdit)
    {
      <div class="font_14 mb-3" @onmouseover="SetFocus">
        Cập nhật thành viên
      </div>
      <div class="control has-icons-right mb-3" @onmouseover="SetFocus">
        <input id="search_member" class="input is-small is-rounded" type="text" autocomplete="off"
        @bind="Search" @bind:event="oninput" placeholder="Tìm thành viên...">
        <span class="icon is-right">
          <i class="material-icons-outlined is-size-6">search</i>
        </span>
      </div>
      <div class="scrolly py-1" style="max-height:250px;">
        @foreach (var member in members)
        {
          var item = UserService.GetMember(shareStorage.MemberList, member.id);
          <ul class="columns is-vcentered is-variable is-1 is-mobile">
            <li class="column is-narrow">
              <a class="icon is-small has-text-danger" @onclick="() => RemoveItem(member.id)">
                <i class="material-icons-outlined is-size-6">remove_circle_outline</i>
              </a>
            </li>
            <li class="column has-text-weight-medium">
              <div class="icon-text">
                <span class="image is-rounded is-24x24">
                  <img src="@item.avatar" alt="AVT">
                </span>
                <span class="ml-2" style="flex-grow: 1;">@item.name</span>
              </div>
            </li>
            @if (!isSubTask)
            {
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-right" CloseOnClickMenu=true MenuClass="py-0">
                  <Trigger>
                    <a class="icon-text">
                      <span>@RoleName(member.role)</span>
                      <span class="icon is-small">
                        <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    @foreach (var role in WorkService.RoleTask())
                    {
                      <a class="dropdown-item py-1" @onclick="() => member.role = role.id">@role.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
            }
          </ul>
        }
        <hr class="my-2" />
        @if (suggests.Count > 0)
        {
          <a class="icon-text has-text-link mb-1" @onclick="() => checkAll = !checkAll">
            <span class="icon is-small">
              <i class="material-icons-outlined is-size-6">
                @(checkAll ? "check_box" : "check_box_outline_blank")
              </i>
            </span>
            <span class="has-text-weight-semibold ml-2">Chọn tất cả</span>
          </a>
        }
        else
        {
          <div class="py-2 has-text-@(string.IsNullOrEmpty(keyword) ? "white" : "grey")">Không tìm thấy kết quả phù hợp</div>
        }
        @foreach (var item in suggests)
        {
          <ul class="columns is-vcentered is-variable is-1 is-mobile">
            <li class="column is-narrow">
              <a class="icon is-small has-text-info" @onclick="() => AddItem(item.id)">
                <i class="material-icons-outlined is-size-6">add_circle_outline</i>
              </a>
            </li>
            <li class="column">
              <div class="icon-text">
                <span class="image is-rounded is-24x24">
                  <img src="@item.avatar" alt="AVT">
                </span>
                <span class="ml-2" style="flex-grow: 1;">@item.name</span>
              </div>
            </li>
          </ul>
        }
      </div>
      <hr class="dropdown-divider">
      <div class="buttons is-right">
        <a class="button is-link is-small @(isLoading ? "is-loading" : "")" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span class="is-size-7">Hoàn tất</span>
        </a>
        <a class="button is-danger is-small" @onclick="() => Toggle(false)">
          <span class="icon">
            <i class="material-icons-round is-size-6">close</i>
          </span>
          <span class="is-size-7">Hủy</span>
        </a>
      </div>
    }
    else
    {
      <div class="scrolly py-1" style="max-height: 250px;">
        @foreach (var member in members)
        {
          var item = UserService.GetMember(shareStorage.MemberList, member.id);
          <ul class="columns is-vcentered is-variable is-1 is-mobile">
            <li class="column has-text-weight-medium">
              <div class="icon-text">
                <span class="image is-rounded is-24x24">
                  <img src="@item.avatar" alt="AVT">
                </span>
                <span class="ml-2" style="flex-grow: 1;">@item.name</span>
              </div>
            </li>
            <li class="column is-narrow">
              <span>@RoleName(member.role)</span>
            </li>
          </ul>
        }
      </div>
    }
  </MenuContent>
</Dropdown>

@if ((Layout.IsMobile || screenHeight < 550) && toggle)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-head">
        <div class="modal-card-title">
          <div class="is-size-6 has-text-weight-medium">
            @(isEdit ? "Cập nhật thành viên" : "Danh sách thành viên")
          </div>
        </div>
        <a class="delete is-medium" @onclick="() => toggle = false"></a>
      </section>
      <section class="modal-card-body flex_column">
        @if (isEdit)
        {
          <div class="control has-icons-right mb-3">
            <input id="search_member" class="input is-small is-rounded" type="text" autocomplete="off"
            @bind="Search" @bind:event="oninput" placeholder="Tìm thành viên...">
            <span class="icon is-right">
              <i class="material-icons-outlined is-size-6">search</i>
            </span>
          </div>
          <div class="scrolly is-mobile py-1" style="flex:1; text-align:left">
            @foreach (var member in members)
            {
              var item = UserService.GetMember(shareStorage.MemberList, member.id);
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column is-narrow">
                  <a class="icon is-small has-text-danger" @onclick="() => RemoveItem(member.id)">
                    <i class="material-icons-outlined is-size-6">remove_circle_outline</i>
                  </a>
                </li>
                <li class="column has-text-weight-medium">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                  </div>
                </li>
                @if (!isSubTask)
                {
                  <li class="column is-narrow">
                    <Dropdown DropdownClass="is-right" CloseOnClickMenu=true MenuClass="py-0">
                      <Trigger>
                        <a class="icon-text">
                          <span>@RoleName(member.role)</span>
                          <span class="icon is-small">
                            <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
                          </span>
                        </a>
                      </Trigger>
                      <MenuContent>
                        @foreach (var role in WorkService.RoleTask())
                        {
                          <a class="dropdown-item py-1" @onclick="() => member.role = role.id">@role.name</a>
                        }
                      </MenuContent>
                    </Dropdown>
                  </li>
                }
              </ul>
            }
            <hr class="my-2" />
            @if (suggests.Count > 0)
            {
              <a class="icon-text has-text-link mb-1" @onclick="() => checkAll = !checkAll">
                <span class="icon is-small">
                  <i class="material-icons-outlined is-size-6">
                    @(checkAll ? "check_box" : "check_box_outline_blank")
                  </i>
                </span>
                <span class="has-text-weight-semibold ml-2">Chọn tất cả</span>
              </a>
            }
            else
            {
              <div class="py-2 has-text-@(string.IsNullOrEmpty(keyword) ? "white" : "grey")">Không tìm thấy kết quả phù hợp</div>
            }
            @foreach (var item in suggests)
            {
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column is-narrow">
                  <a class="icon is-small has-text-info" @onclick="() => AddItem(item.id)">
                    <i class="material-icons-outlined is-size-6">add_circle_outline</i>
                  </a>
                </li>
                <li class="column">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                  </div>
                </li>
              </ul>
            }
          </div>
          <hr class="dropdown-divider">
          <div class="buttons is-right">
            <a class="button is-link is-small @(isLoading ? "is-loading" : "")" @onclick="Update">
              <span class="icon">
                <i class="material-icons-round is-size-6">done</i>
              </span>
              <span class="is-size-7">Hoàn tất</span>
            </a>
            <a class="button is-danger is-small" @onclick="() => Toggle(false)">
              <span class="icon">
                <i class="material-icons-round is-size-6">close</i>
              </span>
              <span class="is-size-7">Hủy</span>
            </a>
          </div>
        }
        else
        {
          <div class="scrolly is-mobile py-1" style="flex:1;text-align:left">
            @foreach (var member in members)
            {
              var item = UserService.GetMember(shareStorage.MemberList, member.id);
              <ul class="columns is-vcentered is-variable is-1 is-mobile">
                <li class="column has-text-weight-medium">
                  <div class="icon-text">
                    <span class="image is-rounded is-24x24">
                      <img src="@item.avatar" alt="AVT">
                    </span>
                    <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                  </div>
                </li>
                <li class="column is-narrow">
                  <span>@RoleName(member.role)</span>
                </li>
              </ul>
            }
          </div>
        }
      </section>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<WorkPlanModel.Member> members { get; set; } = new();
  [Parameter]
  public List<MemberModel> sources { get; set; } = new();
  [Parameter]
  public bool isRight { get; set; }
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public bool isTask { get; set; }
  [Parameter]
  public bool isSubTask { get; set; }
  [Parameter]
  public EventCallback OnUpdate { get; set; }
  [Parameter]
  public bool isLoading { get; set; }

  private bool checkAll = false;
  private string keyword = string.Empty;
  private List<MemberModel> suggests = new();

  private bool toggle;
  private int screenHeight;

  private SharedStorage shareStorage = new();

  protected override async Task OnParametersSetAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    suggests = new();
    keyword = string.Empty;
    checkAll = false;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var ratio = await JSRuntime.InvokeAsync<int[]>("window.getScreenRatio");
      if (ratio != null && ratio.Length == 2)
      {
        screenHeight = ratio[1];
      }

      await InvokeAsync(StateHasChanged);
    }
  }

  private void SuggestAll()
  {
    suggests = new();
    foreach (var item in sources)
    {
      if (members.Where(x => x.id == item.id).Count() == 0)
        suggests.Add(item);
    }
  }

  private async Task Update()
  {
    toggle = false;
    keyword = null;
    if (checkAll)
    {
      foreach (var item in suggests)
      {
        if (members.Where(x => x.id == item.id).Count() == 0)
          members.Add(new() { id = item.id, role = 2 });
      }
      checkAll = false;
    }
    members = members.OrderBy(x => x.role).ToList();
    Toggle(false);

    await OnUpdate.InvokeAsync();
  }

  private void AddItem(string id)
  {
    if (members.Where(x => x.id == id).Count() == 0)
      members.Add(new() { id = id, role = 2 });
    suggests.RemoveAll(x => x.id == id);
  }

  private async Task RemoveItem(string id)
  {
    members.RemoveAll(x => x.id == id);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa thành viên ra khỏi công việc!");
    var item = UserService.GetMember(sources, id);
    if (!string.IsNullOrEmpty(item.id))
      suggests.Add(item);
  }

  private string Search
  {
    get => keyword;
    set
    {
      keyword = value;
      if (!string.IsNullOrEmpty(value))
      {
        suggests = new();
        foreach (var item in sources)
        {
          if (Shared.SearchKeyword(value, item.id + item.name + item.email)
            && members.Where(x => x.id == item.id).Count() == 0)
            suggests.Add(item);
        }
      }
      else
        SuggestAll();
    }
  }

  private void Toggle(bool state)
  {
    if (!Layout.IsMobile)
    {
      keyword = null;
      checkAll = false;
      toggle = state;
      if (toggle)
      {
        SuggestAll();
      }
      else
        suggests = new();
    }
    else
    {
      if (state)
        toggle = state;

      if (toggle)
      {
        SuggestAll();
      }
      else
        suggests = new();
    }
  }

  private async Task SetFocus()
  {
    await JSRuntime.InvokeVoidAsync("setFocus", "search_member");
  }

  private List<MemberModel> ShortList()
  {
    var results = new List<MemberModel>();
    for (int i = 0; i < members.Count; i++)
    {
      var item = UserService.GetMember(shareStorage.MemberList, members[i].id);
      if (item != null && !string.IsNullOrEmpty(item.id))
      {
        results.Add(item);
        if (results.Count == 2)
          break;
      }
    }

    if (members.Count > 2)
    {
      int count = members.Count - 2 >= 100 ? 99 : members.Count - 2;
      results.Add(new() { name = $"+{count}" });
    }

    return results;
  }

  private string RoleName(int id)
  {
    return WorkService.RoleTask(id).name;
  }
}