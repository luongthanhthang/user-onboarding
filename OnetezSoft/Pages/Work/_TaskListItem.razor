@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var toggle = toggleList.Contains(model.id);
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(model.priority);
  var deadline = WorkService.TaskDeadline(model);
}

<div class="task_priority" style="background:@priority.color;"></div>
<div class="column is-narrow" style="width:calc(100% - 492px)">
  <div class="icon-text item_title">
    @if (model.sub_task > 0)
    {
      <a class="icon" @onclick="Toggle">
        <i class="material-icons-outlined is-size-5">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
      </a>
    }
    else
    {
      <span class="icon"></span>
    }
    @if (!edit)
    {
      <a class="item_name has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")"
      @onclick="Edit" title="@model.name">
        @model.name
      </a>
    }
    else
    {
      <input class="input is-small is_underline has-background-transparent pl-0 item_name has-text-weight-medium has-text-@(model.status == 4 ? "success is-line-through " : "black")" @bind-value="model.name" @onfocusout="UpdateTitle" />
    }
    @if (editRole && !edit)
    {
      <span class="icon is_hover">
        <a class="material-icons-round is-size-7 has-text-dark" title="Chỉnh sửa tiêu đề" @onclick="() => edit = true">
          edit
        </a>
      </span>
    }
    <span class="icon is_hover">
      @if (editRole)
      {
        <a class="material-icons-round is-size-6 has-text-dark" title="Thêm công việc phụ" @onclick="AddSub">
          add
        </a>
      }
    </span>
    @if (deadline != null)
    {
      <span class="tag"
            title="@(model.date_done == 0 ? "" : "Ngày done: " + new DateTime(model.date_done).ToString("dd/MM HH:mm"))"
            style="background: @(deadline.color + "30"); color: #555; overflow: visible;margin-left:auto">
        @deadline.name
      </span>
    }
  </div>
</div>
<div class="column is-narrow" style="width: 110px;">
  @if (isTeam)
  {
    string start = new DateTime(model.date_start).ToString("dd/MM");
    string end = new DateTime(model.date_end).ToString("dd/MM");
    <div class="icon-text">
      <span class="icon">
        <i class="material-icons-outlined is-size-6">event</i>
      </span>
      <span>@(start + " - " + end)</span>
    </div>
  }
  else
  {
    <_InputDate 
      @bind-Start="model.date_start"
      @bind-End="model.date_end"
      HasTime
      Minimal
      IsRange
      Format="dd/MM"
      DefaultString="Thời gian"
      OnRangeSelect="UpdateDate" />
  }

 </div>
<div class="column is-narrow" style="width: 130px;">
  @if (editRole)
  {
    <Dropdown CloseOnClickMenu=true>
      <Trigger>
        <a class="icon-text">
          <span class="tag" style="background: @(priority.color + "30"); color: @priority.color; min-width: 100px;">
            @(priority.id == 0 ? "Chọn mức độ" : priority.name)
          </span>
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
          </span>
        </a>
      </Trigger>
      <MenuContent>
        @foreach (var item in WorkService.Priority())
        {
          <a class="dropdown-item" style="color: @item.color;" @onclick="() => ChangePriorty(item.id)">@item.name</a>
        }
      </MenuContent>
    </Dropdown>
  }
  else
  {
    if (model.priority > 0)
    {
      <span class="tag" style="background: @(priority.color + "30"); color: @priority.color; min-width: 100x;">@priority.name</span>
    }
    else
    {
      <span class="tag" style="background:transparent; min-width: 100px;">Không có</span>
    }
  }
</div>
<div class="column is-narrow" style="width: 110px;">
  <_MemberList isLoading="isLoadingAddMembers" members="model.members" sources="members" isEdit="editRole" isTask="true"
               isRight="true" OnUpdate="UpdateMembers" />
</div>
<div class="column is-narrow" style="width: 80px;">
  @if (editRole)
  {
    <Dropdown CloseOnClickMenu=true>
      <Trigger>
        <a class="icon-text">
          <span class="tag @status.color" style="width: 58px;">
            @status.name
          </span>
          <span class="icon is-small">
            <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
          </span>
        </a>
      </Trigger>
      <MenuContent>
        @foreach (var item in WorkService.Status())
        {
          <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
        }
      </MenuContent>
    </Dropdown>
  }
  else
  {
    <span class="tag @status.color" style="width: 58px;">@status.name</span>
  }
</div>
<div class="column is-narrow has-text-centered" style="width: 30px;">
  @if (editRole)
  {
    <Dropdown CloseOnClickMenu=true DropdownClass="is-right">
      <Trigger>
        <a class="icon has-text-grey">
          <i class="material-icons-outlined is-size-6">more_horiz</i>
        </a>
      </Trigger>
      <MenuContent>
        <a class="dropdown-item" @onclick="AddSub">Tạo công việc phụ</a>
        <a class="dropdown-item" @onclick="AddTodo">Tạo todolist liên kết</a>
        <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa công việc này</a>
      </MenuContent>
    </Dropdown>
  }
</div>

@if (toggle)
{
  foreach (var child in subTasks)
  {
    <_TaskListChild EditMode="@(isTeam ? false : editRole ? true : child.members.Find(x => x.id == Layout.User.id) != null)"
                    model="child"
                    parent="model"
                    members="members"
                    edit="newList.Contains(child.id)"
                    isTeam="isTeam"
                    OnUpdate="e => UpdateSubTasks(e)" OnView="ViewSub" />
  }
  if (subTasks.Count == 0)
  {
    <div class="column is-full" style="box-shadow: inset 4px 0px 0px 0px @priority.color;">
      <i class="has-text-grey">Không có công việc phụ</i>
    </div>
  }
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public bool showPlan { get; set; }
  [Parameter]
  public List<string> toggleList { get; set; } = new();
  [Parameter]
  public EventCallback<string> OnToggle { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnAddSub { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnTodolist { get; set; }
  [Parameter]
  public bool edit { get; set; }
  [Parameter]
  public bool isTeam {get; set;}

  private bool togglePriority = false;
  private bool toggleStatus = false;

  private List<WorkPlanModel.Task> subTasks = new();
  private List<string> newList = new();
  private string oldTitle;
  private bool isLoadingAddMembers = false;

  private SharedStorage sharedStorage;

  protected override async Task OnInitializedAsync()
  {
    sharedStorage = await globalService.GetShareStorage(Layout.Company.id);
    oldTitle = model.name;
  }

  protected override async Task OnParametersSetAsync()
  {
    if (!toggleList.Contains(model.id))
      subTasks = new();
    else
      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
  }

  private async Task<bool> Toggle()
  {
    bool _success = true;
    try
    {
      if (toggleList.Contains(model.id))
        subTasks = new();
      else
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await OnToggle.InvokeAsync(model.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Toggle()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task Edit()
  {
    await OnEdit.InvokeAsync(model);
  }

  private async Task ViewSub()
  {
    await OnAddSub.InvokeAsync(model);
  }

  private async Task AddSub()
  {
    var item = new WorkPlanModel.Task()
      {
        id = Mongo.RandomId(),
        status = 1,
        name = "Công việc phụ mới",
        plan_id = plan.id,
        parent_id = model.id,
        members = new()
        {
          new WorkPlanModel.Member()
          {
            id = Layout.User.id,
            role = 2,
          }
        },
      };

    if (Layout.IsMobile)
      subTasks.Insert(0, item);
    else
      subTasks.Add(item);

    if (!toggleList.Contains(model.id))
      toggleList.Add(model.id);

    newList.Add(item.id);

    await UpdateSubTasks(item, true);
  }

  private async Task AddTodo()
  {
    await OnTodolist.InvokeAsync(model);
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\". Việc này sẽ xóa các công việc phụ khác thuộc công việc này.\nBạn có chắc chắn muốn tiếp tục?"))
        return _success;
      foreach (var user in plan.members)
        await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, model.id, user.id, Layout.User.id);
      await DbWorkTask.Delete(Layout.Company.id, model.id);

      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", model.name, model.plan_id, null, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Xóa công việc thành công!");
      await OnUpdate.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateDate(DateRange range)
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thành công",
        string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(model.date_start), new DateTime(model.date_end)), model.plan_id, model.id, Layout.User);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangePriorty(int id)
  {
    bool _success = true;
    try
    {
      togglePriority = false;
      model.priority = id;
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.CreateLog(Layout.Company.id, "Cập nhật độ ưu tiên thành công!",
        WorkService.Priority(model.priority).name, model.plan_id, model.id, Layout.User);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangePriorty()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int statusId)
  {
    bool _success = true;
    try
    {
      toggleStatus = false;
      var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, model, statusId);
      if (statusId == 4)
      {
        // Thông báo mail
        if (model.members.Where(x => x.id != Layout.User.id).Count() > 0)
        {
          var userList = sharedStorage.MemberList;
          var userInfo = model.members
                          .Where(x => x.id != Layout.User.id)
                          .Select(x => UserService.GetMember(userList, x.id))
                          .ToList();
          userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

          var send = new Task(() =>
          {
            EmailService.DoneJob(userInfo, Layout.User.FullName, plan.name, model.name, $"{navigation.BaseUri}work/{plan.id}/task", out string _message);
          });

          send.Start();
        }
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      }
      await JSRuntime.InvokeVoidAsync("tagline", true, message);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateMembers()
  {
    isLoadingAddMembers = true;
    try
    {
      var userList = sharedStorage.MemberList;
      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      var differingMembers = model.members.Where(x => !old.members.Any(y => y.id == x.id)).ToList();
      if (differingMembers.Count > 0)
      {
        var userInfo = differingMembers.Select(x => WorkService.ConvertToMember(userList, x)).ToList();
        userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

        var send = new Task(() =>
        {
          EmailService.AssignedJob(userInfo, Layout.User.FullName, plan.name, $"{navigation.BaseUri}work/{plan.id}/task", model.name, out string message);
        });

        send.Start();
      }
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, userList);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    finally
    {
      isLoadingAddMembers = false;
    }

  }

  private async Task<bool> UpdateSubTasks(WorkPlanModel.Task item, bool create = false)
  {
    bool _success = true;
    try
    {
      if (item != null)
      {
        if (newList.Contains(item.id) && !create)
          newList.Remove(item.id);

        var userList = sharedStorage.MemberList;
        var check = await DbWorkTask.Get(Layout.Company.id, item.id);

        if (check == null)
        {
          var memberIds = plan.members.Select(x => x.id);
          var editMembers = userList.Where(x => memberIds.Contains(x.id)).ToList();

          await DbWorkTask.Create(Layout.Company.id, item);
          await WorkService.CreateLog(Layout.Company.id, "Thêm công việc phụ", item.name, model.plan_id, model.id, Layout.User);
          await WorkService.LogTaskMembers(Layout.Company.id, null, item, Layout.User, editMembers);
        }
      }

      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      if(subTasks.Count == 0 && toggleList.Contains(model.id))
      {
        await OnToggle.InvokeAsync(model.id);
      }

      await WorkService.UpdateSubTaskCount(Layout.Company.id, model.id, subTasks.Count);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateSubTasks()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateTitle()
  {
    edit = false;
    if (string.IsNullOrEmpty(oldTitle))
    {
      if (string.IsNullOrEmpty(model.name))
      {
        await OnUpdate.InvokeAsync(null);
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
    else
    {
      if (string.IsNullOrEmpty(model.name))
      {
        model.name = oldTitle;
      }
      else
      {
        oldTitle = model.name;
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
    }
  }
}
