@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="field is-grouped mb-2">
  @if (Layout.IsMobile)
  {
    <div class="control is-expanded is-size-6 has-text-weight-medium">
      TODOLIST LIÊN KẾT
    </div>
  }
  else
  {
    <div class="control has-text-grey">
      Todolist liên kết
    </div>
  }
  @if (editRole)
  {
    <div class="control">
      <a class="icon has-text-link @(Layout.IsMobile ? "is-medium" : "")" @onclick="AddItem">
        <i class="material-icons-round @(Layout.IsMobile ? "is-size-3" : "is-size-4")">add_box</i>
      </a>
    </div>
  }
</div>

<div class="scrolly py-1" style="flex: 1 1 0%">
  @if (todo != null)
  {
    <ul class="columns is-multiline is-vcentered is-variable is-1 is-mobile">
      <li class="column is-full-mobile">
        <input @bind="todo.name" id="task_todo" class="input is-small is_bg" type="text"
               placeholder="Nhập tiêu đề Todolist">
      </li>
      @if (Layout.IsMobile)
      {
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Thời hạn:</div>
        </li>
        <li class="column is-two-thirds">
          <_InputDate Minimal DefaultString="Chọn ngày" Format="dd/MM" IsRange @bind-Start="dateS" @bind-End="dateE" />
         </li>
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Thời gian:</div>
        </li>
        <li class="column is-one-third">
          <div class="select is-small is-fullwidth">
            <select @bind="todo.start">
              @foreach (var sl in Shared.TimeList())
              {
                <option value="@sl.name">@sl.name</option>
              }
            </select>
          </div>
        </li>
        <li class="column is-one-third">
          <div class="select is-small is-fullwidth">
            <select @bind="todo.end">
              @foreach (var sl in Shared.TimeList())
              {
                <option value="@sl.name">@sl.name</option>
              }
            </select>
          </div>
        </li>
      }
      else
      {
        <li class="column is-narrow" style="width: 130px;">
          <_InputDate Minimal DefaultString="Chọn ngày" Format="dd/MM" IsRange @bind-Start="dateS" @bind-End="dateE" />
         </li>
        <li class="column is-narrow" style="width: 90px;">
          <div class="select is-small is-fullwidth">
            <select @bind="todo.start">
              @foreach (var sl in Shared.TimeList())
              {
                <option value="@sl.name">@sl.name</option>
              }
            </select>
          </div>
        </li>
        <li class="column is-narrow" style="width: 90px;">
          <div class="select is-small is-fullwidth">
            <select @bind="todo.end">
              @foreach (var sl in Shared.TimeList())
              {
                <option value="@sl.name">@sl.name</option>
              }
            </select>
          </div>
        </li>
      }
      <li class="column is-full">
        <div class="has-text-right pb-3">
          <a class="icon-text has-text-link mr-3" @onclick="Update">
            <span class="icon">
              <i class="material-icons-round is-size-6">done</i>
            </span>
            <span>Cập nhật</span>
          </a>
          <a class="icon-text has-text-danger" @onclick="() => todo = null">
            <span class="icon">
              <i class="material-icons-round is-size-6">close</i>
            </span>
            <span>Hủy</span>
          </a>
        </div>
      </li>
    </ul>
  }

  @foreach (var item in todos)
  {
    var status = DbTodolist.Status(item.status);
    var index = todos.IndexOf(item);
    var date = index > 0 ? todos[index - 1].date : 0;
    if (date != item.date)
    {
      <div class="button is-small is-fullwidth is_bg mb-2" style="cursor: initial;">
        <span class="has-text-left has-text-weight-medium font_14" style="flex-grow: 1;">
          @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
        </span>
        <span class="icon">
          <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
        </span>
      </div>
    }
    <ul class="columns is-multiline is-mobile is-vcentered is-variable is-1 mb-2">
      @if (Layout.IsMobile)
      {
        <li class="column is-11">
          <span class="font_14 has-text-weight-medium">• @item.name</span>
        </li>
        <li class="column is-1">
          @if (!item.confirm)
          {
            <a class="icon is-small has-text-danger" @onclick="() => DeleteItem(item)">
              <i class="material-icons-outlined is-size-6">delete</i>
            </a>
          }
        </li>
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Thời hạn:</div>
        </li>
        <li class="column is-two-thirds">
          @item.start - @item.end
        </li>
        <li class="column is-one-third pl-3">
          <div class="has-text-grey">Trạng thái:</div>
        </li>
        <li class="column is-two-thirds">
          <span class="tag is-small @status.color">
            @status.name
          </span>
        </li>
      }
      else
      {
        <li class="column pl-4 has-text-weight-medium">
          <div class="text_inline" title="@item.name">• @item.name</div>
        </li>
        <li class="column is-narrow has-text-centered" style="width: 80px;">
          @item.start
        </li>
        <li class="column is-narrow has-text-centered" style="width: 80px;">
          @item.end
        </li>
        <li class="column is-narrow has-text-centered" style="width: 80px;">
          <span class="tag is-small px-2 @status.color">
            @status.name
          </span>
        </li>
        <li class="column is-narrow has-text-centered" style="width: 40px;">
          @if (!item.confirm)
          {
            <a class="icon is-small has-text-danger" @onclick="() => DeleteItem(item)">
              <i class="material-icons-outlined is-size-6">delete</i>
            </a>
          }
        </li>
      }
    </ul>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task task { get; set; }
  [Parameter]
  public List<TodolistModel.Todo> todos { get; set; } = new();
  [Parameter]
  public bool editRole { get; set; }
  private TodolistModel.Todo todo = null;
  private long dateS;
  private long dateE;

  private async Task AddItem()
  {
    todo = new()
      {
        start = "08:30",
        end = "17:30",
        user = Layout.User.id,
        plan_task = task.id
      };
    await JSRuntime.InvokeVoidAsync("setFocus", "task_todo");
  }

  private async Task Update()
  {
    try
    {
      if (string.IsNullOrEmpty(todo.name) || string.IsNullOrEmpty(todo.name.Trim()))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề của Todolist");
      else if (dateS == 0 || dateE == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chọn ngày tạo Todolist");
      else if (dateS < DateTime.Today.Ticks)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng chọn lại ngày bắt đầu");
      else if (dateS > dateE)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày kết thúc không được nhỏ hơn ngày bắt đầu");
      else
      {
        for (DateTime day = new DateTime(dateS); day <= new DateTime(dateE); day = day.AddDays(1))
          await AddTodo(day);

        await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã tạo Todolist liên kết với công việc");
        todos = await DbTodoItem.GetList(Layout.Company.id, task.id, Layout.User.id);
        todo = null;
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
  }

  private async Task AddTodo(DateTime date)
  {

    try
    {
      date = Convert.ToDateTime(date.ToShortDateString());
      var todolist = await DbTodolist.GetbyDay(Layout.Company.id, Layout.User.id, date);
      if (todolist == null)
      {
        todolist = new TodolistModel();
        todolist.date = date.Ticks;
        todolist.user_create = Layout.User.id;
        todolist = await DbTodolist.Create(Layout.Company.id, todolist);
      }
      if (todolist.status < 3)
      {
        var item = new TodolistModel.Todo();
        item.id = Mongo.RandomId();
        item.type = 1;
        item.level = 1;
        item.status = 1;
        item.name = todo.name;
        item.start = todo.start;
        item.end = todo.end;
        item.date = todolist.date;
        item.todolist = todolist.id;
        item.plan_task = task.id;
        item.user = Layout.User.id;
        await DbTodoItem.Create(Layout.Company.id, item);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }

  }

  private async Task DeleteItem(TodolistModel.Todo item)
  {
    try
    {
      var todolist = await DbTodolist.GetbyDay(Layout.Company.id, Layout.User.id, new DateTime(item.date));
      if (todolist != null)
      {
        if (todolist.status < 2 || !item.confirm)
        {
          if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa: {item.name}?"))
            return;

          todos.Remove(item);
          await DbTodoItem.Delete(Layout.Company.id, item.id);
          await DbTodolist.Update(Layout.Company.id, todolist);
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể xóa công việc đã Check-in !");
      }
      else
      {
        todos.Remove(item);
        await DbTodoItem.Delete(Layout.Company.id, item.id);
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không tìm thấy Todolist liên quan !");
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }

  }
}