@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@inject HubService hubService


@if (task != null)
{
  var status = WorkService.Status(task.status);
  var priority = WorkService.Priority(task.priority);
  var deadline = WorkService.TaskDeadline(task);
  var sections = plan.sections.SingleOrDefault(x => x.id == task.section_id);
  var editTask = WorkService.RoleEditTask(plan, task, Layout.User.id);
  var sectionsList = isEditSection ? plan.sections.Where(x => x.sheet == sheetId).ToList() : new();
  
  <section class="modal is-active @(Layout.IsMobile ? "is_under" : "")">
    <div class="modal-background"></div>
    <section id="plan_popup" class="modal-card is-large" style="@(Layout.IsMobile ? "padding-top: 51px; max-width:100%" : "")">
      @if (Layout.IsMobile)
      {
        if (task.date_start == 0)
          task.date_start = DateTime.Today.Ticks;
        if (task.date_end == 0)
          task.date_end = DateTime.Today.AddDays(7).Ticks;

        <section class="modal-card-head">
          <div class="modal-card-title">
            <div class="icon-text">
              <a class="icon has-text-link" @onclick="Cancel">
                <i class="material-icons-outlined is-size-5">arrow_back</i>
              </a>
              <h1 class="is-size-6 has-text-dark has-text-weight-semibold">Chi tiết công việc</h1>
            </div>
          </div>
        </section>
        <section class="modal-card-tabs">
          <ul class="columns is-mobile is-variable is-0">
            <li class="column is-narrow">
              <a class="button is-small @(tab == 1 ? "has_bg has-text-link" : "is-white")"
              @onclick="() => ChangeTab(1)">
                Thông tin chung
              </a>
            </li>
            @if (!string.IsNullOrEmpty(task.id))
            {
              <li class="column is-narrow">
                <a class="button is-small @(tab == 2 ? "has_bg has-text-link" : "is-white")"
                @onclick="() => ChangeTab(2)">
                  Công việc phụ
                </a>
              </li>
              <li class="column is-narrow">
                <a class="button is-small @(tab == 3 ? "has_bg has-text-link" : "is-white")"
                @onclick="() => ChangeTab(3)">
                  Todolist liên kết
                </a>
              </li>
              <li class="column is-narrow">
                <a class="button is-small @(tab == 4 ? "has_bg has-text-link" : "is-white")"
                @onclick="() => ChangeTab(4)">
                  Bình luận
                </a>
              </li>
              <li class="column is-narrow">
                <a class="button is-small @(tab == 5 ? "has_bg has-text-link" : "is-white")"
                @onclick="() => ChangeTab(7)">
                  Files lưu trữ
                </a>
              </li>
              <li class="column is-narrow">
                <a class="button is-small @(tab == 5 ? "has_bg has-text-link" : "is-white")"
                @onclick="() => ChangeTab(5)">
                  Lịch sử cập nhật
                </a>
              </li>
              @if (editTask)
              {
                <li class="column is-narrow">
                  <a class="button is-small @(tab == 6 ? "has_bg has-text-link" : "is-white")"
                  @onclick="() => ChangeTab(6)">
                    Xóa và rời khỏi
                  </a>
                </li>
              }
            }
            else
            {
              <li class="column is-narrow" style="opacity:0.5" @onclick="CreateWarning">
                <a class="button is-small">
                  Công việc phụ
                </a>
              </li>
              <li class="column is-narrow" style="opacity:0.5" @onclick="CreateWarning">
                <a class="button is-small">
                  Todolist liên kết
                </a>
              </li>
              <li class="column is-narrow" style="opacity:0.5" @onclick="CreateWarning">
                <a class="button is-small">
                  Bình luận
                </a>
              </li>
              <li class="column is-narrow" style="opacity:0.5" @onclick="CreateWarning">
                <a class="button is-small">
                  Lịch sử cập nhật
                </a>
              </li>
            }
          </ul>
        </section>
        <section class="modal-card-body is-size-7 is-flex is-flex-direction-column">
          @if (tab == 1)
          {
            <div class="field">
              @if (editTask)
              {
                <textarea @bind="task.name" id="task_name" class="textarea has-text-weight-semibold is_bg"
                          rows="1" placeholder="Nhập tiêu đề công việc" />
              }
              else
              {
                <div class="font_14 has-text-weight-semibold">@task.name</div>
              }
            </div>
            @if (deadline != null)
            {
              <div class="field">
                <span class="tag" style="background: @(deadline.color + "30"); color: #555;">
                  @deadline.name
                </span>
              </div>
            }
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Người tham gia:
              </div>
              <div class="control is-expanded">
                <_MemberList isLoading="isLoadingAddMembers" members="task.members" sources="members" isEdit="editTask"
                             isTask="true" isRight="true" OnUpdate="UpdateMembers" />
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Trạng thái:
              </div>
              <div class="control is-expanded">
                @if (editTask)
                {
                  <Dropdown CloseOnClickMenu=true>
                    <Trigger>
                      <a class="icon-text">
                        <span class="tag @status.color">@status.name</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                        </span>
                      </a>
                    </Trigger>
                    <MenuContent>
                      @foreach (var item in WorkService.Status())
                      {
                        if (string.IsNullOrEmpty(task.id) && item.id < 4)
                        {
                          <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
                        }
                        else if (!string.IsNullOrEmpty(task.id))
                        {
                          <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
                        }
                      }
                    </MenuContent>
                  </Dropdown>
                }
                else
                {
                  <a class="icon-text">
                    <span class="tag @status.color">@status.name</span>
                  </a>
                }
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Ngày bắt đầu
              </div>
              <div class="control">
                @if (editTask)
                {
                  <_InputDate Minimal HasTime Format="dd/MM/yyyy HH:mm" @bind-Start="@task.date_start" />
                }
                else
                {
                  <div class="icon-text">
                    <span class="icon is-small mr-1">
                      <i class="material-icons-outlined is-size-6">calendar_today</i>
                    </span>
                    <span>@task.date_start.ToString("dd/MM/yyyy")</span>
                    <span class="icon is-small ml-3 mr-1">
                      <i class="material-icons-outlined is-size-6">schedule</i>
                    </span>
                    <span>@task.date_end.ToString("HH:mm")</span>
                  </div>
                }
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Ngày kết thúc
              </div>
              <div class="control">
                @if (editTask)
                {
                  <_InputDate Minimal HasTime Format="dd/MM/yyyy HH:mm" @bind-Start="@task.date_end" />
                }
                else
                {
                  <div class="icon-text">
                    <span class="icon is-small mr-1">
                      <i class="material-icons-outlined is-size-6">calendar_today</i>
                    </span>
                    <span>@task.date_start.ToString("dd/MM/yyyy")</span>
                    <span class="icon is-small ml-3 mr-1">
                      <i class="material-icons-outlined is-size-6">schedule</i>
                    </span>
                    <span>@task.date_end.ToString("HH:mm")</span>
                  </div>
                }
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Kế hoạch:
              </div>
              <div class="control is-expanded">
                @if (editTask)
                {
                  <Dropdown CloseOnClickMenu=true>
                    <Trigger>
                      <a class="icon-text">
                        <span class="text_1_line" style="height:unset">@plan.name</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                        </span>
                      </a>
                    </Trigger>
                    <MenuContent>
                      <a class="dropdown-item">@plan.name</a>
                    </MenuContent>
                  </Dropdown>
                }
                else
                {
                  <a class="icon-text">
                    <span class="text_1_line" style="height:unset">@plan.name</span>
                  </a>
                }
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Nhóm công việc:
              </div>
              <div class="control is-expanded" style="width: calc(100% - 132px)">
                @if (isEditSection)
                {
                  if (editTask)
                  {
                    <Dropdown DropdownClass="is-fullwidth" CloseOnClickMenu=false>
                      <Trigger>
                        <a class="icon-text">
                          <span class="text_1_line" style="height:unset">
                            @(sections != null ? sections.name : "Chọn nhóm công việc")
                          </span>
                          <span class="icon">
                            <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                          </span>
                        </a>
                      </Trigger>
                      <MenuContent>
                        @if (WorkService.RoleInPlan(plan, Layout.User.id) == 1)
                        {
                          <div class="p-2">
                            <div class="field has-addons">
                              <div class="control is-expanded">
                                <input @bind="sectionNew" class="input is-small" type="text" placeholder="Thêm nhóm mới">
                              </div>
                              <div class="control">
                                <a class="button is-small is-link" @onclick="AddSection">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-5">add</i>
                                  </span>
                                </a>
                              </div>
                            </div>
                          </div>
                        }
                        @foreach (var item in sectionsList)
                        {
                          <a class="dropdown-item" style="white-space: normal;" @onclick="() => UpdateSection(item.id)">@item.name</a>
                        }
                      </MenuContent>
                    </Dropdown>
                  }
                  else
                  {
                    <a class="icon-text">
                      <span class="text_1_line" style="height:unset">
                        @(sections != null ? sections.name : "Chưa chọn")
                      </span>
                    </a>
                  }
                }
                else
                {
                  <a class="icon-text">
                    <span class="text_1_line" style="height:unset">
                      @(sections != null ? sections.name : "Chưa chọn")
                    </span>
                  </a>
                }
              </div>
            </div>
            <div class="field is-grouped">
              <div class="control has-text-grey" style="width: 120px;">
                Mức độ ưu tiên:
              </div>
              <div class="control is-expanded">
                @if (editTask)
                {
                  <Dropdown>
                    <Trigger>
                      <a class="icon-text">
                        <span style="color: @priority.color;">@(task.priority != 0 ? priority.name : "Chọn mức độ")</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                        </span>
                      </a>
                    </Trigger>
                    <MenuContent>
                      <a class="dropdown-item is-hidden" @onclick="() => UpdatePriorty(0)">Trống</a>
                      @foreach (var item in WorkService.Priority())
                      {
                        <a class="dropdown-item" style="color: @item.color;" @onclick="() => UpdatePriorty(item.id)">@item.name</a>
                      }
                    </MenuContent>
                  </Dropdown>
                }
                else
                {
                  <a class="icon-text">
                    <span style="color: @priority.color;">
                      @(task.priority != 0 ? priority.name : "Chưa chọn")
                    </span>
                  </a>
                }
              </div>
            </div>
            <div class="field is-grouped" style="align-items: flex-start;">
              <div class="control has-text-grey pt-1" style="width: 120px;">
                Nhãn công việc:
              </div>
              <div class="control is-expanded" style="width: calc(100% - 132px)">
                <_LabelList labels="task.labels" sources="plan.labels" isEdit="editTask" OnUpdate="UpdateLabels" />
              </div>
            </div>
            @if (ProductService.CheckStorage(Layout.Company))
            {
              if (editTask)
              {
                <div class="field is-grouped" style="align-items: flex-start;">
                  <div class="control has-text-grey pt-1" style="width: 120px;">
                    File đính kèm:
                  </div>
                  <div class="control is-expanded" style="width: calc(100% - 132px)">
                    <FileUpload Path="work/task/detail" Multiple="true" Small="true" Cloud="true" OnUpload="x => task.files.AddRange(x)" />
                    <FileViews Delete="true" Values="task.files" />
                  </div>
                </div>
              }
              else if (task.files.Count > 0)
              {
                <div class="field is-grouped" style="align-items: flex-start;">
                  <div class="control has-text-grey pt-1" style="width: 120px;">
                    File đính kèm:
                  </div>
                  <div class="control is-expanded" style="width: calc(100% - 132px)">
                    <FileViews Values="task.files" />
                  </div>
                </div>
              }
            }
            <div class="field is-flex is-flex-direction-column" style="flex: 1 1 0%">
              <div class="control has-text-grey mb-2">Mô tả công việc:</div>
              @if (editTask)
              {
                <div class="control" style="flex: 1 1 0%">
                  <textarea @bind="task.detail" class="textarea is_bg" rows="7"
                            placeholder="Nhập mô tả công việc..." style="height: 100%;max-height:100%; overflow: auto !important" />
                </div>
              }
              else
              {
                <div class="content is-size-7" style="flex: 1 1 0%">
                  @((MarkupString)Shared.TextToHtml(task.detail))
                </div>
              }
            </div>
            @if (editTask)
            {
              <div class="has-text-right">
                <a class="button is-link is-small mr-2" @onclick="Update">
                  <span class="icon">
                    <i class="material-icons-round is-size-6">done</i>
                  </span>
                  <span>Hoàn tất</span>
                </a>
                <a class="button has-text-danger is-small" @onclick="Cancel">
                  <span class="icon">
                    <i class="material-icons-round is-size-6">close</i>
                  </span>
                  <span>Hủy</span>
                </a>
              </div>
            }
          }
          else if (tab == 2)
          {
            <_TaskSubList parent="task"
                          tasks="subTasks"
                          editRole="editTask"
                          members="members" />
          }
          else if (tab == 3)
          {
            <_TaskTodolist task="task" todos="todoItems" editRole="editTask" />
          }
          else if (tab == 4)
          {
            <div class="is-size-6 has-text-weight-medium">BÌNH LUẬN</div>
            <_TaskComments plan="plan" task="task" editRole="editTask" members="members" />
          }
          else if (tab == 5)
          {
            <_PlanLogs logs="logs" />
          }
          else if (tab == 6)
          {
            <div class="has-text-grey mb-1">Xóa công việc</div>
            <div class="font_14 mb-2">
              Toàn bộ dữ liệu của công việc như file đính kèm, công việc phụ,
              bình luận của bạn và các thành viên sẽ bị xóa và không thể khôi phục.
            </div>
            <a class="button is-danger" @onclick="Delete">
              <span class="icon">
                <i class="material-icons-outlined is-size-5">delete</i>
              </span>
              <span>Xóa công việc</span>
            </a>

            <div class="has-text-grey mb-1 mt-6">Rời khỏi công việc</div>
            <div class="font_14 mb-2">
              Bạn sẽ rời khỏi công việc và không nhận thông báo mới. Dữ liệu của công việc không bị ảnh hưởng.
            </div>
            <a class="button is-info" @onclick="OutTask">
              <span class="icon">
                <i class="material-icons-outlined is-size-5">remove</i>
              </span>
              <span>Rời khỏi</span>
            </a>
          }
          else if (tab == 7)
          {
            <div class="is-size-6 has-text-weight-medium">FILES LƯU TRỮ</div>
            <_TaskFiles parent="task" />
          }
        </section>
      }
      else
      {
        <section class="modal-card-head">
          <div class="modal-card-title">
            <div class="control has-icons-left">
              @if (editTask && tab == 1)
              {
                <input @bind="task.name" id="task_name" type="text" placeholder="Nhập tiêu đề công việc"
                       class="input is-size-6 has-text-weight-medium is_bg">
              }
              else
              {
                <input value="@task.name" id="task_name" type="text" readonly
                       class="input is-size-6 has-text-weight-medium is-white">
              }
              <span class="icon is-left has-text-dark">
                <i class="material-icons-outlined is-size-5">edit</i>
              </span>
            </div>
          </div>
          <a class="delete is-medium" @onclick="Cancel"></a>
        </section>
        <section class="modal-card-body p-0" style="overflow: hidden">
          <ul class="columns is-variable is-0" style="height:100%">
            <li class="column is-2 p-4" style="background-color: #FBFBFB; height: calc(100vh - 130px);">
              <ul style="height: 100%; position: relative;">
                <li class="mb-4">
                  <a class="has-text-@(tab == 1 ? "link" : "info")" @onclick="() => ChangeTab(1)">
                    Thông tin chung
                  </a>
                </li>
                @if (!string.IsNullOrEmpty(task.id))
                {
                  <li class="mb-4">
                    <a class="has-text-@(tab == 2 ? "link" : "info")" @onclick="() => ChangeTab(2)">
                      Công việc phụ
                    </a>
                  </li>
                  <li class="mb-4">
                    <a class="has-text-@(tab == 3 ? "link" : "info")" @onclick="() => ChangeTab(3)">
                      Todolist liên kết
                    </a>
                  </li>
                  <li class="mb-4">
                    <a class="has-text-@(tab == 4 ? "link" : "info")" @onclick="() => ChangeTab(4)" title="@(task.comment > 0 ? $"Có {task.comment} bình luận" : "Chưa có bình luận")">
                      Bình luận
                    </a>
                  </li>
                  <li class="mb-4">
                    <a class="has-text-@(tab == 7 ? "link" : "info")" @onclick="() => ChangeTab(7)">
                      Files lưu trữ
                    </a>
                  </li>
                  <li class="mb-4">
                    <a class="has-text-@(tab == 5 ? "link" : "info")" @onclick="() => ChangeTab(5)">
                      Lịch sử cập nhật
                    </a>
                  </li>
                  @if (editTask)
                  {
                    <li style="position: absolute; left: 0px; bottom: 0px;">
                      <a class="has-text-@(tab == 6 ? "link" : "info")" @onclick="() => ChangeTab(6)">
                        Xóa và rời khỏi
                      </a>
                    </li>
                  }
                }
                else
                {
                  <li class="mb-4" @onclick="CreateWarning">
                    <a class="has-text-black" style="opacity:0.5">
                      Công việc phụ
                    </a>
                  </li>
                  <li class="mb-4" @onclick="CreateWarning">
                    <a class="has-text-black" style="opacity:0.5">
                      Todolist liên kết
                    </a>
                  </li>
                  <li class="mb-4" @onclick="CreateWarning">
                    <a class="has-text-black" style="opacity:0.5" title="@(task.comment > 0 ? $"Có {task.comment} bình luận" : "Chưa có bình luận")">
                      Bình luận
                    </a>
                  </li>
                  <li class="mb-4" @onclick="CreateWarning">
                    <a class="has-text-black" style="opacity:0.5">
                      Lịch sử cập nhật
                    </a>
                  </li>
                }
              </ul>
            </li>
            @if (tab == 1)
            {
              <li class="column is-10 is-size-7 p-4 is-flex is-flex-direction-column scrolly">
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Người tham gia:
                  </div>
                  <div class="control is-expanded">
                    <_MemberList members="task.members" sources="members" isEdit="editTask" isTask="true" OnUpdate="UpdateMembers" />
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Trạng thái:
                  </div>
                  <div class="control is-expanded">
                    @if (editTask)
                    {
                      <Dropdown CloseOnClickMenu=true>
                        <Trigger>
                          <a class="icon-text">
                            <span class="tag @status.color">@status.name</span>
                            <span class="icon">
                              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                            </span>
                          </a>
                        </Trigger>
                        <MenuContent>
                          @foreach (var item in WorkService.Status())
                          {
                            if (string.IsNullOrEmpty(task.id) && item.id < 4)
                            {
                              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
                            }
                            else if (!string.IsNullOrEmpty(task.id))
                            {
                              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
                            }
                          }
                        </MenuContent>
                      </Dropdown>
                    }
                    else
                    {
                      <a class="icon-text">
                        <span class="tag @status.color">@status.name</span>
                      </a>
                    }
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Ngày bắt đầu
                  </div>
                  <div class="control">
                    @if (editTask)
                    {
                      <_InputDate HasTime Minimal Format="dd/MM/yyyy HH:mm" @bind-Start="@task.date_start" DefaultString="Thời gian" />
                    }
                    else
                    {
                      <div class="icon-text">
                        <span class="icon is-small mr-1">
                          <i class="material-icons-outlined is-size-6">calendar_today</i>
                        </span>
                        <span>@(task.date_start == 0 ? "Chọn thời gian" : new DateTime(task.date_start).ToString("dd/MM/yyyy HH:mm"))</span>
                      </div>
                    }
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Ngày kết thúc
                  </div>
                  <div class="control">
                    @if (editTask)
                    {
                      <_InputDate HasTime Minimal Format="dd/MM/yyyy HH:mm" @bind-Start="@task.date_end" DefaultString="Thời gian" />
                    }
                    else
                    {
                      <div class="icon-text">
                        <span class="icon is-small mr-1">
                          <i class="material-icons-outlined is-size-6">calendar_today</i>
                        </span>
                        <span>@(task.date_end == 0 ? "Chọn thời gian" : new DateTime(task.date_end).ToString("dd/MM/yyyy HH:mm"))</span>
                      </div>
                    }
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Kế hoạch:
                  </div>
                  <div class="control is-expanded">
                    @if (editTask)
                    {
                      <Dropdown CloseOnClickMenu=true>
                        <Trigger>
                          <a class="icon-text">
                            <span class=" text_1_line" style="height:unset">@plan.name</span>
                            <span class="icon">
                              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                            </span>
                          </a>
                        </Trigger>
                        <MenuContent>
                          @if (editTask)
                          {
                            <a class="dropdown-item">@plan.name</a>
                          }
                        </MenuContent>
                      </Dropdown>
                    }
                    else
                    {
                      <a class="icon-text">
                        <span class=" text_1_line" style="height:unset">@plan.name</span>
                      </a>
                    }
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Nhóm công việc:
                  </div>
                  <div class="control is-expanded">
                    @if (isEditSection)
                    {
                      if (editTask)
                      {
                        <Dropdown CloseOnClickMenu=false MenuStyle="width:200px">
                          <Trigger>
                            <a class="icon-text">
                              <span class=" text_1_line" style="height:unset">
                                @(sections != null ? sections.name : "Chọn nhóm công việc")
                              </span>
                              <span class="icon">
                                <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                              </span>
                            </a>
                          </Trigger>
                          <MenuContent>
                            @if (editTask)
                            {
                              @if (WorkService.RoleInPlan(plan, Layout.User.id) == 1)
                              {
                                <div class="p-2">
                                  <div class="field has-addons">
                                    <div class="control is-expanded">
                                      <input @bind="sectionNew" class="input is-small" type="text" placeholder="Thêm nhóm công việc">
                                    </div>
                                    <div class="control">
                                      <a class="button is-small is-link" @onclick="AddSection">
                                        <span class="icon">
                                          <i class="material-icons-outlined is-size-5">add</i>
                                        </span>
                                      </a>
                                    </div>
                                  </div>
                                </div>
                              }
                              @foreach (var item in sectionsList)
                              {
                                <a class="dropdown-item" @onclick="() => UpdateSection(item.id)">@item.name</a>
                              }
                            }
                          </MenuContent>
                        </Dropdown>
                      }
                      else
                      {
                        <a class="icon-text">
                          <span class="text_1_line" style="height:unset">@sections.name</span>
                        </a>
                      }
                    }
                    else
                    {
                      <a class="icon-text">
                        <span class="text_1_line" style="height:unset">@sections.name</span>
                      </a>
                    }

                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Mức độ ưu tiên:
                  </div>
                  <div class="control is-expanded">
                    @if (editTask)
                    {
                      <Dropdown>
                        <Trigger>
                          <a class="icon-text">
                            <span style="color: @priority.color;">@(task.priority != 0 ? priority.name : "Chọn mức độ")</span>
                            <span class="icon">
                              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                            </span>
                          </a>
                        </Trigger>
                        <MenuContent>
                          @if (editTask)
                          {
                            <a class="dropdown-item is-hidden" @onclick="() => UpdatePriorty(0)">Trống</a>
                            @foreach (var item in WorkService.Priority())
                            {
                              <a class="dropdown-item" style="color: @item.color;"
                              @onclick="() => UpdatePriorty(item.id)">@item.name</a>
                            }
                          }
                        </MenuContent>
                      </Dropdown>
                    }
                    else
                    {
                      <a class="icon-text">
                        <span style="color: @priority.color;">@(task.priority != 0 ? priority.name : "Chưa chọn")</span>
                      </a>
                    }
                  </div>
                </div>
                <div class="field is-grouped">
                  <div class="control has-text-grey" style="width: 120px;">
                    Nhãn công việc:
                  </div>
                  <div class="control is-expanded">
                    <_LabelList labels="task.labels" sources="plan.labels" isEdit="editTask" OnUpdate="UpdateLabels" />
                  </div>
                </div>
                @if (ProductService.CheckStorage(Layout.Company))
                {
                  if (editTask)
                  {
                    <div class="field is-grouped">
                      <div class="control has-text-grey" style="width: 120px;">
                        File đính kèm:
                      </div>
                      <div class="control is-expanded" style="width: calc(100% - 132px)">
                        <FileUpload Path="work/task/detail" Multiple="true" Small="true" Cloud="true" OnUpload="x => task.files.AddRange(x)" />
                      </div>
                    </div>
                    <div class="pb-3">
                      <FileViews Delete="true" Values="task.files" />
                    </div>
                  }
                  else if (task.files.Count > 0)
                  {
                    <div class="field is-grouped" style="align-items: flex-start;">
                      <div class="control has-text-grey pt-1" style="width: 120px;">
                        File đính kèm:
                      </div>
                      <div class="control is-expanded" style="width: calc(100% - 132px)">
                        <FileViews Values="task.files" />
                      </div>
                    </div>
                  }
                }
                <div class="field is-flex is-flex-direction-column" style="flex: 1 1 0%">
                  <div class="control has-text-grey mb-2">Mô tả công việc:</div>
                  @if (editTask)
                  {
                    <div class="control" style="flex: 1 1 0%;">
                      <InputArea Style="min-height:200px"
                                 Class="textarea is-small is_bg"
                                 Title="Nhập mô tả công việc..."
                                 Value="@task.detail" OnInput="x => task.detail = x" />
                    </div>
                  }
                  else
                  {
                    <div class="content is-size-7" style="flex: 1 1 0%">
                      @((MarkupString)Shared.TextToHtml(task.detail))
                    </div>
                  }
                </div>
                @if (editTask)
                {
                  <div class="buttons is-right">
                    <a class="button is-link is-small @(isLoadingAddMembers ? "is-loading" : "")" @onclick="Update">
                      <span class="icon">
                        <i class="material-icons-round is-size-6">done</i>
                      </span>
                      <span>Hoàn tất</span>
                    </a>
                    <a class="button has-text-danger is-small" @onclick="Cancel">
                      <span class="icon">
                        <i class="material-icons-round is-size-6">close</i>
                      </span>
                      <span>Hủy</span>
                    </a>
                  </div>
                }
              </li>
            }
            else if (tab == 2)
            {
              <li class="column is-10 is-size-7 p-4 is-flex is-flex-direction-column">
               <_TaskSubList parent="task" tasks="subTasks" editRole="editTask" members="members" OnUpdate="OnUpdate" OnChanged="() => OnChanged()"/>
              </li>
            }
            else if (tab == 3)
            {
              <li class="column is-10 is-size-7 p-4 is-flex is-flex-direction-column">
                <_TaskTodolist task="task" todos="todoItems" editRole="editTask" />
              </li>
            }
            else if (tab == 4)
            {
              <li class="column is-10 is-size-7 p-4"
                  style="overflow: hidden; display: flex;flex-direction: column;">
                <_TaskComments plan="plan" task="task" editRole="editTask" members="members" />
              </li>
            }
            else if (tab == 5)
            {
              <li class="column is-10 is-size-7 p-4">
                <div class="has-text-grey">Lịch sử cập nhật</div>
                <div class="scrolly py-1 px-2" style="height: calc(100vh - 180px);">
                  <_PlanLogs logs="logs" />
                </div>
              </li>
            }
            else if (tab == 6)
            {
              <li class="column is-10 is-size-7 p-4 has-text-info">
                <div class="has-text-grey mb-1">Xóa công việc</div>
                <div class="font_14 mb-2">
                  Toàn bộ dữ liệu của công việc như file đính kèm, công việc phụ, bình luận của bạn và các thành viên sẽ bị xóa và không thể khôi phục.
                </div>
                <a class="button is-danger" @onclick="Delete">
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">delete</i>
                  </span>
                  <span>Xóa công việc</span>
                </a>

                <div class="has-text-grey mb-1 mt-6">Rời khỏi công việc</div>
                <div class="font_14 mb-2">
                  Bạn sẽ rời khỏi công việc và không nhận thông báo mới. Dữ liệu của công việc không bị ảnh hưởng.
                </div>
                <a class="button is-info" @onclick="OutTask">
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">remove</i>
                  </span>
                  <span>Rời khỏi</span>
                </a>
              </li>
            }
            else if (tab == 7)
            {
              <li class="column is-10 is-size-7 p-4">
                <_TaskFiles parent="task" />
              </li>
            }
          </ul>
        </section>
      }
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public WorkPlanModel.Task task { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public int tab { get; set; }
  [Parameter]
  public EventCallback<int> tabChanged { get; set; }
  [Parameter]
  public List<WorkPlanModel.Task> subTasks { get; set; } = new();
  [Parameter]
  public List<TodolistModel.Todo> todoItems { get; set; } = new();
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public bool isViewCalendar { get; set; }
  [Parameter]
  public string sheetId {get; set;}
  [Parameter]
  public bool isEditSection {get; set;}

  private List<WorkLogModel> logs = new();
  private bool isChange = false;
  private bool isLoadingAddMembers = false;



  protected override void OnInitialized()
  {
    var hubConnection = hubService.GetHubConnection();
    if (task != null && string.IsNullOrEmpty(task.id))
    {
      if (task.date_start == 0)
        task.date_start = DateTime.Today.Ticks;
      if (task.date_end == 0)
        task.date_end = (DateTime.Today.AddDays(7) + new TimeSpan(23, 59, 00)).Ticks;
    }
  }

  private async Task OnChanged(string message = "")
  {
    var hubConnection = hubService.GetHubConnection();
    if (hubConnection is not null)
      await hubConnection.SendAsync("TaskUpdate", plan.id, Layout.User.id, Layout.Company.id, message);

    Console.WriteLine(message);
  }

  private void Reset()
  {
    task = null;
    isChange = false;
    todoItems = new();
    logs = new();
  }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(task);
    Reset();
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa công việc {task.name}. Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return true;

      foreach (var user in plan.members)
        await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, task.id, user.id, Layout.User.id);

      await DbWorkTask.Delete(Layout.Company.id, task.id);
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", task.name, task.plan_id, null, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
      await OnChanged();
      await OnUpdate.InvokeAsync(task);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> OutTask()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện rời khỏi công việc {task.name}. Bạn sẽ không nhận được thông báo cập nhật về công việc.\nBạn có chắc chắn muốn thực hiện?"))
        return true;
      // Tự xóa khỏi người thực hiện công việc
      task.members.RemoveAll(x => x.id == Layout.User.id);
      await DbWorkTask.Update(Layout.Company.id, task);
      await WorkService.CreateLog(Layout.Company.id, Layout.User.FullName, "Đã rời khỏi công việc", task.plan_id, task.id, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Bạn đã tự rời khỏi công việc!");
      await OnChanged();
      await OnUpdate.InvokeAsync(task);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OutTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task Update()
  {
    isLoadingAddMembers = true;
    try
    {
      if (await Validation())
      {
        if (string.IsNullOrEmpty(task.id))
        {
          if (task.date_start == 0)
            task.date_start = DateTime.Today.Ticks;
          if (task.date_end == 0)
            task.date_end = (DateTime.Today + new TimeSpan(23, 59, 59)).Ticks;

          // Lưu vào database
          task = await DbWorkTask.Create(Layout.Company.id, task);
          // Lưu lịch sử
          await WorkService.CreateLog(Layout.Company.id, "Khởi tạo công việc", task.name, task.plan_id, task.id, Layout.User);
          // Thông báo email
          if (task.members.Where(x => x.id != Layout.User.id).Count() > 0)
          {
            var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
            var userList = shareStorage.MemberList;
            var userInfo = task.members
                            .Where(x => x.id != Layout.User.id)
                            .Select(x => UserService.GetMember(userList, x.id))
                            .ToList();
            userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

            var send = new Task(() =>
            {
              EmailService.AssignedJob(userInfo, Layout.User.FullName, plan.name, $"{navigation.BaseUri}work/{plan.id}/task", task.name, out string message);
            });

            send.Start();
          }
          // Thông báo chuông
          foreach (var user in task.members)
          {
            await DbNotify.ForPlan(Layout.Company.id, 708, plan.id, task.id, user.id, Layout.User.id);
          }

          if (isViewCalendar)
          {
            var section = plan.sections.SingleOrDefault(x => x.id == task.section_id);
            string start = new DateTime(task.date_start).ToString("dd/MM");
            string end = new DateTime(task.date_end).ToString("dd/MM");
            await JSRuntime.InvokeVoidAsync("tagline", true, $"Công việc {task.name} đã được tạo vào nhóm công việc {section.name}. Thời hạn diễn ra từ {start} - {end}.");
          }
          else
            await JSRuntime.InvokeVoidAsync("tagline", true, "Đã tạo công việc thành công!");
          await OnChanged(newSection ? "PlanChanged" : "");
        }
        else
        {
          var old = await DbWorkTask.Get(Layout.Company.id, task.id);
          if (task.name != old.name)
          {
            // Thông báo chuông
            foreach (var user in task.members)
              await DbNotify.ForPlan(Layout.Company.id, 709, plan.id, task.id, user.id, Layout.User.id);
            // Lưu lịch sử
            await WorkService.CreateLog(Layout.Company.id, "Cập nhật tiêu đề", task.name, task.plan_id, task.id, Layout.User);
          }
          // Lưu vào database
          await DbWorkTask.Update(Layout.Company.id, task);
          await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin công việc!");
          await OnChanged(newSection ? "PlanChanged" : "");
          await OnUpdate.InvokeAsync(task);
          Reset();
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDB()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    finally
    {
      isLoadingAddMembers = false;
    }
  }

  private async Task<bool> Validation()
  {
    if (Shared.IsEmpty(task.name))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập tiêu đề của công việc!");
    else if (task.members.Count == 0)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Chọn người tham gia của công việc!");
    else if (task.date_start >= task.date_end)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");
    else if (string.IsNullOrEmpty(task.section_id))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa chọn nhóm của công việc!");
    else
      return true;
    return false;
  }

  private async Task UpdateDB()
  {
    try
    {
      if (!string.IsNullOrEmpty(task.id))
      {
        await DbWorkTask.Update(Layout.Company.id, task);
        isChange = true;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDB()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task UpdateMembers()
  {
    if (isLoadingAddMembers)
    {
      return;
    }
    isLoadingAddMembers = true;
    try
    {
      var old = await DbWorkTask.Get(Layout.Company.id, task.id);
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);

      if (old != null)
      {
        var differingMembers = task.members.Where(x => !old.members.Any(y => y.id == x.id)).ToList();
        if (differingMembers.Count > 0)
        {
          var list = shareStorage.MemberList;
          var userInfo = differingMembers.Select(x => WorkService.ConvertToMember(list, x)).ToList();
          userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

          var send = new Task(() =>
          {
            EmailService.AssignedJob(userInfo, Layout.User.FullName, plan.name, $"{navigation.BaseUri}work/{plan.id}/task", task.name, out string message);
          });

          send.Start();
        }
        await UpdateDB();
        await WorkService.LogTaskMembers(Layout.Company.id, old, task, Layout.User, shareStorage.MemberList);

        await OnChanged();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    finally
    {
      isLoadingAddMembers = false;
    }
  }

  private async Task ChangeStatus(int statusId)
  {
    isLoadingAddMembers = true;
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      if (!string.IsNullOrEmpty(task.id))
      {
        var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, task, statusId);
        if (statusId == 4)
        {
          // Thông báo mail
          if (task.members.Where(x => x.id != Layout.User.id).Count() > 0)
          {
            var userList = shareStorage.MemberList;
            var userInfo = task.members
                            .Where(x => x.id != Layout.User.id)
                            .Select(x => UserService.GetMember(userList, x.id))
                            .ToList();
            userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

            var send = new Task(() =>
            {
              EmailService.DoneJob(userInfo, Layout.User.FullName, plan.name, task.name, $"{navigation.BaseUri}work/{plan.id}/task", out string _message);
            });
            send.Start();
          }
        }
        await JSRuntime.InvokeVoidAsync("tagline", true, message);
        isChange = true;

        await OnChanged();
      }
      else
        task.status = statusId;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    finally
    {
      isLoadingAddMembers = false;
    }
  }

  private async Task UpdateDateStart(long range)
  {
    task.date_start = range;
    if (task.date_end == 0)
    {
      var dateEnd = new DateTime(range).ToString("yyyy-MM-dd, 23:55:00");
      task.date_end = Convert.ToDateTime(dateEnd).AddDays(7).Ticks;
    }
    await UpdateDate();
  }

  private async Task UpdateDateEnd(long range)
  {
    task.date_end = range;
    await UpdateDate();
  }

  private async Task<bool> UpdateDate()
  {
    bool _success = true;
    try
    {
      if (task.date_start < task.date_end)
      {
        if (!string.IsNullOrEmpty(task.id))
          await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thực hiện", string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(task.date_start), new DateTime(task.date_end)), task.plan_id, task.id, Layout.User);

        await UpdateDB();
        await OnChanged();
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");

    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private string sectionNew = string.Empty;
  private bool newSection;

  private async Task<bool> AddSection()
  {
    bool _success = true;
    try
    {
      newSection = false;
      if (Shared.IsEmpty(sectionNew))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề nhóm công việc!");
      else
      {
        newSection = true;
        var item = new WorkPlanModel.Section()
          {
            id = Mongo.RandomId(),
            name = sectionNew,
            pos = plan.sections.Count,
            sheet = sheetId
          };
        plan.sections.Add(item);
        await DbWorkPlan.Update(Layout.Company.id, plan);
        await WorkService.CreateLog(Layout.Company.id, "Thêm nhóm công việc", item.name, plan.id, null, Layout.User);
        // Thông báo chuông
        foreach (var user in plan.members)
          await DbNotify.ForPlan(Layout.Company.id, 702, plan.id, item.id, user.id, Layout.User.id);

        await UpdateSection(item.id);
        sectionNew = string.Empty;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AddSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateSection(string id)
  {
    bool _success = true;
    try
    {
      task.section_id = id;
      await UpdateDB();
      if (!string.IsNullOrEmpty(task.id))
      {
        var section = plan.sections.SingleOrDefault(x => x.id == task.section_id);
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật nhóm công việc", section.name, task.plan_id, task.id, Layout.User);
      }
      await OnChanged(newSection ? "PlanChanged" : "");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdatePriorty(int id)
  {
    bool _success = true;
    try
    {
      task.priority = id;
      await UpdateDB();
      if (!string.IsNullOrEmpty(task.id))
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật mức độ ưu tiên", WorkService.Priority(task.priority).name, task.plan_id, task.id, Layout.User);

      await OnChanged();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdatePriorty()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateLabels()
  {
    await UpdateDB();
  }

  private async Task ChangeTab(int index)
  {
    try
    {
      var editRole = WorkService.RoleEditTask(plan, task, Layout.User.id);
      tab = index;
      await tabChanged.InvokeAsync(tab);
      if (index == 1 && editRole)
      {
        await JSRuntime.InvokeVoidAsync("setFocus", "task_name");
        await JSRuntime.InvokeVoidAsync("textAutoSize", "task_name");
      }
      else if (index == 2)
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, task.plan_id, task.id);
      else if (index == 3)
        todoItems = await DbTodoItem.GetList(Layout.Company.id, task.id, Layout.User.id);
      else if (index == 4)
      {
        if (editRole)
        {
          await JSRuntime.InvokeVoidAsync("setFocus", "task_comment");
          await JSRuntime.InvokeVoidAsync("textAutoSize", "task_comment");
        }
      }
      else if (index == 5)
        logs = await DbWorkLog.GetListTask(Layout.Company.id, task.plan_id, task.id);

    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }

  }

  private async Task CreateWarning()
  {
    await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn cần hoàn thành tạo công việc trước!");
  }

}