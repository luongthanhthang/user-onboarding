@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<Dropdown Toggle=toggle
          DropdownClass="@(isRight ? "is-right" : "")"
          MenuStyle="width: 300px;max-height: none;"
          MenuClass="px-3"
          OnToggle="Toggle">
  <Trigger>
    <div class="tags" style="@(Layout.IsMobile ? "" : "flex-wrap: nowrap;")">
      @foreach (var item in ShortList())
      {
        <span class="tag @(Layout.IsMobile ? "" : "is_short")" title="@item.name"
              style="background: @(item.color + "30"); color: @item.color;">@item.name</span>
      }
      @if (isEdit)
      {
        <a class="tag is-white icon is-bordered has-text-grey">
          <i class="material-icons-outlined is-size-6">add</i>
        </a>
      }
      else
      {
        <a class="tag is-white icon has-text-grey">
          <i class="material-icons-outlined is-size-5">@(toggle ? "expand_more" : "chevron_right")</i>
        </a>
      }
    </div>
  </Trigger>
  <MenuContent>
    @if (sources.Count > 0)
    {
      <div class="tags">
        @foreach (var item in sources)
        {
          if (isEdit)
          {
            <span class="tag" style="background: @(item.color + "30"); color: @item.color;">
              @if (labels.Contains(item.id))
              {
                <a class="icon has-text-danger" @onclick="() => RemoveItem(item.id)">
                  <i class="material-icons-outlined is-size-6">remove_circle_outline</i>
                </a>
              }
              else
              {
                <a class="icon has-text-success" @onclick="() => AddItem(item.id)">
                  <i class="material-icons-outlined is-size-6">add_circle_outline</i>
                </a>
              }
              <span>@item.name</span>
            </span>
          }
          else if (labels.Contains(item.id))
          {
            <span class="tag" style="background: @(item.color + "30"); color: @item.color;">
              @item.name
            </span>
          }
        }
      </div>
    }
    else
    {
      <div class="has-text-grey">Chưa có nhãn công việc</div>
    }
    @if (isEdit)
    {
      <hr class="dropdown-divider">
      <div class="buttons is-right">
        <a class="button is-link is-small" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span class="is-size-7">Hoàn tất</span>
        </a>
        <a class="button is-danger is-small" @onclick="() => Toggle(false)">
          <span class="icon">
            <i class="material-icons-round is-size-6">close</i>
          </span>
          <span class="is-size-7">Hủy</span>
        </a>
      </div>
    }
  </MenuContent>
</Dropdown>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<string> labels { get; set; } = new();
  [Parameter]
  public List<WorkPlanModel.Label> sources { get; set; } = new();
  [Parameter]
  public bool isRight { get; set; }
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback OnUpdate { get; set; }


  private bool toggle = false;

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      // TODO: Chuẩn hóa dữ liệu -> Xóa những label không tồn tại
      toggle = false;
      await OnUpdate.InvokeAsync();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task Toggle(bool value)
  {
    toggle = value;
  }

  private List<WorkPlanModel.Label> ShortList()
  {
    var results = new List<WorkPlanModel.Label>();
    for (int i = 0; i < labels.Count; i++)
    {
      var item = sources.SingleOrDefault(x => x.id == labels[i]);
      if (item != null)
      {
        results.Add(item);
        if (i == 1)
          break;
      }
    }
    if (labels.Count > 2)
      results.Add(new() { name = $"+{labels.Count - 2}", color = "#0F913D" });

    return results;
  }

  private void AddItem(string id)
  {
    if (!labels.Contains(id))
      labels.Add(id);
  }

  private void RemoveItem(string id)
  {
    labels.Remove(id);
  }
}