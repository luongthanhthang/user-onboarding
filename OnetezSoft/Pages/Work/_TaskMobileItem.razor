@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(model.priority);
  var toggle = toggleList.Contains(model.id);
  var deadline = WorkService.TaskDeadline(model);
}

<div id="task_@model.id" class="task_mobile is-size-7">
  <ul class="columns is-multiline is-vcentered is-variable is-1 is-mobile" style="border-color: @priority.color;">
    <li class="column is-11 has-text-weight-medium">
      <a class="text_inline font_14 has-text-@(model.status == 4 ? "success is-line-through " : "black")"
      @onclick="Edit">
        @model.name
      </a>
    </li>
    <li class="column is-1 has-text-centered">
      @if (editRole)
      {
        <Dropdown DropdownClass="is-right" CloseOnClickMenu=true>
          <Trigger>
            <a class="icon is-small">
              <i class="material-icons-outlined is-size-6">more_horiz</i>
            </a>
          </Trigger>
          <MenuContent>
            <a class="dropdown-item" @onclick="ViewSub">Tạo công việc phụ</a>
            <a class="dropdown-item" @onclick="AddTodo">Tạo Todolist liên kết</a>
            <a class="dropdown-item has-text-danger" @onclick="Delete">Xóa công việc này</a>
          </MenuContent>
        </Dropdown>
      }
    </li>
    <li class="column @(deadline != null ? "is-half" : "is-full")">
      @if (isTeam)
      {
        string start = new DateTime(model.date_start).ToString("dd/MM");
        string end = new DateTime(model.date_end).ToString("dd/MM");
        <div class="icon-text">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">event</i>
          </span>
          <span>@(start + " - " + end)</span>
        </div>
      }
      else
      {
        <_InputDate 
          @bind-Start="model.date_start"
          @bind-End="model.date_end"
          HasTime
          Minimal
          IsRange
          Format="dd/MM"
          DefaultString="Thời gian"
          OnRangeSelect="UpdateTime" />
      }
     </li>
     @if (deadline != null)
    {
      <li class="column is-half">
        <span class="tag" style="background: @(deadline.color + "30"); color: #555;">
          @deadline.name
        </span>
      </li>
    }
    <li class="column is-half">
      @if (editRole)
      {
        <Dropdown CloseOnClickMenu=true>
          <Trigger>
            <a class="icon-text">
              <span class="tag @status.color">@status.name</span>
              <span class="icon is-small">
                <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
              </span>
            </a>
          </Trigger>
          <MenuContent>
            @foreach (var item in WorkService.Status())
            {
              <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
            }
          </MenuContent>
        </Dropdown>
      }
      else
      {
        <span class="tag @status.color">@status.name</span>
      }
    </li>
    <li class="column is-half has-text-right">
      <_MemberList members="model.members" sources="members"
                   isEdit="editRole" isTask="true" isRight="true" OnUpdate="UpdateMembers" />
    </li>
    @if (model.sub_task > 0)
    {
      <li class="column is-full">
        <a class="icon-text" @onclick="Toggle">
          <span class="font_14">Công việc phụ</span>
          <span class="icon-text">
            <i class="material-icons-outlined is-size-6">@(toggle ? "arrow_drop_down" : "arrow_right")</i>
          </span>
        </a>
      </li>
      @if (toggle)
      {
        <li class="column is-full">
          @foreach (var child in subTasks)
          {
            <_TaskMobileChild 
              model="child" 
              parent="model" 
              members="members"
              isEdit="@(isTeam ? false : editRole ? true : child.members.Find(x => x.id == Layout.User.id) != null)"
              OnUpdate="UpdateSubTasks"
              isTeam="isTeam"
              OnView="ViewSub" />
          }
        </li>
      }
    }
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel plan { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public bool isTeam { get; set; }
  [Parameter]
  public bool showPlan { get; set; }
  [Parameter]
  public List<string> toggleList { get; set; }
  [Parameter]
  public EventCallback<string> OnToggle { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnAddSub { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnTodolist { get; set; }


  private List<WorkPlanModel.Task> subTasks = new();

  private async Task<bool> Toggle()
  {
    bool _success = true;
    try
    {
      if (toggleList.Contains(model.id))
        subTasks = new();
      else
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await OnToggle.InvokeAsync(model.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Toggle()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Edit()
  {
    bool _success = true;
    try
    {
      await OnEdit.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Edit()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task ViewSub()
  {
    await OnAddSub.InvokeAsync(model);
  }

  private async Task<bool> AddTodo()
  {
    bool _success = true;
    try
    {
      await OnTodolist.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AddTodo()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Delete()
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{model.name}\". Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return true;
      // Thông báo chuông
      foreach (var user in plan.members)
        await DbNotify.ForPlan(Layout.Company.id, 717, plan.id, model.id, user.id, Layout.User.id);
      // Xóa công việc
      await DbWorkTask.Delete(Layout.Company.id, model.id);
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", model.name, model.plan_id, null, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");
      await OnUpdate.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Delete()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateTime(DateRange e)
  {
    bool _success = true;
    try
    {
      if (model.date_start < model.date_end)
      {
        await DbWorkTask.Update(Layout.Company.id, model);
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật thời gian thực hiện",
          string.Format("Bắt đầu {0:dd/MM/yyyy}, kết thúc {1:dd/MM/yyyy}", new DateTime(model.date_start), new DateTime(model.date_end)), model.plan_id, model.id, Layout.User);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateTime()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangePriorty(int id)
  {
    bool _success = true;
    try
    {
      model.priority = id;
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.CreateLog(Layout.Company.id, "Cập nhật mức độ ưu tiên",
      WorkService.Priority(model.priority).name, model.plan_id, model.id, Layout.User);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangePriorty()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int statusId)
  {
    bool _success = true;
    try
    {
      var message = await WorkService.ChangeTaskStatus(Layout.Company.id, Layout.User, model, statusId);
      if (statusId == 4)
        subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, message);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      await DbWorkTask.Update(Layout.Company.id, model);
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, shareStorage.MemberList);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateSubTasks(WorkPlanModel.Task item)
  {
    bool _success = true;
    try
    {
      if (item != null)
      {
        var check = await DbWorkTask.Get(Layout.Company.id, item.id);

        if (check == null)
        {
          var memberIds = plan.members.Select(x => x.id);
          var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
          var editMembers = shareStorage.MemberList.Where(x => memberIds.Contains(x.id)).ToList();

          await DbWorkTask.Create(Layout.Company.id, item);
          await WorkService.CreateLog(Layout.Company.id, "Thêm công việc phụ", item.name, model.plan_id, model.id, Layout.User);
          await WorkService.LogTaskMembers(Layout.Company.id, null, item, Layout.User, editMembers);
        }
      }

      subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.plan_id, model.id);
      if (subTasks.Count == 0 && toggleList.Contains(model.id))
      {
        await OnToggle.InvokeAsync(model.id);
      }
      await WorkService.UpdateSubTaskCount(Layout.Company.id, model.id, subTasks.Count);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateSubTasks()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}
