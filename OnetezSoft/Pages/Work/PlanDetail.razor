@page "/work/{PlanId}"
@page "/work/{PlanId}/detail"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>Tổng quan kế hoạch</PageTitle>

<section id="page_fwork" class="main_content plan  @(url == "/work" ? "is_nav" : "is_data") @(Layout.IsMobile ? "" : Layout.User.custom.sidebar_fwork ? "" : "is-less")">
  @if (!Layout.IsMobile || (url == "/work"))
  {
    <div class="card is_nav @(Layout.IsMobile ? "" : Layout.User.custom.sidebar_fwork ? "" : "is-less")" style="height:100%; position: relative; border-radius: unset">
      <_PlanSidebar navLess="Layout.User.custom.sidebar_fwork" />
      @if (!Layout.IsMobile)
      {
        if (Layout.User.custom.sidebar_fwork)
        {
          <div class="sidebar-plan-icon">
            <div title="Đóng lại '['" class="sidebar-plan-icon-container" @onclick="ToogleSidebar">
              <span class="icon is-size-5 has-text-white">
                <i class="material-icons-outlined">navigate_before</i>
              </span>
            </div>
          </div>
        }
        else
        {
          <div class="sidebar-plan-icon">
            <div title="Mở ra ']'" class="sidebar-plan-icon-container is-white" @onclick="ToogleSidebar">
              <span class="icon is-size-5 has-text-grey">
                <i class="material-icons-outlined">navigate_next</i>
              </span>
            </div>
          </div>
        }
      }
    </div>
  }
  @if (!Layout.IsMobile || url != "/work")
  {
    <div class="is_expanded is_data flex_column is_fullheight" style="overflow:hidden;">
      @if (model != null && string.IsNullOrEmpty(model.id))
      {
        <_PlanHeader model="model" OnChangeView="ChangeView" />
      }
      else if (model != null)
      {
        var status = WorkService.StatusPlan(model.status);

        <_PlanHeader model="model" OnChangeView="ChangeView" />
        <div 
          class="flex_column @(Layout.IsMobile ? "px-4 pt-4" : "")"
          style="flex:1;@(Layout.IsMobile ? "" : "overflow:hidden")">
          <ul 
            class="columns is-multiline is-variable is-2" 
            style="flex:1;@(Layout.IsMobile ? "" : "overflow:hidden")">
            <li 
              class="column is-three-quarters is-full-mobile flex_column" 
              style="@(Layout.IsMobile ? "" : "height:100%")">
              <div class="scrolly" style="flex:1;">
                <div class="field is-grouped is-fullwidth mb-2">
                  <div class="control is-expanded">
                    <div class="title is-5 has-text-info">THÔNG TIN CHUNG</div>
                  </div>
                  <div class="control">
                    @if (editMode)
                    {
                      <div class="field is-grouped is-grouped-right">
                        <div class="control">
                          <a class="button is-link is-small" @onclick="UpdateContent">
                            <span class="icon">
                              <i class="material-icons-round is-size-6">done</i>
                            </span>
                            <span>Cập nhật</span>
                          </a>
                        </div>
                        <div class="control">
                          <a class="button has-text-danger is-small" @onclick="ToggleEdit">
                            <span class="icon">
                              <i class="material-icons-round is-size-6">close</i>
                            </span>
                            <span>Hủy</span>
                          </a>
                        </div>
                      </div>
                    }
                    else
                    {
                      @if (editRole)
                      {
                        <a class="icon-text has-text-link" @onclick="ToggleEdit">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">edit</i>
                          </span>
                          <span>Chỉnh sửa</span>
                        </a>
                      }
                    }
                  </div>
                </div>
                <div class="inner_section mb-4">
                  <div class="" style="height: 100%">
                    <ul class="columns is-multiline is-variable is-1 is-size-7 is-mobile">
                      @if (editMode)
                      {
                        <li class="column is-full">
                          <div class="control has-icons-right">
                            <input @bind="model.name" id="plan_name" type="text"
                                   class="input has-text-weight-medium is_bg" placeholder="Nhập tiêu đề kế hoạch">
                            <span class="icon is-right has-text-dark">
                              <i class="material-icons-outlined is-size-5">edit</i>
                            </span>
                          </div>
                        </li>
                        <li class="column is-full">
                          <div class="field">
                            <label class="label has-text-grey">Mô tả</label>
                            <div class="control">
                              <textarea @bind="model.detail" class="textarea is-small is_bg"
                                        id="plan_detail" placeholder="Nhập mô tả kế hoạch..." rows="5" />
                            </div>
                          </div>
                        </li>
                      }
                      else
                      {
                        @if (!string.IsNullOrEmpty(model.detail))
                        {
                          <li class="column is-full">
                            <div class="has-text-grey">Mô tả:</div>
                            <div class="content has-text-justified pb-2">
                              @((MarkupString)Shared.TextToHtml(model.detail))
                            </div>
                          </li>
                        }
                      }
                      @if (editRole)
                      {
                        <li class="column is-one-fifth-tablet is-half-mobile">
                          <span class="has-text-grey">Chế độ bảo mật</span>
                        </li>
                        <li class="column is-four-fifths-tablet is-half-mobile">
                          <Dropdown CloseOnClickMenu=true>
                            <Trigger>
                              <a class="icon-text">
                                <span class="icon is-small mr-2">
                                  <i class="material-icons-outlined is-size-6">@(model.is_private ? "lock" : "public")</i>
                                </span>
                                <span>@(model.is_private ? "Riêng tư" : "Công khai")</span>
                                <span class="icon has-text-grey">
                                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                                </span>
                              </a>
                            </Trigger>
                            <MenuContent>
                              <a class="dropdown-item" @onclick="() => UpdatePrivate(true)">Riêng tư</a>
                              <a class="dropdown-item" @onclick="() => UpdatePrivate(false)">Công khai</a>
                            </MenuContent>
                          </Dropdown>
                        </li>
                        <li class="column is-one-fifth-tablet is-half-mobile">
                          <span class="has-text-grey">Trạng thái</span>
                        </li>
                        <li class="column is-four-fifths-tablet is-half-mobile">
                          <Dropdown CloseOnClickMenu=true>
                            <Trigger>
                              <a class="icon-text">
                                <span class="icon is-small mr-2">
                                  <i class="material-icons-outlined is-size-6">@status.icon</i>
                                </span>
                                <span>@status.name</span>
                                <span class="icon has-text-grey">
                                  <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                                </span>
                              </a>
                            </Trigger>
                            <MenuContent>
                              @foreach (var item in WorkService.StatusPlan())
                              {
                                <a class="dropdown-item icon-text" @onclick="() => UpdateStatus(item.id)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">@item.icon</i>
                                  </span>
                                  <span>@item.name</span>
                                </a>
                              }
                            </MenuContent>
                          </Dropdown>
                        </li>
                        <li class="column is-one-fifth-tablet is-half-mobile">
                          <span class="has-text-grey">Ngày kết thúc</span>
                        </li>
                        <li class="column is-four-fifths-tablet is-half-mobile">
                          <_InputDate IsFull=false
                                      Start="model.date_end"
                                      StartChanged="UpdateDateEnd"
                                      DefaultString="Chọn ngày kết thúc"
                                                                Minimal />
                        </li>
                        <li class="column is-one-fifth-tablet is-half-mobile">
                          <span class="has-text-grey">Người tham gia</span>
                        </li>
                        <li class="column is-four-fifths-tablet is-half-mobile">
                          <_MemberPlan members="model.members" sources="shareStorage.MemberList" isEdit="editRole"
                                       OnUpdate="UpdateMembers" />
                        </li>
                      }
                      else
                      {
                        <li class="column is-one-fifth">
                          <span class="has-text-grey">Chế độ bảo mật</span>
                        </li>
                        <li class="column is-four-fifths">
                          <span class="icon-text">
                            <span class="icon is-small mr-2">
                              <i class="material-icons-outlined is-size-6">@(model.is_private ? "lock" : "public")</i>
                            </span>
                            <span>@(model.is_private ? "Riêng tư" : "Công khai")</span>
                          </span>
                        </li>
                        <li class="column is-one-fifth">
                          <span class="has-text-grey">Trạng thái</span>
                        </li>
                        <li class="column is-four-fifths">
                          <a class="icon-text">
                            <span class="icon is-small mr-2">
                              <i class="material-icons-outlined is-size-6">@status.icon</i>
                            </span>
                            <span>@status.name</span>
                          </a>
                        </li>
                        <li class="column is-one-fifth">
                          <span class="has-text-grey">Ngày kết thúc</span>
                        </li>
                        <li class="column is-four-fifths">
                          @if (model.date_end > 0)
                          {
                            <span class="icon-text">
                              <span class="icon is-small mr-2">
                                <i class="material-icons-outlined is-size-6">calendar_today</i>
                              </span>
                              <span>@(new DateTime(model.date_end).ToString("dd/MM/yyyy"))</span>
                            </span>
                          }
                        </li>
                        <li class="column is-one-fifth">
                          <span class="has-text-grey">Người tham gia</span>
                        </li>
                        <li class="column is-four-fifths">
                          <_MemberPlan members="model.members" sources="shareStorage.MemberList" />
                        </li>
                      }
                    </ul>
                  </div>
                </div>
                <div class="field is-grouped is-fullwidth mb-2">
                  <div class="control is-expanded">
                    <div class="title is-5 has-text-info">NHÃN CÔNG VIỆC</div>
                  </div>
                </div>
                <div class="inner_section mb-4">
                  @if (editRole)
                  {
                    <div class="field is-grouped">
                      <div class="control @(Layout.IsMobile ? "is-expanded" : "")"
                           style="@(Layout.IsMobile ? "" : "width: 50%;")">
                        <input @bind="label.name" class="input is_bg" type="text" placeholder="Nhập tiêu đề nhãn">
                      </div>
                      <div class="control">
                        <div class="input_color" style="background: @(label.color + "30"); color: @label.color;">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-5">palette</i>
                          </span>
                          <input @bind="label.color" type="color">
                        </div>
                      </div>
                      <div class="control">
                        <a class="button is-link" @onclick="UpdateLabel">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-5">
                              @(string.IsNullOrEmpty(label.id) ? "add" : "done")
                            </i>
                          </span>
                        </a>
                      </div>
                    </div>
                    @if (model.labels.Count > 0)
                    {
                      <div class="has-text-grey py-2">Chọn nhãn để chỉnh sửa</div>
                      <div class="tags">
                        @foreach (var item in model.labels)
                        {
                          <span class="tag" style="background: @(item.color + "30"); color: @item.color;">
                            <span class="mr-2" @onclick="() => label = item">@item.name</span>
                            <a class="delete is-small" @onclick="() => RemoveLabel(item)"></a>
                          </span>
                        }
                      </div>
                    }
                  }
                  else
                  {
                    <div class="tags">
                      @foreach (var item in model.labels)
                      {
                        <span class="tag" style="background: @(item.color + "30"); color: @item.color;">
                          @item.name
                        </span>
                      }
                      @if(model.labels.Count == 0)
                      {
                        <p class="is-italic has-text-grey font_14">Chưa có nhãn công việc nào.</p>
                      }
                    </div>
                  }
                </div>
                @if (ProductService.CheckStorage(Layout.Company))
                {
                  <div class="field is-grouped is-fullwidth mb-2">
                    <div class="control">
                      <div class="title is-5 has-text-info">TÀI NGUYÊN</div>
                    </div>
                    @if (ProductService.CheckStorage(Layout.Company) && editRole)
                    {
                      <FileUpload Path="work/detail" ButtonCss="is-ghost is-small" Cloud="true" Multiple="true" OnUpload="x => UpdatedFiles(x)" />
                    }
                  </div>
                  <div class="inner_section mb-4">
                    <div class="">
                      <div class="@(model.files.Count > 0 ? "mt-2" : "")">
                        @if (model.files.Count > 0)
                        {
                          <FileViews Values="model.files" Delete="editRole" OnDelete="x => DeletedFile(x)" />
                        }
                        else
                        {
                          <p class="is-italic has-text-grey font_14">Chưa có tài nguyên đính kèm.</p>
                        }
                      </div>
                    </div>
                  </div>
                }
              </div>
            </li>

            <li class="column is-one-quarter is-full-mobile flex_column" style="@(Layout.IsMobile ? "" : "height:100%")">
              <div class="field is-grouped is-fullwidth mb-2">
                <div class="control is-expanded">
                  <div class="title is-5 has-text-info">LỊCH SỬ CẬP NHẬT</div>
                </div>
              </div>
              <div class="inner_section flex_column" style="flex:1;overflow:hidden">
                <div class="scrolly" style="flex:1;padding-left:6px;">
                  <_PlanLogs logs="logs" />
                </div>
              </div>
            </li>
          </ul>
        </div>
      }
      else
      {
        <div class="card p-6 has-text-centered">
          Không tìm thấy kế hoạch
        </div>
      }
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string PlanId { get; set; }

  private string url = string.Empty;
  private WorkPlanModel model = new();
  private List<WorkLogModel> logs = new();
  private WorkPlanModel.Label label = new() { color = Shared.ColorRandom(0) };
  private bool editMode = false;
  private bool editRole = false;

  private SharedStorage shareStorage = new();


  protected override async Task OnParametersSetAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);

    url = navigation.Uri.Replace(navigation.BaseUri, "/");
    model = await DbWorkPlan.Get(Layout.Company.id, PlanId);
    if (model != null)
    {
      if (RoleView().Result)
      {
        // Quyền quản lý kế hoạch
        editRole = WorkService.RoleInPlan(model, Layout.User.id) == 1;

        // Lấy dữ liệu lịch sử cập nhật
        await GetLogs();
      }
      else
      {
        model.id = string.Empty;
        model.detail = "Bạn không có quyền xem chi tiết kế hoạch này!";
      }
    }
  }

  private async Task<bool> RoleView()
  {
    try
    {
      // Kiểm tra quyền xem kế hoạch
      if (WorkService.ViewInPlan(model, Layout.User.id))
        return true;
      // Kiểm tra theo quyền cấp trên có cấp dưới tham gia
      var departmentAll = await DbDepartment.GetAll(Layout.Company.id);
      foreach (var member in model.members)
      {
        var staff = shareStorage.MemberList.FirstOrDefault(x => x.id == member.id);
        if (staff != null && await DbDepartment.CheckManagerRole(Layout.Company.id, staff, Layout.User.id, departmentAll))
          return true;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "RoleView()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
    return false;
  }

  private async Task<bool> GetLogs()
  {
    bool _success = true;
    try
    {
      logs = await DbWorkLog.GetListPlan(Layout.Company.id, model.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetLogs()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateDateEnd(long range)
  {
    bool _success = true;
    try
    {
      var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
      model.date_end = range;
      if (old.date_end != model.date_end)
      {
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thời gian kết thúc của kế hoạch.");
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật ngày kết thúc",
          string.Format("từ {0:dd/MM/yyyy} thành {1:dd/MM/yyyy}", new DateTime(old.date_end),
          new DateTime(model.date_end)), model.id, null, Layout.User);
        await GetLogs();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateDateEnd()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }

    return _success;
  }

  private async Task<bool> UpdatePrivate(bool is_private)
  {
    bool _success = true;
    try
    {
      var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
      model.is_private = is_private;
      if (old.is_private != model.is_private)
      {
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật chế độ bảo mật của dự án.");
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật chế độ bảo mật",
          "từ " + (old.is_private ? "Riêng tư" : "Công khai") + " thành " + (model.is_private ? "Riêng tư" : "Công khai"),
          model.id, null, Layout.User);
        await GetLogs();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdatePrivate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateStatus(int status)
  {
    bool _success = true;
    try
    {
      var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
      model.status = status;
      if (old.status != model.status)
      {
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật trạng thái của dự án.");
        await WorkService.CreateLog(Layout.Company.id, "Cập nhật trạng thái kế hoạch",
          "từ " + WorkService.StatusPlan(old.status).name + " thành " + WorkService.StatusPlan(model.status).name,
          model.id, null, Layout.User);
        // Gửi thông báo cho thành viên
        foreach (var user in model.members)
          await DbNotify.ForPlan(Layout.Company.id, 720, model.id, status.ToString(), user.id, Layout.User.id);
        await GetLogs();
        await JSRuntime.InvokeVoidAsync("clickBtn", "sidebar_plan_refresh");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
      if (model.members.Where(x => x.role == 1).Count() > 0)
      {
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thành viên của dự án.");

        // Các thành viên thay đổi quyền
        foreach (var item in model.members.Where(x => x.role == 1))
        {
          if (old.members.Where(x => x.id == item.id && x.role == 2).Count() > 0)
          {
            var user = UserService.GetMember(shareStorage.MemberList, item.id);
            if (user != null)
            {
              // Gửi thông báo đã thay đổi quyền
              await DbNotify.ForPlan(Layout.Company.id, 719, model.id, null, user.id, Layout.User.id);
            }
          }
        }

        // Các thành viên mới thêm vào
        var addList = new List<string>();
        var addIdList = new List<string>();
        foreach (var item in model.members)
        {
          if (old.members.Where(x => x.id == item.id).Count() == 0)
          {
            var user = UserService.GetMember(shareStorage.MemberList, item.id);
            if (user != null)
            {
              addList.Add(user.name);
              addIdList.Add(user.id);
            }
          }
        }
        //Thông báo mail
        if(addIdList.Count > 0)
        {
          var list = shareStorage.MemberList.Where(x => addIdList.Contains(x.id)).ToList();
          list = await EmailService.GetAcceptReceiveEmail(list, Layout.Company.id);

          var send = new Task(() =>
          {
            EmailService.JoinedPlan(list, Layout.User.FullName, model.name, $"{navigation.BaseUri}work/{model.id}/detail", out string message);
          });

          send.Start();

          foreach (var user in list)
          {
            await DbNotify.ForPlan(Layout.Company.id, 706, model.id, null, user.id, Layout.User.id);
          }
        }

        if (addList.Count > 0)
          await WorkService.CreateLog(Layout.Company.id, "Thêm thành viên",
            String.Join(", ", addList), model.id, null, Layout.User);

        // Các thành viên đã xóa
        var removeList = new List<string>();
        foreach (var item in old.members)
        {
          if (model.members.Where(x => x.id == item.id).Count() == 0)
          {
            var user = UserService.GetMember(shareStorage.MemberList, item.id);
            if (user != null)
            {
              removeList.Add(user.name);
              await DbNotify.ForPlan(Layout.Company.id, 707, model.id, null, user.id, Layout.User.id);
            }
          }
        }
        if (removeList.Count > 0)
          await WorkService.CreateLog(Layout.Company.id, "Xóa thành viên",
            String.Join(", ", removeList), model.id, null, Layout.User);
        // Hiển thị lại lịch sử cập nhật
        await GetLogs();
      }
      else
      {
        model.members = old.members;
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không thể xóa hết quản lý của kế hoạch.");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateLabel()
  {
    bool _success = true;
    try
    {
      if (Shared.IsEmpty(label.name))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề nhãn.");
      else if (Shared.IsEmpty(label.color))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn màu cho nhãn.");
      else
      {
        if (Shared.IsEmpty(label.id))
        {
          label.id = Mongo.RandomId();
          model.labels.Add(label);
        }
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật nhãn công việc.");
        label = new() { color = Shared.ColorRandom(0) };
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateLabel()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> RemoveLabel(WorkPlanModel.Label item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa nhãn: {item.name}?"))
        return true;
      model.labels.Remove(item);
      await DbWorkPlan.Update(Layout.Company.id, model);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật xóa nhãn: " + item.name);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "RemoveLabel()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateContent()
  {
    bool _success = true;
    try
    {
      if (Shared.IsEmpty(model.name))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề kế hoạch!");
      else
      {
        var old = await DbWorkPlan.Get(Layout.Company.id, model.id);
        if (model.name != old.name)
        {
          await WorkService.CreateLog(Layout.Company.id, "Cập nhật tiêu đề", model.name, model.id, null, Layout.User);
          // Thông báo chuông
          foreach (var user in model.members)
            await DbNotify.ForPlan(Layout.Company.id, 701, model.id, null, user.id, Layout.User.id);
        }
        await DbWorkPlan.Update(Layout.Company.id, model);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật thông tin của dự án.");
        await GetLogs();
        editMode = false;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateContent()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ToggleEdit()
  {
    bool _success = true;
    try
    {
      editMode = !editMode;
      model = await DbWorkPlan.Get(Layout.Company.id, model.id);
      if (editMode)
      {
        await JSRuntime.InvokeVoidAsync("setFocus", "plan_name");
        await JSRuntime.InvokeVoidAsync("textAutoSize", "plan_detail");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ToggleEdit()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdatedFiles(List<string> files)
  {
    try
    {
      model.files.AddRange(files);
      await DbWorkPlan.Update(Layout.Company.id, model);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã thêm thành công tài nguyên cho kế hoạch! ");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdatedFiles()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task DeletedFile(List<string> files)
  {
    try
    {
      model.files = files;
      await DbWorkPlan.Update(Layout.Company.id, model);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa thành công tài nguyên của kế hoạch!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdatedFiles()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  public async Task ChangeView(string value)
  {
    if (value == "gantt")
      await JSRuntime.InvokeVoidAsync("dragScrollX");
    navigation.NavigateTo($"/work/{model.id}/task/{value}");
  }

  private async Task ToogleSidebar()
  {
    Layout.User.custom.sidebar_fwork = !Layout.User.custom.sidebar_fwork;

    await DbUser.Update(Layout.Company.id, Layout.User, globalService);
  }

}