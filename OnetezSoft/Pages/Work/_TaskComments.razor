@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@implements IDisposable
@inject GlobalService globalService


<div class="scrolly py-1 is-mobile" style="flex: 1 1 0%" id="comment_scroll">
  <ul>
    @foreach (var item in comments)
    {
      var user = UserService.GetMember(shareStorage.MemberList, item.user_id);
      <li class="mt-3">
        <div class="is-flex @(item.user_id == Layout.User.id ? "is-justify-content-flex-end pr-5" : "")" style="gap: 0 5px">
          <div style="width: 24px; height: 24px">
            <span class="image is-24x24 is-rounded mr-2 mt-2">
              <img src="@user.avatar" alt="AVT">
            </span>
          </div>
          <div class="comment" style="position: relative; max-width: 600px">
            <div class="is-flex is-flex-direction-column"
                 style="border-radius:8px; background: @(item.user_id == Layout.User.id ? "#e7f2fb" : "#f5f5f5"); padding: 10px; gap: 10px 0;">
              <span class="font_12 has-text-weight-semibold">@user.name</span>
              @if (!Shared.IsEmpty(item.detail))
              {
                <div>
                  <span style="word-break: break-word" class="font_13 has-text-black text_many_line">@((MarkupString)Shared.TextToHtml(item.detail))</span>
                </div>
              }
              <FileViews Values="item.files" />
              <span class="font_12 has-text-grey">@Shared.ConvertDate(new DateTime(item.date))</span>
            </div>
            @if (Layout.User.id == item.user_id)
            {
              <div class="is-hover" style="position: absolute; right: -25px; top: 0;">
                <a style="padding: 10px" class="icon has-text-danger" @onclick="() => DeleteComment(item)">
                  <i class="material-icons-outlined is-size-6">delete</i>
                </a>
              </div>
            }
          </div>
        </div>
      </li>
    }
  </ul>
</div>
<div class="is-flex" style="min-height: 82px; align-items: flex-end; width: 100%;">
  <div style="width: 100%">
    <div class="mb-2">
      @if (files.Any())
      {
        if (ProductService.CheckStorage(Layout.Company))
        {
          <FileViews Delete="true" Values="files" isOneLine="true" />
        }
      }

    </div>
    <div class="is-flex" style="width: 100%">
      @if (ProductService.CheckStorage(Layout.Company))
      {
        <div class="mr-4" style="position: relative;">
          <FileUpload Path="work/task/comment" Multiple="true" Small="false" Cloud="true" OnUpload="x => files.AddRange(x)" />
        </div>
      }
      <form @onsubmit="Comment" class="control has-icons-right" style="width: 100%;">
        <textarea 
          rows="1"
          style="max-height: 60px"
          id="task_comment"
          class="input scrolly pr-10 over-y"
          placeholder="Nhập nội dung..." autocomplete="off"></textarea>
        <a class="icon has-text-link is-right " @onclick="Comment">
          <i class="material-icons-outlined is-size-5">send</i>
        </a>
      </form>
    </div>
  </div>
</div>
@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task task { get; set; }
  [Parameter]
  public bool editRole { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public WorkPlanModel plan { get; set; }
  private string comment = string.Empty;
  private List<string> files = new();
  public List<StaticModel> sources = new();
  private List<StaticModel> userMentions = new();
  public List<WorkPlanModel.Comment> comments = new();

  private SharedStorage shareStorage = new();

  private DotNetObjectReference<_TaskComments> obj;

  private bool load;

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    obj = DotNetObjectReference.Create(this);
    comments = await DbWorkComment.GetList(Layout.Company.id, task.plan_id, task.id, true);
    GetSources();

    MessagingCenter.Subscribe<_TaskComments, string>(this, "_newMessage", async (sender, value) =>
    {
      if (!string.IsNullOrEmpty(value))
      {
        var taskId = value.Split("_").FirstOrDefault();
        var userId = value.Split("_").LastOrDefault();

        if (taskId == task.id && userId != Layout.User.id)
        {
          comments = await DbWorkComment.GetList(Layout.Company.id, task.plan_id, task.id, true);
          GetSources();
          load = false;
          await InvokeAsync(StateHasChanged);
        }
      }
    });
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("scrollToBottom", "comment_scroll");
      await JSRuntime.InvokeVoidAsync("InitialMention", obj, sources, "task_comment");
    }
    else
    {
      if(!load)
      {
        load = true;
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "comment_scroll");
      }
    }
  }

  private void GetSources()
  {
    var list = members != null ? members.ToList() : new();
    list.RemoveAll(x => x.id == Layout.User.id);
    sources = list.Select(x => new StaticModel() { name = x.name, id_string = x.id, icon = x.avatar }).ToList();
  }

  private async Task DeleteComment(WorkPlanModel.Comment item)
  {
    try
    {
      if (item.files.Any())
      {
        foreach (var file in item.files)
        {
          var fileName = Files.FileName(file);
          StorageService.DeleteFile(file);
        }
      }
      await DbWorkComment.Delete(Layout.Company.id, item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa bình luận");
      comments.Remove(item);
      await UpdateTask();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteComment()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task<bool> Comment()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(comment) && files.Count == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập nội dung bình luận!");
      else
      {
        var item = new WorkPlanModel.Comment();
        item.detail = FormatComment(comment);
        item.task_id = task.id;
        item.plan_id = task.plan_id;
        item.user_id = Layout.User.id;
        item.files = files;

        await DbWorkComment.Create(Layout.Company.id, item);
        foreach (var user in task.members)
          await DbNotify.ForPlan(Layout.Company.id, 712, task.plan_id, task.id, user.id, Layout.User.id);

        // Thông báo mail
        if (userMentions.Where(x => x.id_string != Layout.User.id).Count() > 0)
        {
          var userList = shareStorage.MemberList;
          var userInfo = userMentions
                          .Where(x => x.id_string != Layout.User.id)
                          .Select(x => UserService.GetMember(userList, x.id_string))
                          .ToList();
          userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

          var send = new Task(() =>
          {
            EmailService.TaggedComment(userInfo, Layout.User.FullName, plan.name, task.name, $"{navigation.BaseUri}work/{plan.id}/task", out string message);
          });

          send.Start();
        }
        foreach (var user in userMentions)
        {
          await DbNotify.ForPlan(Layout.Company.id, 721, task.plan_id, task.id, user.id_string, Layout.User.id);
        }

        await GetComments();
        userMentions = new();
        comment = string.Empty;
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "comment_scroll");
        files = new();

        MessagingCenter.Send(this, "_newMessage", task.id + "_" + Layout.User.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Comment()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private string FormatComment(string comment)
  {
    string result = comment;
    if (userMentions.Count > 0)
    {
      foreach (var item in userMentions)
      {
        var user = members.FirstOrDefault(x => x.id == item.id_string);
        var mention = "@" + user.name;
        while (!string.IsNullOrEmpty(mention))
        {
          var exist = Shared.SearchKeyword(mention, comment);
          if (exist)
          {
            result = result.Replace(mention, $"<a class='has-text-link has-text-weight-bold'>{mention.Replace("@", "")}</a>");
            break;
          }
          else
          {
            if (!string.IsNullOrEmpty(mention))
            {
              mention = mention.Substring(0, mention.LastIndexOf(" "));
            }
          }
        }
      }
    }
    return result;
  }

  private async Task GetComments()
  {
    try
    {
      comments = await DbWorkComment.GetList(Layout.Company.id, task.plan_id, task.id);
      await UpdateTask();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetComments()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task UpdateTask()
  {
    try
    {
      task.comment = comments.Count;
      await DbWorkTask.Update(Layout.Company.id, task);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  [JSInvokable]
  public void SetMentions(JsonElement list, JsonElement content)
  {
    userMentions = list.Deserialize<List<StaticModel>>();
    comment = content.Deserialize<string>();
  }

  public void Dispose()
  {
    try
    {
      MessagingCenter.Unsubscribe<_TaskComments, string>(this, "_newMessage");
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }
}