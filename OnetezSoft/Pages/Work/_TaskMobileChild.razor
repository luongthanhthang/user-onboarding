@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@{
  var status = WorkService.Status(model.status);
  var priority = WorkService.Priority(parent.priority);
  var deadline = WorkService.TaskDeadline(model);
}

<div class="task_mobile">
  <ul class="columns is-multiline is-vcentered is-variable is-1 is-mobile">
    <li class="column is-full has-text-weight-medium">
      <a class="text_inline font_14 has-text-@(model.status == 4 ? "success is-line-through " : "black")"
        @onclick="View">@model.name</a>
    </li>
    <li class="column @(deadline != null ? "is-half" : "is-full")">

      @if (isTeam)
      {
        string start = new DateTime(model.date_start).ToString("dd/MM");
        string end = new DateTime(model.date_end).ToString("dd/MM");
        <div class="icon-text">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">event</i>
          </span>
          <span>@(start + " - " + end)</span>
        </div>
      }
      else
      {
        <_InputDate @bind-Start="model.date_start"
        @bind-End="model.date_end"
                                HasTime
                                Minimal
                                IsRange
                     Format="dd/MM"
                     DefaultString="Thời gian"
                     OnRangeSelect="UpdateTime" />
      }

    </li>
    @if(deadline != null)
    {
      <li class="column is-half">
        <span class="tag" style="background: @(deadline.color + "30"); color: #555;">
          @deadline.name
        </span>
      </li>
    }
    <li class="column is-half">
      @if(isEdit)
      {
         <Dropdown>
            <Trigger>
                  <a class="icon-text">
                     <span class="tag @status.color">@status.name</span>
                     <span class="icon is-small">
                        <i class="material-icons-outlined is-size-6">arrow_drop_down</i>
                     </span>
                  </a>
            </Trigger>
            <MenuContent>
                  @foreach (var item in WorkService.StatusSub())
                  {
                     <a class="dropdown-item" @onclick="() => ChangeStatus(item.id)">@item.name</a>
                  }
            </MenuContent>
         </Dropdown>
      }
      else
      {
        <span class="tag @status.color">@status.name</span>
      }
    </li>
    <li class="column is-half has-text-right">
      <_MemberList members="model.members" sources="members" isSubTask="true"
        isEdit="isEdit" isTask="true" isRight="true" OnUpdate="UpdateMembers" />
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public WorkPlanModel.Task model { get; set; }
  [Parameter]
  public WorkPlanModel.Task parent { get; set; }
  [Parameter]
  public List<MemberModel> members { get; set; } = new();
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public EventCallback<WorkPlanModel.Task> OnUpdate { get; set; }
  [Parameter]
  public EventCallback OnView { get; set; }
  [Parameter]
  public bool isTeam { get; set; }

  private async Task View()
  {
    await OnView.InvokeAsync();
  }

  private async Task<bool> UpdateTime(DateRange e)
  {
    bool _success = true;
    try
    {
      if (model.date_start < model.date_end)
      {
        await DbWorkTask.Update(Layout.Company.id, model);
        await OnUpdate.InvokeAsync(model);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày bắt đầu đang lớn hơn ngày kết thúc!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeDateStart()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ChangeStatus(int id)
  {
    bool _success = true;
    try
    {
      model.status = id;
      model.date_done = model.status == 4 ? DateTime.Now.Ticks : 0;
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateLabels()
  {
    bool _success = true;
    try
    {
      await DbWorkTask.Update(Layout.Company.id, model);
      await OnUpdate.InvokeAsync(model);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateLabels()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateMembers()
  {
    bool _success = true;
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var userList = shareStorage.MemberList;

      var old = await DbWorkTask.Get(Layout.Company.id, model.id);
      await DbWorkTask.Update(Layout.Company.id, model);
      // Lưu lịch sử
      await WorkService.LogTaskMembers(Layout.Company.id, old, model, Layout.User, userList);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}