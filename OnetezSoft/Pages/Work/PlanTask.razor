@page "/work/{PlanId}/task"
@page "/work/{PlanId}/task/{TypeView}"
@using Microsoft.AspNetCore.SignalR.Client;
@using OnetezSoft.Shared.Component.DragDrop
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject HubService hubService
@inject GlobalService globalService

<PageTitle>Danh sách công việc</PageTitle>

<section id="page_fwork" class="main_content plan  @(url == "/work" ? "is_nav" : "is_data") @(Layout.IsMobile ? "" : Layout.User.custom.sidebar_fwork ? "" : "is-less")">
  @if (!Layout.IsMobile || (url == "/work"))
  {
    <div class="card is_nav @(Layout.IsMobile ? "" : Layout.User.custom.sidebar_fwork ? "" : "is-less")" style="height:100%; position: relative; border-radius: unset">
      <_PlanSidebar navLess="Layout.User.custom.sidebar_fwork" />
      @if (!Layout.IsMobile)
      {
        if (Layout.User.custom.sidebar_fwork)
        {
          <div class="sidebar-plan-icon">
            <div class="sidebar-plan-icon-container" @onclick="ToogleSidebar">
              <span class="icon is-size-5 has-text-white">
                <i class="material-icons-outlined">navigate_before</i>
              </span>
            </div>
          </div>
        }
        else
        {
          <div class="sidebar-plan-icon">
            <div class="sidebar-plan-icon-container is-white" @onclick="ToogleSidebar">
              <span class="icon is-size-5 has-text-grey">
                <i class="material-icons-outlined">navigate_next</i>
              </span>
            </div>
          </div>
        }
      }
    </div>
  }
  @if (!Layout.IsMobile || url != "/work")
  {
    <div style="overflow: auto" class="is_expanded is_data is_fullheight flex_column">
      @if (model != null)
      {
        <_PlanHeader model="model" OnChangeView="ChangeView" />
        <div class="@(Layout.IsMobile ? "" : "card flex_column")" style="@(Layout.IsMobile ? "" : "flex:1; overflow:hidden")">
          @if (roleManager || roleMember)
          {
            <div id="plan_bubble">
              <a class="is-toggle" @onclick="ToogleAdd">
                <span class="icon">
                  <i class="material-icons-outlined is-size-4">add</i>
                </span>
              </a>
              @if (toggleAdd)
              {
                <div class="buttons">
                  <a class="button is-small is-rounded is-success" @onclick="() => AddTask(null, null)">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">add_task</i>
                    </span>
                    <span>Tạo công việc mới</span>
                  </a>
                  @if (roleManager && TypeView != "calendar")
                  {
                    <a class="button is-small is-rounded is-info" style="background-color: #5b9dd2;"
                    @onclick="() => EditSection(null)">
                      <span class="icon">
                        <i class="material-icons-outlined is-size-6">folder</i>
                      </span>
                      <span>Tạo nhóm công việc</span>
                    </a>
                  }
                </div>
              }
            </div>
          }

          @if (Layout.IsMobile)
          {
            <div class="field is-grouped is-fullwidth mb-3">
              <div class="control is-expanded has-icons-right">
                <input class="input is-small is-rounded is_bg" type="text" placeholder="Tiêu đề công việc..." @onchange="FilterKeyword">
                <span class="icon is-right is-small">
                  <i class="material-icons-outlined is-size-5">search</i>
                </span>
              </div>
              <div class="control">
                <_InputDate @bind-Start="filterDateS"
                @bind-End="filterDateE"
                            OnRangeSelect="FilterDate"
                                            Minimal
                             Format="dd/MM"
                                            IsRange
                             DefaultString="Thời gian" />
               </div>
             </div>
            <ul class="columns is-vcentered is-variable is-1 mb-3 is-mobile scrollx-mobile">
              <li class="column is-narrow" style="width: 150px;">
                <div class="select is-small is-fullwidth">
                  <select @onchange="(e) => FilterMember(e.Value.ToString())">
                    <option value="">Tất cả thành viên</option>
                    @foreach (var item in members)
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </li>
              <li class="column is-narrow" style="width: 126px;">
                <div class="select is-small is-fullwidth">
                  <select @onchange="(e) => FilterDeadline(Convert.ToInt32(e.Value))">
                    <option value="0">Thời hạn</option>
                    <option value="1">Sắp hết hạn</option>
                    <option value="2">Trễ hạn</option>
                  </select>
                </div>
              </li>
              <li class="column is-narrow" style="width: 126px;">
                <div class="select is-small is-fullwidth">
                  <select @onchange="(e) => FilterStatus(Convert.ToInt32(e.Value))">
                    <option value="0">Trạng thái</option>
                    @foreach (var item in WorkService.Status())
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </li>
              <li class="column is-narrow" style="width: 126px;">
                <div class="select is-small is-fullwidth">
                  <select @onchange="(e) => FilterPriority(Convert.ToInt32(e.Value))">
                    <option value="0">Độ ưu tiên</option>
                    @foreach (var item in WorkService.Priority())
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </li>
              <li class="column is-narrow" style="width: 126px;">
                <div class="select is-small is-fullwidth">
                  <select @onchange="(e) => FilterLabel(e.Value.ToString())">
                    <option value="">Nhãn dán</option>
                    @foreach (var item in model.labels)
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </li>
            </ul>

            foreach (var item in taskGroups)
            {
              var hidden = hideSections.Contains(item.Key);
              var tasks = item.Value;
              var group = model.sections.FirstOrDefault(x => x.id == item.Key);
              var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

              if (editSectionId == group.id)
              {
                <div class="control has-icons-left mt-3 mb-2">
                  <input @bind="group.name" id="section_@group.id" type="text" class="input has-text-weight-semibold font_14 is_bg" placeholder="Nhập tiêu đề nhóm công việc...">
                  <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                    <i class="material-icons-outlined is-size-5">done</i>
                  </a>
                </div>
              }
              else
              {
                <ul class="columns is-vcentered is-variable is-1 is-mobile has-text-centered mt-3">
                  <li class="column is-1">
                    <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleSection(group.id)">
                      <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_right" : "arrow_drop_down")</i>
                    </a>
                  </li>
                  <li class="column is-9 has-text-left">
                    <span class="has-text-weight-semibold font_14">
                      @group.name @(count > 0 ? $"({count})" : "")
                    </span>
                  </li>
                  <li class="column is-1">
                    @if (roleMember)
                    {
                      <a class="icon is-small has-text-dark" title="Thêm công việc" @onclick="() => AddTask(null, group.id)">
                        <i class="material-icons-round is-size-6">add</i>
                      </a>
                    }
                  </li>
                  <li class="column is-1">
                    @if (roleManager)
                    {
                      <Dropdown CloseOnClickMenu=true
                                DropdownClass="@(moreSectionId == group.id ? "is-right icon" : "is_hover is-right icon")"
                                OnToggle="() => MoreSection(group.id)">
                        <Trigger>
                          <a class="icon is-small has-text-dark">
                            <i class="material-icons-outlined is-size-6">more_horiz</i>
                          </a>
                        </Trigger>
                        <MenuContent>
                          <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, true)">
                            <span class="icon is-small">
                              <i class="material-icons-outlined is-size-6">arrow_upward</i>
                            </span>
                            <span>Lên trên</span>
                          </a>
                          <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, false)">
                            <span class="icon is-small">
                              <i class="material-icons-outlined is-size-6">arrow_downward</i>
                            </span>
                            <span>Xuống dưới</span>
                          </a>
                          <a class="dropdown-item icon-text" @onclick="() => EditSection(group)">
                            <span class="icon is-small">
                              <i class="material-icons-outlined is-size-6">edit</i>
                            </span>
                            <span>Chỉnh sửa</span>
                          </a>
                          <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(group)">
                            <span class="icon is-small">
                              <i class="material-icons-outlined is-size-6">delete</i>
                            </span>
                            <span>Xóa</span>
                          </a>
                        </MenuContent>
                      </Dropdown>
                    }
                  </li>
                </ul>
              }
              if (!hidden)
              {
                foreach (var context in tasks)
                {
                  if (context.id == null)
                  {
                    <div class="pl-4 py-1">
                      @if (roleMember)
                      {
                        <a class="icon-text has-text-link" @onclick="() => AddTask(null, group.id)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">add</i>
                          </span>
                          <span class="is-size-7">Thêm công việc</span>
                        </a>
                      }
                      else
                      {
                        <span class="is-size-7">Không có công việc</span>
                      }
                    </div>
                  }
                  else
                  {
                    var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                    <_TaskMobileItem model="context" plan="model" editRole="editTask"
                                     members="members" toggleList="toggleList" OnToggle="OnToggle"
                                     OnEdit="OnEditList" OnUpdate="e => OnUpdateList(e)" OnAddSub="OnSubTasks"
                                     OnTodolist="OnTodolist" />
                  }
                }
              }
            }
          }
          else
          {
            <ul class="columns is-vcentered is-variable is-2 mb-3">
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>@(filterMember == null ? "Tất cả thành viên" : members.FirstOrDefault(x => x.id == filterMember).name)</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterMember == null ? "has-text-weight-semibold" : "")"
                    @onclick="() => FilterMember(null)">Tất cả thành viên</a>
                    @foreach (var item in members)
                    {
                      <a class="dropdown-item py-0 @(filterMember == item.id ? "has-text-weight-semibold" : "")"
                      @onclick="() => FilterMember(item.id)">
                        <div class="icon-text">
                          <span class="icon image is-rounded is-16x16 mr-2">
                            <img src="@item.avatar" alt="IMG">
                          </span>
                          <span>@item.name</span>
                        </div>
                      </a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>@(WorkService.Duration(filterDeadline).name)</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    @foreach (var item in WorkService.Duration())
                    {
                      <a class="dropdown-item @(filterDeadline == item.id ? "has-text-weight-semibold" : "")" @onclick="() => FilterDeadline(item.id)">
                        @item.name
                      </a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>@(filterStatus != 0 ? WorkService.Status(filterStatus).name : "Trạng thái")</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterStatus == 0 ? "has-text-weight-semibold" : "")"
                    @onclick="() => FilterStatus(0)">Tất cả</a>
                    @foreach (var item in WorkService.Status())
                    {
                      <a class="dropdown-item @(filterStatus == item.id ? "has-text-weight-semibold" : "")"
                      @onclick="() => FilterStatus(item.id)">@item.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>@(filterPriority != 0 ? WorkService.Priority(filterPriority).name : "Độ ưu tiên")</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterPriority == 0 ? "has-text-weight-semibold" : "")" @onclick="() => FilterPriority(0)">
                      Tất cả
                    </a>
                    @foreach (var item in WorkService.Priority())
                    {
                      <a class="dropdown-item @(filterPriority == item.id ? "has-text-weight-semibold" : "")"
                         style="color: @item.color;" @onclick="() => FilterPriority(item.id)">@item.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>@(filterLabel == null ? "Nhãn dán" : model.labels.FirstOrDefault(x => x.id == filterLabel).name)</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterLabel == null ? "has-text-weight-semibold" : "")"
                    @onclick="() => FilterLabel(null)">Tất cả</a>
                    @foreach (var item in model.labels)
                    {
                      <a class="dropdown-item @(filterLabel == item.id ? "has-text-weight-semibold" : "")"
                         style="color: @item.color;" @onclick="() => FilterLabel(item.id)">@item.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              @if (TypeView == "calendar")
              {
                <li class="column is-narrow">
                  <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                    <Trigger>
                      <a class="icon-text">
                        <span>@(filterSection == null ? "Nhóm công việc" : model.sections.FirstOrDefault(x => x.id == filterSection).name)</span>
                        <span class="icon">
                          <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                        </span>
                      </a>
                    </Trigger>
                    <MenuContent>
                      <a class="dropdown-item @(filterSection == null ? "has-text-weight-semibold" : "")" @onclick="() => FilterSection(null)">Tất cả nhóm công việc</a>
                      @foreach (var item in model.sections)
                      {
                        <a class="dropdown-item @(filterSection == item.id ? "has-text-weight-semibold" : "")" @onclick="() => FilterSection(item.id)">@item.name</a>
                      }
                    </MenuContent>
                  </Dropdown>
                </li>
                <li class="column is-narrow">
                  <_InputDate @bind-Start="filterDateS"
                  @bind-End="filterDateE"
                                              HasNavigate
                               ShowCalendar=false
                               Format="MM/yy"
                               NavigateType="2"
                               OnRangeSelect="FilterDate"
                               IsNavigateSmall="true"
                                              Minimal
                               IsShowDetail="true"
                               IsFull="true" />
                 </li>
              }
              else
              {
                <li class="column is-narrow">
                  <_InputDate @bind-Start="filterDateS"
                  @bind-End="filterDateE"
                              OnRangeSelect="FilterDate"
                                              Minimal
                               Format="dd/MM"
                                              IsRange
                               DefaultString="Thời gian"
                               IsSetWidth="false" />
                 </li>
              }
              <li class="column">
                <div class="control has-icons-right">
                  <input class="input is-small is-rounded" type="text" placeholder="Tiêu đề công việc..." @onchange="FilterKeyword">
                  <span class="icon is-right is-small">
                    <i class="material-icons-outlined is-size-5">search</i>
                  </span>
                </div>
              </li>
            </ul>


            if (TypeView == "list")
            {
              <div class="scrolly inner_section pt-0 drag-scroll" style="flex:1; max-height: calc(100vh - 250px);">
                <ul class="columns is-variable is-0 pt-5 mb-0 is-size-7 has-text-grey pb-2"
                    style="position: sticky;top: 0px;background: #FAFAFA; z-index: 3; border-bottom: 1px solid #DEDEDE;">
                  <li class="column">Công việc</li>
                  <li class="column is-narrow" style="width: 110px;">Thời hạn</li>
                  <li class="column is-narrow" style="width: 130px;">Mức độ ưu tiên</li>
                  <li class="column is-narrow" style="width: 110px;">Thành viên</li>
                  <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
                  <li class="column is-narrow" style="width: 30px;"></li>
                </ul>
                @foreach (var item in taskGroups)
                {
                  var hidden = hideSections.Contains(item.Key);
                  var tasks = item.Value;
                  var group = model.sections.FirstOrDefault(x => x.id == item.Key);
                  var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

                  <ul class="task_list columns is-gapless is-size-7">
                    <li class="column is-full">
                      @if (editSectionId == item.Key)
                      {
                        <form class="control has-icons-left" style="width: 300px;" @onsubmit="UpdateSection">
                          <input @bind="group.name" class="input has-text-weight-semibold font_14 is_bg"
                                 id="section_@group.id" type="text" placeholder="Nhập tiêu đề nhóm công việc...">
                          <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                            <i class="material-icons-outlined is-size-5">done</i>
                          </a>
                        </form>
                      }
                      else
                      {
                        <div class="icon-text">
                          <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleSection(group.id)">
                            <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_right" : "arrow_drop_down")</i>
                          </a>
                          <span class="has-text-weight-semibold font_14" title="@group.name">
                            @group.name @(count > 0 ? $"({count} công việc)" : "")
                          </span>
                          @if (roleMember)
                          {
                            <div class="icon-text ml-2" @onclick="() => FastAddTask(null, group.id)">
                              <a>
                                Tạo nhanh
                              </a>
                            </div>
                          }
                          @if (roleMember)
                          {
                            <a class="icon has-text-dark is_hover" title="Thêm công việc"
                            @onclick="() => AddTask(null,group.id)">
                              <i class="material-icons-round is-size-6">add</i>
                            </a>
                          }
                          @if (roleManager)
                          {
                            <Dropdown CloseOnClickMenu=true
                                      DropdownClass="@(moreSectionId == group.id ? "is-right icon" : "is_hover is-right icon")"
                                      OnToggle="() => MoreSection(group.id)">
                              <Trigger>
                                <a class="icon has-text-dark">
                                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                                </a>
                              </Trigger>
                              <MenuContent>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, true)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_upward</i>
                                  </span>
                                  <span>Lên trên</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, false)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_downward</i>
                                  </span>
                                  <span>Xuống dưới</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => EditSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">edit</i>
                                  </span>
                                  <span>Chỉnh sửa</span>
                                </a>
                                <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">delete</i>
                                  </span>
                                  <span>Xóa</span>
                                </a>
                              </MenuContent>
                            </Dropdown>
                          }
                        </div>
                      }
                    </li>
                  </ul>

                  @if (!hidden)
                  {
                    var id = Mongo.RandomId().Split("-").First();
                    <Dropzone Items="tasks"
                              TItem="WorkPlanModel.Task"
                              Class="drop_task_list"
                              WrapperId="@($"task_{id}")"
                              AllowsDrag="x => WorkService.RoleEditTask(model, x, Layout.User.id) && x.id != null"
                              OnItemDrop="x => OnItemDragdrop(x)"
                              InstantReplace="true"
                              WrapperClass="task_list is_item columns is-multiline is-gapless is-size-7"
                              HandlerClass="column is-narrow">
                      <Handler>
                        @if (context.id != null)
                        {
                          <span class="icon is_drag ml-2" @onmousedown="() => toggleList.Remove(context.id)">
                            <i class="material-icons-outlined is-size-6">
                              drag_indicator
                            </i>
                          </span>
                        }
                      </Handler>
                      <ChildContent>
                        @if (context.id == null)
                        {
                          <div class="pl-4 py-1">
                            <span class="is-size-7">Không có công việc</span>
                          </div>
                        }
                        else
                        {
                          var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                          <_TaskListItem model="context"
                                         plan="model"
                                         editRole="editTask"
                                         members="members"
                                         toggleList="toggleList"
                                         edit="@newList.Contains(context.id)"
                                         OnToggle="OnToggle"
                                         OnEdit="OnEditList"
                                         OnUpdate="e => OnUpdateList(e)"
                                         OnAddSub="OnSubTasks"
                                         OnTodolist="OnTodolist" />
                        }
                      </ChildContent>
                    </Dropzone>
                    <div class="pl-4 py-1">
                      @if (roleMember)
                      {
                        <a class="icon-text has-text-link" @onclick="() => FastAddTask(null, group.id,false)">
                          <span class="icon">
                            <i class="material-icons-outlined is-size-6">add</i>
                          </span>
                          <span class="is-size-7">Thêm công việc</span>
                        </a>
                      }
                    </div>
                  }
                }
              </div>
            }
            else if (TypeView == "board")
            {
              <div class="scrollx" style="flex:1; max-height: calc(100vh - 250px);">
                <ul class="columns is-gapless" style="height:100%">
                  @foreach (var item in taskGroups)
                  {
                    var tasks = item.Value;
                    var group = model.sections.FirstOrDefault(x => x.id == item.Key);
                    var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

                    <li class="column is-narrow mr-3 flex_column" style="width: 350px;">
                      @if (editSectionId == group.id)
                      {
                        <form class="control has-icons-left" @onsubmit="UpdateSection">
                          <input @bind="group.name" class="input has-text-weight-semibold font_14 is_bg"
                                 id="section_@group.id" type="text" placeholder="Nhập tiêu đề nhóm công việc...">
                          <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                            <i class="material-icons-outlined is-size-5">done</i>
                          </a>
                        </form>
                      }
                      else
                      {
                        <div class="icon-text py-2 pl-2">
                          <span class="has-text-weight-semibold font_14" title="@group.name">
                            @group.name @(count > 0 ? $"({count})" : "")
                          </span>
                          @if (roleMember)
                          {
                            <div class="icon-text ml-2" @onclick="() => FastAddTask(null, group.id)">
                              <a>
                                Tạo nhanh
                              </a>
                            </div>
                          }
                          @if (roleMember)
                          {
                            <a class="icon has-text-dark is_hover" title="Thêm công việc"
                            @onclick="() => AddTask(null, group.id)">
                              <i class="material-icons-round is-size-6">add</i>
                            </a>
                          }
                          @if (roleManager)
                          {
                            <Dropdown DropdownClass="@(moreSectionId == group.id ? "is-right icon" : "is_hover is-right icon")"
                                      CloseOnClickMenu=true
                                      OnToggle="() => MoreSection(group.id)">
                              <Trigger>
                                <a class="icon has-text-dark">
                                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                                </a>
                              </Trigger>
                              <MenuContent>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, true)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_back</i>
                                  </span>
                                  <span>Qua trái</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, false)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_forward</i>
                                  </span>
                                  <span>Qua phải</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => EditSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">edit</i>
                                  </span>
                                  <span>Chỉnh sửa</span>
                                </a>
                                <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">delete</i>
                                  </span>
                                  <span>Xóa</span>
                                </a>
                              </MenuContent>
                            </Dropdown>
                          }
                        </div>
                      }
                      <div class="scrolly p-2"
                           style="flex:100%;min-height:calc(100% - 40px); background: #fbfbfb; border-radius: 5px;">
                        <Dropzone Items="tasks"
                                  TItem="WorkPlanModel.Task"
                                  Class="drop_task_list"
                                  AllowsDrag="x => WorkService.RoleEditTask(model, x, Layout.User.id) && x.id != null"
                                  OnItemDrop="x => OnItemDragdrop(x)"
                                  InstantReplace="true"
                                  WrapperClass="drop_task_item">
                          @if (context.id == null)
                          {
                            <div class="has-text-centered p-3">
                              <span class="is-size-7">Không có công việc</span>
                            </div>
                          }
                          else
                          {
                            var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                            <_TaskCardItem edit="@newList.Contains(context.id)"
                                           model="context"
                                           plan="model"
                                           editRole="editTask"
                                           members="members"
                                           toggleList="toggleList"
                                           OnToggle="OnToggle"
                                           OnEdit="OnEditList"
                                           OnUpdate="e => OnUpdateList(e)"
                                           OnAddSub="OnSubTasks"
                                           OnTodolist="OnTodolist" />
                          }
                        </Dropzone>
                        <div class="py-1 has-text-centered">
                          @if (roleMember && tasks.Count > 0)
                          {
                            <a class="icon-text has-text-link" @onclick="() => FastAddTask(null, group.id,false)">
                              <span class="icon">
                                <i class="material-icons-outlined is-size-6">add</i>
                              </span>
                              <span class="is-size-7">Thêm công việc</span>
                            </a>
                          }
                        </div>
                      </div>
                    </li>
                  }
                </ul>
              </div>
            }
            else if (TypeView == "calendar")
            {
              <div style="flex:1; overflow: hidden">
                <_PlanCalendar filterDateE="filterDateE"
                               filterDateS="filterDateS"
                               tasks="taskList"
                               plan="model"
                               OnEdit="OnEditList"
                               OnAddSub="OnSubTasks"
                               OnAddTodo="OnTodolist"
                               OnDeleteTask="OnDeleteTask"
                               OnUpdateMembers="OnUpdateMembersTask"
                               dateRange="dateRange" />
              </div>
            }
            else
            {
              var dayHtml = string.Empty;
              <div id="scrollbox" class="list_task_gantt is-size-7" style="flex:1">
                <ul class="task_gantt is_month columns is-gapless is-vcentered">
                  <li class="column is-narrow"></li>
                  @for (int d = 0; d < dayTotal; d++)
                  {
                    var day = dayStart.AddDays(d);
                    var month = Shared.DateToMonth(day);
                    var column = month.AddMonths(1).Subtract(day).Days;
                    if (month.AddMonths(1) > dayEnd)
                      column = dayEnd.Subtract(day).Days;
                    if (day <= month.AddMonths(1) && day <= dayEnd)
                    {
                      d += column - 1;
                      <li class="column is-narrow" style="width: @(column * 40)px">
                        <div class="has-text-weight-medium has-text-info pl-1 font_14">
                          @month.ToString("MM/yyyy")
                        </div>
                      </li>
                    }
                  }
                </ul>
                <ul class="task_gantt is_header columns is-gapless is-vcentered">
                  <li class="column is-narrow">
                    Công việc
                  </li>
                  @for (int d = 0; d < dayTotal; d++)
                  {
                    var day = dayStart.AddDays(d);
                    var today = day == DateTime.Today ? "is_today" : "";
                    var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";
                    dayHtml += $"<li class=\"column is-narrow {today} {sunday}\"></li>";

                    <li class="column is-narrow @today @sunday">
                      <span class="pl-1" style="color: #C0C6DC;">@day.ToString("ddd").Substring(0, 1)</span>
                      <span class="pr-1">@day.ToString("dd")</span>
                    </li>
                  }
                </ul>

                @foreach (var item in taskGroups)
                {
                  var hidden = hideSections.Contains(item.Key);
                  var tasks = item.Value;
                  var group = model.sections.FirstOrDefault(x => x.id == item.Key);
                  var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

                  <ul class="task_gantt columns is-gapless is-size-7">
                    <li class="column is-narrow">
                      @if (editSectionId == group.id)
                      {
                        <div class="control has-icons-left" style="width: 100%;">
                          <input @bind="group.name" id="section_@group.id" type="text" class="input is-small has-text-weight-semibold font_14 is_bg" placeholder="Nhập tiêu đề nhóm công việc...">
                          <a class="icon is-left has-text-success" title="Cập nhật" @onclick="UpdateSection">
                            <i class="material-icons-outlined is-size-5">done</i>
                          </a>
                        </div>
                      }
                      else
                      {
                        <div class="icon-text">
                          <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleSection(group.id)">
                            <i class="material-icons-outlined is-size-5">@(hidden ? "arrow_right" : "arrow_drop_down")</i>
                          </a>
                          <span class="has-text-weight-semibold font_14" title="@group.name">
                            @group.name @(count > 0 ? $"({count})" : "")
                          </span>
                          @if (roleMember)
                          {
                            <div class="icon-text ml-2" @onclick="() => FastAddTask(null, group.id)">
                              <a>
                                Tạo nhanh
                              </a>
                            </div>
                          }
                          @if (roleMember)
                          {
                            <a class="icon has-text-dark is_hover" title="Thêm công việc" @onclick="() => AddTask(null, group.id)">
                              <i class="material-icons-round is-size-6">add</i>
                            </a>
                          }
                          @if (roleManager)
                          {
                            <Dropdown DropdownClass="@(moreSectionId == group.id ? "is-right icon" : "is_hover is-right icon")"
                                      CloseOnClickMenu=true
                                      OnToggle="() => MoreSection(group.id)">
                              <Trigger>
                                <a class="icon has-text-dark">
                                  <i class="material-icons-outlined is-size-6">more_horiz</i>
                                </a>
                              </Trigger>
                              <MenuContent>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, true)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_upward</i>
                                  </span>
                                  <span>Lên trên</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => MoveSection(group, false)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">arrow_downward</i>
                                  </span>
                                  <span>Xuống dưới</span>
                                </a>
                                <a class="dropdown-item icon-text" @onclick="() => EditSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">edit</i>
                                  </span>
                                  <span>Chỉnh sửa</span>
                                </a>
                                <a class="dropdown-item icon-text has-text-danger" @onclick="() => DeleteSection(group)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">delete</i>
                                  </span>
                                  <span>Xóa</span>
                                </a>
                              </MenuContent>
                            </Dropdown>
                          }
                        </div>
                      }
                    </li>
                    @for (int d = 0; d < dayTotal; d++)
                    {
                      var day = dayStart.AddDays(d);
                      var today = day == DateTime.Today ? "is_today" : "";
                      var sunday = day.DayOfWeek == DayOfWeek.Sunday ? "is_sun" : "";

                      <li class="column is-narrow @today @sunday"></li>
                    }
                  </ul>

                  @if (!hidden)
                  {
                    <Dropzone Items="tasks"
                              TItem="WorkPlanModel.Task"
                              Class="drop_task_list"
                              AllowsDrag="x => WorkService.RoleEditTask(model, x, Layout.User.id) && x.status < 0"
                              OnItemDrop="x => OnItemDragdrop(x)"
                              InstantReplace="true"
                              WrapperClass="drop_task_item">
                      @if (context.id == null)
                      {
                        <ul class="task_gantt columns is-gapless is-size-7">
                          <li class="column is-narrow">
                            <div class="pl-4 py-1">
                              @if (roleMember)
                              {
                                <a class="icon-text has-text-link" @onclick="() => AddTask(null, group.id)">
                                  <span class="icon">
                                    <i class="material-icons-outlined is-size-6">add</i>
                                  </span>
                                  <span class="is-size-7">Thêm công việc</span>
                                </a>
                              }
                              else
                              {
                                <span class="is-size-7">Không có công việc</span>
                              }
                            </div>
                          </li>
                          @((MarkupString)dayHtml)
                        </ul>
                      }
                      else
                      {
                        var editTask = WorkService.RoleEditTask(model, context, Layout.User.id);
                        <_TaskGanttItem edit="@newList.Contains(context.id)"
                                        model="context"
                                        plan="model"
                                        editRole="editTask"
                                        members="members"
                                        toggleList="toggleList"
                                        OnToggle="OnToggle"
                                        dayStart="dayStart"
                                        dayTotal="dayTotal"
                                        dayHtml="@dayHtml"
                                        OnEdit="OnEditList"
                                        OnUpdate="e => OnUpdateList(e)"
                                        OnAddSub="OnSubTasks"
                                        OnTodolist="OnTodolist" />
                      }
                    </Dropzone>
                  }
                }
                @{
                  var unhideGroup = taskGroups.Where(x => !hideSections.Contains(x.Key));
                  var emptyHeighht = unhideGroup.SelectMany(x => x.Value).Count() * 35 + unhideGroup.Count() * 35 + 53;
                }
                <ul class="task_gantt is_footer columns is-gapless is-vcentered" style="height:calc(100% - @(emptyHeighht)px)">
                  <li class="column is-narrow"></li>
                  @((MarkupString)dayHtml)
                </ul>
              </div>
            }
          }
        </div>
        <_PlanSheets currentSheet="currentSheet"
                     roleManager="roleManager"
                     model="model"
                     OnChangedSheet="OnChangedSheet"
                     OnDeleteSheet="OnDeleteSheet" />
      }
      else
      {
        <div class="card p-6 has-text-centered">
          Không tìm thấy kế hoạch
        </div>
      }
    </div>
  }
</section>

@if (editTask != null)
{
  bool isViewCalendar = TypeView == "calendar";
  <_TaskPopup 
    plan="model"
    task="editTask"
    members="members"
    @bind-tab="editTab"
    subTasks="subTasks"
    todoItems="todoItems"
    OnUpdate="OnUpdateTask"
    isViewCalendar="isViewCalendar"
    sheetId="@sheet"
    isEditSection="true" />
}



@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string PlanId { get; set; }
  [Parameter]
  public string TypeView { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "sheet")]
  public string? sheet { get; set; }

  private string url = string.Empty;
  private WorkPlanModel model = new();
  private Dictionary<string, List<WorkPlanModel.Task>> taskGroups = new();
  private List<WorkPlanModel.Task> taskList = new();
  private List<string> toggleList = new();
  private List<MemberModel> members = new();
  private bool roleManager = false;
  private bool roleMember = false;
  private bool toggleAdd = true;
  private int dayTotal = 0;
  private DateTime dayStart = DateTime.Today;
  private DateTime dayEnd = DateTime.Today;

  private List<string> newList = new();
  private string oldTitle;
  private List<List<DateTime>> dateRange = new();
  private WorkPlanModel.Sheet currentSheet = new();

  private string currentPlanId;

  protected override void OnInitialized()
  {
    var hubConnection = hubService.GetHubConnection();

    hubConnection.On<string, string, string, string>("TaskUpdate", async (planId, userId, companyId, message) =>
    {
      if (PlanId == planId && companyId == Layout.Company.id && (message == "Other" ? userId != Layout.User.id : true))
      {
        if (message == "PlanChanged")
          model = await DbWorkPlan.Get(Layout.Company.id, PlanId);

        await GetTaskList();
        await InvokeAsync(StateHasChanged);
      }
    });
    if (TypeView == "calendar")
    {
      Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
      filterDateS = start.Ticks;
      filterDateE = end.Ticks;
      SetupDateRange();
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    url = navigation.Uri.Replace(navigation.BaseUri, "/");
    if (currentPlanId != PlanId)
    {
      currentPlanId = PlanId;
      model = await DbWorkPlan.Get(Layout.Company.id, PlanId);

      await UpdateSingleTaskToSheet();
    }

    if (model != null)
    {
      if (await RoleView())
      {
        ResetFilter();

        if (string.IsNullOrEmpty(sheet))
          sheet = model.sheets.FirstOrDefault()?.id;

        currentSheet = model.sheets.FirstOrDefault(x => x.id == sheet);
        // Chế độ xem
        if (string.IsNullOrEmpty(TypeView))
          TypeView = "list";

        // Quyền trong kế hoạch
        var role = WorkService.RoleInPlan(model, Layout.User.id);

        roleManager = role == 1;
        roleMember = role > 0;

        // Danh sách thành viên
        members = await GetMembers();

        // Lấy dữ liệu công việc
        await GetTaskList();

        // Cập nhật thống kê
        await DbWorkReport.Update(Layout.Company.id, PlanId);

        // Tự động mở popup
        await OpenTaskPopup();

        // Đóng tất cả công việc
        toggleList.Clear();
      }
      else
      {
        model.id = string.Empty;
        model.detail = "Bạn không có quyền xem chi tiết kế hoạch này!";
      }

      if (model.sections.Find(x => x.id == editSectionId) == null)
        editSectionId = string.Empty;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      if (TypeView == "gantt")
      {
        await JSRuntime.InvokeVoidAsync("dragScrollX");
        if (dayStart <= DateTime.Today && DateTime.Today <= dayEnd)
        {
          int today = DateTime.Today.Subtract(dayStart).Days;
          await JSRuntime.InvokeVoidAsync("scrollGantt", today * 40 - 160);
        }
      }

      var cookieToggleAdd = await JSRuntime.InvokeAsync<string>("getCookie", "_fwork_add");
      if (!string.IsNullOrEmpty(cookieToggleAdd))
        toggleAdd = Convert.ToBoolean(cookieToggleAdd);

      StateHasChanged();
    }

    if (editTask == null)
      await JSRuntime.InvokeVoidAsync("ToggleOverflowHtml", false);
    else
      await JSRuntime.InvokeVoidAsync("ToggleOverflowHtml", true);
  }

  /// <summary>Chuyển các kế hoạch hiện tại thành sheet</summary>
  private async Task UpdateSingleTaskToSheet()
  {
    if (model == null)
      return;
    else
    {
      // nếu kế hoạch chưa có sheet nào, tự động chuyển kế hoạch đó thành 1 sheet mới
      if (model.sheets == null || model.sheets.Count == 0)
      {
        var newSheet = new WorkPlanModel.Sheet()
          {
            id = Mongo.RandomId(),
            name = model.name,
            possition = 1,
          };

        model.sheets.Add(newSheet);

        model.sections.ForEach(x => x.sheet = newSheet.id);

        await DbWorkPlan.Update(Layout.Company.id, model);
      }
      else
      {
        if (model.sections.Any(x => x.sheet.IsEmpty()))
        {
          var firstSheet = model.sheets.FirstOrDefault();
          var emptySection = model.sections.Where(x => x.sheet.IsEmpty()).ToList();
          emptySection.ForEach(x =>
          {
            x.sheet = firstSheet.id;
          });

          await DbWorkPlan.Update(Layout.Company.id, model);
        }
      }
    }
  }

  private async Task ToogleAdd()
  {
    toggleAdd = !toggleAdd;
    await JSRuntime.InvokeVoidAsync("setCookie", "_fwork_add", toggleAdd);
  }

  private async Task OpenTaskPopup()
  {
    int tab = 1;
    var taskId = string.Empty;
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("task", out var outTask))
      taskId = outTask.ToString();
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tab", out var outTab))
      tab = Convert.ToInt32(outTab);

    if (!string.IsNullOrEmpty(taskId))
    {
      editTab = tab;
      await EditTask(taskId);
    }
  }

  private async Task<bool> RoleView()
  {
    bool _success = true;
    try
    {
      // Kiểm tra quyền xem kế hoạch
      if (WorkService.ViewInPlan(model, Layout.User.id))
        return _success;
      // Kiểm tra theo quyền cấp trên có cấp dưới tham gia
      var departmentAll = await DbDepartment.GetAll(Layout.Company.id);
      foreach (var member in model.members)
      {
        var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
        var staff = shareStorage.MemberList.FirstOrDefault(x => x.id == member.id);
        if (staff != null && await DbDepartment.CheckManagerRole(Layout.Company.id, staff, Layout.User.id, departmentAll))
          return _success;
      }
      return false;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "RoleView()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<List<MemberModel>> GetMembers()
  {
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    var listId = model.members.Select(x => x.id).ToList();
    return shareStorage.MemberList.Where(x => listId.Contains(x.id)).ToList();
  }

  private async Task ChangeView(string value)
  {
    if (value == "gantt")
      await JSRuntime.InvokeVoidAsync("dragScrollX");
    navigation.NavigateTo($"/work/{model.id}/task/{value}?sheet={sheet}");
  }

  private async Task UpdateForAll()
  {
    var hubConnection = hubService.GetHubConnection();
    if (hubConnection is not null)
      await hubConnection.SendAsync("TaskUpdate", PlanId, Layout.User.id, Layout.Company.id, "");
  }

  private async Task UpdateForOther()
  {
    var hubConnection = hubService.GetHubConnection();
    if (hubConnection is not null)
      await hubConnection.SendAsync("TaskUpdate", PlanId, Layout.User.id, Layout.Company.id, "Other");
  }

  #region Bộ lọc và lấy dữ liệu

  private int filterStatus = 0;
  private int filterPriority = 0;
  private int filterDeadline = 0;
  private string filterMember = null;
  private string filterLabel = null;
  private string filterSection = null;
  private string filterKey = null;
  private long filterDateS;
  private long filterDateE;

  private async Task<bool> GetTaskList()
  {
    bool _success = true;
    try
    {
      // Lấy danh sách công việc chính
      taskList = await DbWorkTask.GetListInPlan(Layout.Company.id, model.id);

      // Bộ lọc tìm kiếm
      await FilterTaskList();

      // Chia nhóm công việc
      SplitTaskList();

      // Lấy ngày thấp nhỏ nhất
      if (taskList.Count > 0 && taskList.Find(x => x.date_start > 0 && x.date_end > 0) != null && TypeView == "gantt")
      {
        long minDay = taskList.Where(x => x.date_start > 0 && x.date_end > 0).OrderBy(x => x.date_start).Select(x => x.date_start).FirstOrDefault();
        long maxDay = taskList.Where(x => x.date_start > 0 && x.date_end > 0).OrderByDescending(x => x.date_end).Select(x => x.date_end).FirstOrDefault();

        dayStart = Shared.DateToDay(new DateTime(minDay)).AddDays(-4);
        dayEnd = Shared.DateToDay(new DateTime(maxDay)).AddDays(9);
        dayTotal = dayEnd.Subtract(dayStart).Days;

        // Xử lý danh sách đang edit
        newList.RemoveAll(x => !taskList.Select(y => y.id).Contains(x));
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetTaskList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task FilterTaskList()
  {
    // Lọc theo thời hạn
    if (filterDeadline == 1) // Sắp hết hạn
      taskList = taskList.Where(x => WorkService.CheckDeadline(x) == 1).ToList();
    else if (filterDeadline == 2) // Trễ hạn
      taskList = taskList.Where(x => WorkService.CheckDeadline(x) == 2).ToList();

    // Lọc theo thời gian thực hiện công việc
    if (filterDateS > 0 && filterDateE > 0)
    {
      var start = filterDateS;
      var end = filterDateE;
      taskList = (from x in taskList
                  where (x.date_start >= start && x.date_end <= end)
                  || (x.date_start <= start && x.date_end >= start)
                  || (x.date_end >= end && x.date_start <= end)
                  select x).ToList();
      if (TypeView == "calendar")
        SetupDateRange();
    }
    else
    {
      if (TypeView == "calendar")
      {
        Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
        filterDateS = start.Ticks;
        filterDateE = end.Ticks;
        var startT = filterDateS;
        var endT = filterDateE;
        SetupDateRange();
      }
    }

    // Lọc theo trạng thái
    if (filterStatus != 0)
      taskList = taskList.Where(x => x.status == filterStatus).ToList();

    // Lọc theo độ ưu tiên
    if (filterPriority != 0)
      taskList = taskList.Where(x => x.priority == filterPriority).ToList();

    // Lọc theo nhãn dán
    if (!string.IsNullOrEmpty(filterLabel))
      taskList = taskList.Where(x => x.labels.Contains(filterLabel)).ToList();

    // Lọc theo từ khóa
    if (!string.IsNullOrEmpty(filterKey))
      taskList = taskList.Where(x => Shared.SearchKeyword(filterKey, x.name)).ToList();

    // Lọc theo nhóm công việc
    if (!string.IsNullOrEmpty(filterSection) && TypeView == "calendar")
      taskList = taskList.Where(x => x.section_id == filterSection).ToList();

    // filter by sheet
    if (TypeView == "calendar")
      taskList = taskList.Where(x => model.sections.Any(y => y.id == x.section_id)).ToList();

    // Lọc theo thành viên
    if (!string.IsNullOrEmpty(filterMember))
    {

      var filteredTasks = new List<WorkPlanModel.Task>();

      foreach (var task in taskList)
      {
        var sub = await DbWorkTask.GetListInTask(Layout.Company.id, task.plan_id, task.id);

        if (task.members.Any(member => member.id == filterMember) || sub.Any(subItem => subItem.members.Any(z => z.id == filterMember)))
          filteredTasks.Add(task);
      }
      taskList = filteredTasks.ToList();
    }
  }

  private void SplitTaskList()
  {
    taskGroups.Clear();

    taskList = (from x in taskList orderby x.pos, x.date_end select x).ToList();

    var filteredSections = model.sections.Where(x => x.sheet == sheet).ToList();

    foreach (var section in filteredSections)
    {
      var tasks = taskList.Where(x => x.section_id == section.id).ToList();
      if (tasks.Count == 0)
        tasks = new() { new() { name = "Chưa có công việc", section_id = section.id } };

      taskGroups.Add(section.id, tasks);
    }
  }

  private async Task FilterDeadline(int value)
  {
    filterDeadline = value;
    await GetTaskList();
  }

  private async Task FilterStatus(int value)
  {
    filterStatus = value;
    await GetTaskList();
  }

  private async Task FilterPriority(int value)
  {
    filterPriority = value;
    await GetTaskList();
  }

  private async Task FilterMember(string value)
  {
    filterMember = value;
    await GetTaskList();
  }

  private async Task FilterLabel(string value)
  {
    filterLabel = value;
    await GetTaskList();
  }

  private async Task FilterSection(string value)
  {
    filterSection = value;
    await GetTaskList();
  }

  private async Task FilterDate(DateRange range)
  {
    await GetTaskList();
  }

  private async Task FilterKeyword(ChangeEventArgs e)
  {
    filterKey = e.Value.ToString();
    await GetTaskList();
  }

  private void SetupDateRange()
  {
    if (filterDateS == 0 || filterDateE == 0)
      return;
    dateRange = new();
    var startDate = new DateTime(filterDateS);
    var endDate = new DateTime(filterDateE);
    int totalDays = (int)Math.Round((endDate - startDate).TotalDays, 0);

    List<DateTime> row = new();
    var startDayOfWeek = (int)startDate.DayOfWeek == 0 ? 7 : (int)startDate.DayOfWeek;
    var enddayOfWeek = (int)endDate.DayOfWeek == 0 ? 7 : (int)endDate.DayOfWeek;

    if (startDayOfWeek > 1)
    {
      startDate = startDate.AddDays(-startDayOfWeek + 1);
    }
    if (enddayOfWeek < 7)
    {
      endDate = endDate.AddDays(7 - enddayOfWeek);
    }

    var date = startDate;

    while (date.Ticks <= endDate.Ticks)
    {
      if (row.Count < 7)
      {
        row.Add(date);
      }
      if (row.Count == 7)
      {
        dateRange.Add(row);
        row = new();
      }
      date = date.AddDays(1);
    }

  }

  private void ResetFilter()
  {
    filterStatus = 0;
    filterPriority = 0;
    filterDeadline = 0;
    filterMember = null;
    filterLabel = null;
    filterSection = null;
    filterKey = null;
    filterDateS = 0;
    filterDateE = 0;
  }

  #endregion

  #region Nhóm công việc

  private string editSectionId = string.Empty;
  private string moreSectionId = string.Empty;
  private List<string> hideSections = new();

  private void ToggleSection(string id)
  {
    if (hideSections.Contains(id))
      hideSections.Remove(id);
    else
      hideSections.Add(id);
  }

  private void MoreSection(string id)
  {
    if (moreSectionId == id)
      moreSectionId = string.Empty;
    else
      moreSectionId = id;
  }

  private async Task<bool> EditSection(WorkPlanModel.Section item)
  {
    bool _success = true;
    try
    {
      moreSectionId = string.Empty;
      if (string.IsNullOrEmpty(editSectionId))
      {
        if (item == null)
        {
          item = new()
            {
              id = Mongo.RandomId(),
              sheet = Shared.IsEmpty(sheet) ? "" : sheet,
            };
          model.sections.Insert(0, item);

          await GetTaskList();
        }
        editSectionId = item.id;
        oldTitle = item.name;
        await JSRuntime.InvokeVoidAsync("setFocus", "section_" + item.id);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Có nhóm công việc đang được chỉnh sửa!");

      await UpdateForAll();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "EditSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteSection(WorkPlanModel.Section item)
  {
    bool _success = true;
    try
    {
      moreSectionId = string.Empty;
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa nhóm công việc {item.name}. Việc này sẽ khiến dữ liệu công việc trong nhóm bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return _success;
      // Thông báo chuông
      foreach (var user in model.members)
        await DbNotify.ForPlan(Layout.Company.id, 704, model.id, item.id, user.id, Layout.User.id);
      // Hàm tự động xóa
      if (await WorkService.DeleteSection(Layout.Company.id, model.id, item.id))
      {
        model = await DbWorkPlan.Get(Layout.Company.id, PlanId);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa nhóm công việc thành công!");
        await WorkService.CreateLog(Layout.Company.id, "Xóa nhóm công việc", item.name, model.id, null, Layout.User);
        await GetTaskList();
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");

      await UpdateForAll();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateSection()
  {
    bool _success = true;
    try
    {
      if (model.sections.Where(x => Shared.IsEmpty(x.name)).Count() == 0)
      {
        var item = model.sections.SingleOrDefault(x => x.id == editSectionId);
        if (item != null)
        {
          if (item.pos == 0)
          {
            item.pos = model.sections.Count;
            await DbWorkPlan.UpdateSection(Layout.Company.id, model.id, item);
            await JSRuntime.InvokeVoidAsync("tagline", true, "Đã thêm nhóm công việc!");
            await WorkService.CreateLog(Layout.Company.id, "Thêm nhóm công việc", item.name, model.id, null, Layout.User);
            // Thông báo chuông
            foreach (var user in model.members)
              await DbNotify.ForPlan(Layout.Company.id, 702, model.id, item.id, user.id, Layout.User.id);

            var hubConnection = hubService.GetHubConnection();
            if (hubConnection is not null)
              await hubConnection.SendAsync("TaskUpdate", PlanId, Layout.User.id, Layout.Company.id, "");
          }
          else
          {
            if (string.IsNullOrEmpty(model.name))
              model.name = oldTitle;

            await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật nhóm công việc!");
            await WorkService.CreateLog(Layout.Company.id, "Cập nhật nhóm công việc", item.name, model.id, null, Layout.User);
            // Thông báo chuông
            foreach (var user in model.members)
              await DbNotify.ForPlan(Layout.Company.id, 703, model.id, item.id, user.id, Layout.User.id);
            await DbWorkPlan.Update(Layout.Company.id, model);
          }
          editSectionId = string.Empty;
          SplitTaskList();

          await UpdateForOther();
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Có lỗi khi cập nhật nhóm công việc!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tiêu đề nhóm công việc!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> MoveSection(WorkPlanModel.Section item, bool isUp)
  {
    bool _success = true;
    try
    {
      moreSectionId = string.Empty;
      if (isUp)
      {
        var move = model.sections.Where(x => x.pos > item.pos).OrderBy(x => x.pos).FirstOrDefault();
        if (move != null)
        {
          item.pos++;
          move.pos--;
          await DbWorkPlan.Update(Layout.Company.id, model);
          await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã di chuyển vị trí nhóm {item.name}!");
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể di chuyển vị trí nhóm!");

      }
      else
      {
        var move = model.sections.Where(x => x.pos < item.pos).OrderByDescending(x => x.pos).FirstOrDefault();
        if (move != null)
        {
          item.pos--;
          move.pos++;
          await DbWorkPlan.Update(Layout.Company.id, model);
          await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã di chuyển vị trí nhóm {item.name}!");
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể di chuyển vị trí nhóm!");

        await UpdateForOther();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "MoveSection()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  #endregion

  #region Popup công việc chính

  private int editTab = 1;
  private WorkPlanModel.Task editTask = null;
  private List<WorkPlanModel.Task> subTasks = new();
  private List<TodolistModel.Todo> todoItems = new();

  private async Task<bool> AddTask(WorkPlanModel.Task item, string sectionId)
  {
    sectionId = TypeView == "calendar" ? filterSection : sectionId;
    bool _success = true;
    try
    {
      if (Shared.IsEmpty(editSectionId))
      {
        editTab = 1;
        editTask = new()
          {
            name = "Công việc mới",
            status = 1,
            plan_id = model.id,
            section_id = sectionId,
            labels = new(),
            members = new() { new() { id = Layout.User.id, role = 2 } }
          };
        await JSRuntime.InvokeVoidAsync("setFocus", "task_name");
        await JSRuntime.InvokeVoidAsync("textAutoSize", "task_name");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng hoàn tất thêm nhóm công việc trước!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AddTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task FastAddTask(WorkPlanModel.Task item, string sectionId, bool first = true)
  {
    try
    {
      var newTask = new WorkPlanModel.Task()
        {
          id = Mongo.RandomId(),
          name = "Công việc mới",
          status = 1,
          plan_id = model.id,
          section_id = sectionId,
          labels = new(),
          members = new() { new() { id = Layout.User.id, role = 2 } }
        };

      if (TypeView == "gantt")
      {
        newTask.date_start = DateTime.Today.Ticks;
        newTask.date_end = (DateTime.Today.AddDays(7) + new TimeSpan(23, 59, 0)).Ticks;
      }

      newList.Add(newTask.id);

      if (taskGroups.ContainsKey(sectionId))
      {
        var items = taskGroups[sectionId];
        if (first)
        {
          items.Insert(0, newTask);
        }
        else
        {
          newTask.pos = items.Max(x => x.pos) + 1;
          items.Add(newTask);
        }

        taskGroups[sectionId] = items;
      }

      await OnUpdateList(newTask, true);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AddTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task<bool> EditTask(string taskId)
  {
    bool _success = true;

    try
    {
      if (Shared.IsEmpty(editSectionId))
      {
        editTask = await DbWorkTask.Get(Layout.Company.id, taskId);
        var editRole = WorkService.RoleEditTask(model, editTask, Layout.User.id);
        if (editTab == 1 && editRole)
          await JSRuntime.InvokeVoidAsync("textAutoSize", "task_name");
        else if (editTab == 2)
          subTasks = await DbWorkTask.GetListInTask(Layout.Company.id, model.id, taskId);
        else if (editTab == 3)
          todoItems = await DbTodoItem.GetList(Layout.Company.id, taskId, Layout.User.id);
        else if (editTab == 4)
        {
          if (editRole)
          {
            await JSRuntime.InvokeVoidAsync("setFocus", "task_comment");
            await JSRuntime.InvokeVoidAsync("textAutoSize", "task_comment");
          }
        }
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng hoàn tất thêm nhóm công việc trước!");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "EditTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task OnEditList(WorkPlanModel.Task item)
  {
    editTab = 1;
    await EditTask(item.id);
  }

  private async Task OnSubTasks(WorkPlanModel.Task item)
  {
    editTab = 2;
    await EditTask(item.id);
  }

  private async Task OnTodolist(WorkPlanModel.Task item)
  {
    editTab = 3;
    await EditTask(item.id);
  }

  private void OnUpdateTask(WorkPlanModel.Task item)
  {
    editTab = 1;
    editTask = null;
  }

  private async Task OnUpdateList(WorkPlanModel.Task item, bool create = false)
  {
    if (item != null)
    {
      if (newList.Contains(item.id) && !create)
        newList.Remove(item.id);

      var check = await DbWorkTask.Get(Layout.Company.id, item.id);

      if (check == null)
      {
        // Lưu vào database
        await DbWorkTask.Create(Layout.Company.id, item);
        // Lưu lịch sử
        await WorkService.CreateLog(Layout.Company.id, "Khởi tạo công việc", item.name, item.plan_id, item.id, Layout.User);
        // Thông báo chuông
        foreach (var user in item.members.Where(x => x.id != Layout.User.id))
          await DbNotify.ForPlan(Layout.Company.id, 708, item.plan_id, item.id, user.id, Layout.User.id);

        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã tạo công việc thành công!");
      }
    }

    await UpdateForAll();
  }

  private void OnToggle(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private async Task OnDeleteTask(WorkPlanModel.Task task)
  {
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn đang thực hiện xóa \"{task.name}\". Việc này sẽ khiến dữ liệu công việc phụ bị mất.\nBạn có chắc chắn muốn thực hiện?"))
        return;
      // Thông báo chuông
      foreach (var user in model.members)
        await DbNotify.ForPlan(Layout.Company.id, 717, model.id, task.id, user.id, Layout.User.id);
      // Xóa công việc
      await DbWorkTask.Delete(Layout.Company.id, task.id);
      await WorkService.CreateLog(Layout.Company.id, "Xóa công việc", task.name, task.plan_id, null, Layout.User);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa công việc thành công!");

      if (task != null)
      {
        taskList.RemoveAll(x => x.id == task.id);
        SplitTaskList();
      }
      else
      {
        await GetTaskList();
      }
      await UpdateForOther();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnDeleteTask()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task OnUpdateMembersTask(WorkPlanModel.Task task)
  {
    try
    {
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var userList = shareStorage.MemberList;
      var old = await DbWorkTask.Get(Layout.Company.id, task.id);
      var differingMembers = task.members.Where(x => !old.members.Any(y => y.id == x.id)).ToList();
      if (differingMembers.Count > 0)
      {
        var userInfo = differingMembers.Select(x => WorkService.ConvertToMember(userList, x)).ToList();
        userInfo = await EmailService.GetAcceptReceiveEmail(userInfo, Layout.Company.id);

        var send = new Task(() =>
        {
          EmailService.AssignedJob(userInfo, Layout.User.FullName, model.name, $"{navigation.BaseUri}work/{model.id}/task", task.name, out string message);
        });

        send.Start();
      }
      await DbWorkTask.Update(Layout.Company.id, task);
      await WorkService.LogTaskMembers(Layout.Company.id, old, task, Layout.User, userList);

      await UpdateForOther();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateMembers()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  #endregion

  #region Chức năng kéo thả công việc

  private async Task<bool> OnItemDragdrop(WorkPlanModel.Task item)
  {
    bool _success = true;
    try
    {
      var hubConnection = hubService.GetHubConnection();
      toggleList.Clear();
      if (WorkService.RoleEditTask(model, item, Layout.User.id))
      {
        foreach (var group in taskGroups)
        {
          if (group.Value.Contains(item))
          {
            for (int pos = 0; pos < group.Value.Count; pos++)
            {
              var task = group.Value[pos];
              if (task.id != null)
              {
                // Sắp xếp lại
                task.pos = pos;
                // Chuyển nhóm
                if (task.id == item.id)
                {
                  var section = model.sections.SingleOrDefault(x => x.id == group.Key);
                  task.section_id = section.id;
                  await WorkService.CreateLog(Layout.Company.id, "Cập nhật nhóm công việc", section.name, task.plan_id, task.id, Layout.User);
                }
                await DbWorkTask.Update(Layout.Company.id, task);
                await JSRuntime.InvokeVoidAsync("console.log", $"{task.pos} : {task.name}");
              }
            }
            break;
          }
        }
        await JSRuntime.InvokeVoidAsync("console.warn", $"plan_{item.plan_id} syncing {item.plan_id}");

        await UpdateForOther();
      }
      else
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể thay đổi nhóm, vì bạn không tham gia vào công việc này!");
        SplitTaskList();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnItemDragdrop()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task ToogleSidebar()
  {
    Layout.User.custom.sidebar_fwork = !Layout.User.custom.sidebar_fwork;

    await DbUser.Update(Layout.Company.id, Layout.User, globalService);
  }

  #endregion

  #region Các hàm liên quan đến sheet

  private void OnChangedSheet(string sheetId)
  {
    sheet = sheetId;
    currentSheet = model.sheets.SingleOrDefault(x => x.id == sheetId);
    navigation.NavigateTo($"/work/{model.id}/task/{TypeView}?sheet={sheet}");
  }

  private async Task OnDeleteSheet(bool isConfirm)
  {
    if (isConfirm)
    {
      var sheetOrdered = model.sheets.OrderBy(x => x.possition).ToList();
      int index = sheetOrdered.FindIndex(x => x.id == currentSheet.id);
      string nextSheet = index == 0 ? sheetOrdered[index + 1].id : sheetOrdered[index - 1] != null ? sheetOrdered[index - 1].id : sheetOrdered[index + 1].id;
      if (await WorkService.DeleteSheet(Layout.Company.id, model.id, currentSheet.id))
      {
        model.sheets.RemoveAll(x => x.id == currentSheet.id);
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa sheet thành công!");
        OnChangedSheet(nextSheet);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thành công, vui lòng thử lại!");
    }
  }
  #endregion
}