@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>Thống kê Kế hoạch</PageTitle>

<div class="card flex_column is_fullheight">
  <ul class="columns is-vcentered is-variable is-2 mb-2 is-multiline">
    <li class="column is-full-mobile">
      <h1 class="title is-5 has-text-info">
        THỐNG KÊ THÀNH VIÊN
      </h1>
    </li>
    <li class="column is-narrow">
      <Dropdown>
        <Trigger>
          <a class="icon-text">
            <span class="has-text-link">
              @(filterStatus != 0 ? WorkService.StatusPlan(filterStatus).name : "Trạng thái")
            </span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeFilterStatus(0)">Tất cả</a>
          @foreach (var item in WorkService.StatusPlan())
          {
            <a class="dropdown-item" @onclick="() => ChangeFilterStatus(item.id)">@item.name</a>
          }
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
  </ul>

  @if (Layout.IsMobile)
  {
    <div class="inner_section">
      @foreach (var item in members)
      {
        var report = reportList.SingleOrDefault(x => x.id == item.id);
        var done = Shared.Progress(report.done, report.total);
        var late = Shared.Progress(report.late, report.total);
        <ul class="columns is-multiline is-variable is-1 is-mobile my-2 is-size-7">
          <li class="column is-full">
            <div class="user_item">
              <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
              <div>
                <p class="has-text-weight-semibold has-text-info font_16">
                  @item.name
                </p>
                <p class="text_1_line has-text-grey is-size-7">
                  @item.departments_name
                </p>
              </div>
            </div>
          </li>
          <li class="column is-two-thirds">
            <div class="icon-text">
              <span class="icon is-small mr-2 has-text-link">
                <i class="material-icons-outlined is-size-6">view_timeline</i>
              </span>
              <span class="has-text-grey">Kế hoạch tham gia:</span>
            </div>
          </li>
          <li class="column is-one-third">
            @report.other
          </li>
          <li class="column is-two-thirds">
            <div class="icon-text">
              <span class="icon is-small mr-2 has-text-success">
                <i class="material-icons-outlined is-size-6">done_all</i>
              </span>
              <span class="has-text-grey">Công việc hoàn thành:</span>
            </div>
          </li>
          <li class="column is-one-third">
            <span>@string.Format("{0}/{1}", report.done, report.total)</span>
            <span class="px-1">•</span>
            <span>@Shared.ConvertNumber(done)%</span>
          </li>
          <li class="column is-two-thirds">
            <div class="icon-text">
              <span class="icon is-small mr-2 has-text-danger">
                <i class="material-icons-outlined is-size-6">error_outline</i>
              </span>
              <span class="has-text-grey">Công việc trễ hạn:</span>
            </div>
          </li>
          <li class="column is-one-third">
            <span>@string.Format("{0}/{1}", report.late, report.total)</span>
            <span class="px-1">•</span>
            <span>@Shared.ConvertNumber(late)%</span>
          </li>
        </ul>
      }
    </div>
  }
  else
  {
    <div class="scrolly inner_section" style="flex:1">
      <table class="table is-fullwidth is-vcentered is-noborder is-responsive sticky only_desktop">
        <thead>
          <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
            <th>Thành viên</th>
            <th align="center" width="140px">Kế hoạch tham gia</th>
            <th align="center" width="150px">Công việc hoàn thành</th>
            <th align="center" width="150px">Công việc trễ hạn</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in members)
          {
            var report = reportList.SingleOrDefault(x => x.id == item.id);
            var done = Shared.Progress(report.done, report.total);
            var late = Shared.Progress(report.late, report.total);
            <tr>
              <td>
                <div class="user_item">
                  <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
                  <div>
                    <p class="has-text-weight-semibold has-text-info font_14">
                      @item.name
                    </p>
                    <p class="text_1_line has-text-grey is-size-7">
                      @item.departments_name
                    </p>
                  </div>
                </div>
              </td>
              <td align="center">
                @report.other
              </td>
              <td align="center">
                <span>@string.Format("{0}/{1}", report.done, report.total)</span>
                <span class="px-1">•</span>
                <span>@Shared.ConvertNumber(done)%</span>
              </td>
              <td align="center">
                <span>@string.Format("{0}/{1}", report.late, report.total)</span>
                <span class="px-1">•</span>
                <span>@Shared.ConvertNumber(late)%</span>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  }
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<MemberModel> members = new();
  private List<WorkPlanModel.Report> reportList = new();
  private DepartmentModel department = new() { name = "Tất cả phòng ban", members_id = new() };
  private List<string> filterUserList = new();
  private string filterDepartment = string.Empty;
  private int filterStatus = 0;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    await ChangeFilterDepartment(Layout.User.department_default);
  }

  private async Task ChangeFilterDepartment(string value)
  {
    department = departmentAll.FirstOrDefault(x => x.id == value);
    if (department == null)
    {
      department = new() { name = "Tất cả phòng ban", members_id = new() };
      filterDepartment = string.Empty;
      filterUserList = shareStorage.MemberList.Select(x => x.id).ToList();
    }
    else
    {
      filterDepartment = value;
      filterUserList = department.members_id;
    }
    await GetDataList();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserList = new() { value };
    await GetDataList();
  }

  private async Task ChangeFilterStatus(int value)
  {
    filterStatus = value;
    await GetDataList();
  }

  private async Task GetDataList()
  {
    try
    {
      // Lấy tất cả kế hoạch đang có
      var data = await DbWorkPlan.GetAll(Layout.Company.id);

      // Tìm kiếm theo trạng thái kế hoạch
      if (filterStatus != 0)
        data = data.Where(x => x.status == filterStatus).ToList();

      // Lấy danh sách kế hoạch có thành viên tham gia
      List<WorkPlanModel> planList = new();
      foreach (var plan in data)
      {
        if (filterUserList.Count > 0)
        {
          var check = plan.members.Where(x => filterUserList.Contains(x.id)).Count();
          if (check > 0)
            planList.Add(plan);
        }
      }

      // Lấy công việc trong tất cả kế hoạch
      List<WorkPlanModel.Task> taskList = new();
      foreach (var plan in planList)
      {
        var tasks = await DbWorkTask.GetListInPlan(Layout.Company.id, plan.id);
        taskList.AddRange(tasks);
      }

      // Lấy danh sách thành viên trong phòng ban
      members.Clear();
      if (filterUserList.Count > 0)
        members = shareStorage.MemberList.Where(x => filterUserList.Contains(x.id)).ToList();

      // Lấy thống kê thành viên
      reportList.Clear();
      foreach (var member in members)
      {
        var tasks = taskList.Where(x => x.members.Where(m => m.id == member.id).Count() > 0).ToList();
        var report = WorkService.ReportTasks(tasks);
        report.id = member.id;
        // Số lượng kế hoạch tham gia
        report.other = GetPlanCount(planList, member.id);
        reportList.Add(report);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private int GetPlanCount(List<WorkPlanModel> planList, string userId)
  {
    int count = 0;
    foreach (var plan in planList)
    {
      var check = plan.members.Where(x => x.id == userId).Count();
      if (check > 0)
        count++;
    }
    return count;
  }
}