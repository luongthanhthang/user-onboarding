@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column is_fullheight">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <div class="dropdown is-hoverable">
        <div class="dropdown-trigger">
          <div class="icon-text">
            <h1 class="title is-5 has-text-info">
              TOP HOÀN THÀNH TODOLIST
            </h1>
            <span class="icon has-text-info">
              <i class="material-icons-outlined is-size-5">info</i>
            </span>
          </div>
        </div>
        <div class="dropdown-menu" style="width: 250px;">
          <div class="dropdown-content">
            <div class="dropdown-item">
              Xếp hạng tính theo tỉ lệ số công việc được hoàn thành trên tổng số công việc được tạo (mỗi Todolist bao gồm nhiều công việc được tạo).
            </div>
          </div>
        </div>
      </div>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-narrow" style="">
      <Dropdown DropdownClass="is-right">
        <Trigger>
          <a class="icon-text">
            @if (filterDate == 1)
            {
              <span class="has-text-link">Tuần này</span>
            }
            else if (filterDate == 11)
            {
              <span class="has-text-link">Tuần trước</span>
            }
            else if (filterDate == 2)
            {
              <span class="has-text-link">Tháng này</span>
            }
            else if (filterDate == 22)
            {
              <span class="has-text-link">Tháng trước</span>
            }
            else if (filterDate == 3)
            {
              <span class="has-text-link">Quý này</span>
            }
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeDate(1)">
            Tuần này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(11)">
            Tuần trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(2)">
            Tháng này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(22)">
            Tháng trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(3)">
            Quý này
          </a>
        </MenuContent>
      </Dropdown>
    </li>
  </ul>
  <div class="inner_section flex_column" style="flex:1">
    <ul class="columns is-variable is-8 rank_top">
      @for (int i = 0; i < 3; i++)
      {
        if (i < rankList.Count)
        {
          var item = rankList[i];
          <li class="column is-one-third">
            <div class="has-text-centered pb-3 mb-3 is-relative">
              <div class="title">@(i + 1)</div>
              <div class="subtitle">
                @Shared.ConvertNumber(item.value)%
              </div>
            </div>
            <div class="user_item">
              <img class="image is-36x36 mr-3" src="@item.avatar" alt="IMG">
              <div>
                <strong class="is-block is-size-6 has-text-info">@item.name</strong>
                <span class="text_1_line has-text-grey is-size-7" style="width: 240px;">
                  @item.departments
                </span>
              </div>
            </div>
          </li>
        }
      }
    </ul>
    <div class="scrolly rank_list mt-5" style="flex:1">
      <ul class="columns is-multiline is-variable is-2 m-0">
        @for (int i = 3; i < rankList.Count; i++)
        {
          if (i < rankList.Count)
          {
            var item = rankList[i];
            <li class="column is-half px-5">
              <ul class="columns is-vcentered is-variable is-2 is-mobile">
                <li class="column is-1 is-size-6">#@(i + 1)</li>
                <li class="column is-9">
                  <div class="user_item">
                    <img class="image is-36x36 mr-3" src="@item.avatar" alt="IMG">
                    <div>
                      <strong class="is-block is-size-6 has-text-info">@item.name</strong>
                      <span class="text_1_line has-text-grey is-size-7" style="width: 240px;">
                        @item.departments
                      </span>
                    </div>
                  </div>
                </li>
                <li class="column is-2 has-text-right has-text-info has-text-weight-semibold">
                  @Shared.ConvertNumber(item.value)%
                </li>
              </ul>
            </li>
          }
        }
      </ul>
    </div>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<ProgressModel> rankList = new();
  private List<string> filterUserList = new();
  private string filterDepartment = string.Empty;
  private int filterDate = 1;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    await ChangeFilterDepartment(Layout.User.department_default);
  }

  private async Task ChangeDate(int type)
  {
    filterDate = type;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    if (string.IsNullOrEmpty(value))
      filterUserList = shareStorage.MemberList.Select(x => x.id).ToList();
    else
      filterUserList = shareStorage.MemberList.Where(x => x.departments_id.Contains(filterDepartment))
        .Select(x => x.id).ToList();
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      Shared.GetTimeSpan(filterDate, out DateTime start, out DateTime end);
      var database = await DbTodolist.GetList(Layout.Company.id, start, end);

      // Số ngày cần tạo Todolist
      int day = 0;
      for (DateTime date = end; date >= start; date = date.AddDays(-1))
      {
        if (date < DateTime.Now)
        {
          if (!DbDayOff.CheckOff(shareStorage.DayOffList, date))
            day++;
        }
      }

      rankList.Clear();
      foreach (var userId in filterUserList)
      {
        var user = shareStorage.MemberList.SingleOrDefault(x => x.id == userId);
        if (user != null)
        {
          int done = 0;
          int total = 0;
          var todolist = database.Where(x => x.user_create == user.id && !x.day_off).ToList();
          foreach (var item in todolist)
          {
            done += item.done;
            total += item.total;
          }

          rankList.Add(new ProgressModel()
            {
              id = user.id,
              name = user.name,
              avatar = user.avatar,
              departments = user.departments_name,
              value = Shared.Progress(done, total)
            });
        }
      }
      rankList = rankList.OrderByDescending(x => x.value).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}