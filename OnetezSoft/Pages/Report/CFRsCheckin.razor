@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column is_fullheight">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <div class="title is-5 is-size-6-mobile has-text-info">TỔNG QUAN</div>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <_InputDate 
        @bind-Start="filterStart"
        @bind-End="filterEnd"
        IsRange
        HasDropdown
        ListOptions="new() {1,11,2,22,3,7}"
        OnRangeSelect="ChangePicker" />
    </li>
  </ul>
   <div class="inner_section scrolly" style="flex:1">
    <ul class="columns is-multiline is-variable is-2">
    @for (int i = 0; i < chartList.Count; i++)
    {
      if (i < chartList.Count)
      {
        var item = chartList[i];
        <li class="column @(i == 0 ? "is-full" : "is-half")">
          <h2 class="title is-6 has-text-info mb-3">@item.name</h2>
          <div class="@(Layout.IsMobile ? "" : "pl-6")">
            <div style="height: 150px;">
              <canvas id="chart_@item.id" height="150"></canvas>
            </div>
            <div class="has-text-info pt-2 pl-5">@item.desc</div>
          </div>
        </li>
      }
    }
  </ul>
   </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<ProgressModel> chartList = new();
  private string filterUserId = string.Empty;
  private long filterStart { get; set; }
  private long filterEnd { get; set; }
  private string filterDepartment = null;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    filterDepartment = Layout.User.department_default;

    await ChangeFilterDepartment(filterDepartment);
  }

  public async Task ChangePicker(DateRange range)
  {
    filterStart = range.Start.Ticks;
    filterEnd = range.End.Ticks;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var data = await DbOkrCheckin.GetList(Layout.Company.id, Layout.CycleId,
        new DateTime(filterStart), new DateTime(filterEnd));

      chartList.Clear();
      if (!string.IsNullOrEmpty(filterUserId))
      {
        var userInfo = shareStorage.MemberList.FirstOrDefault(x => x.id == filterUserId);
        if (userInfo != null)
        {
          var item = new ProgressModel()
            {
              id = userInfo.id,
              name = userInfo.name
            };
          item.desc = await RenderChart(filterUserId, new List<string>() { filterUserId }, data);
          chartList.Add(item);
        }
      }
      else if (!string.IsNullOrEmpty(filterDepartment))
      {
        var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
        if (department != null)
        {
          var item = new ProgressModel()
            {
              id = department.id,
              name = department.name
            };
          item.desc = await RenderChart(department.id, department.members_id, data);
          chartList.Add(item);

          var childs = departmentAll.Where(x => x.parent == department.id);
          foreach (var child in childs)
          {
            var itemChild = new ProgressModel()
              {
                id = child.id,
                name = child.name
              };
            itemChild.desc = await RenderChart(child.id, child.members_id, data);
            chartList.Add(itemChild);
          }
        }
      }
      else
      {
        var childs = departmentAll.Where(x => x.parent == null);
        foreach (var child in childs)
        {
          var item = new ProgressModel()
            {
              id = child.id,
              name = child.name
            };
          item.desc = await RenderChart(child.id, child.members_id, data);
          chartList.Add(item);
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<string> RenderChart(string id, List<string> members_id, List<OkrCheckinModel> data)
  {
    var checkins = (from x in data
                    where members_id.Contains(x.user_create)
                      || members_id.Contains(x.user_checkin)
                    select x).ToList();

    var colors = "#355caa,#dc787e";
    var labels = ("Đúng hạn,Trễ hạn").Split(",");
    var values = new int[2];

    values[0] = checkins.Where(x => x.status_checkin != 2).Count();
    values[1] = checkins.Where(x => x.status_checkin == 2).Count();

    await JSRuntime.InvokeAsync<string>("chartDoughnut", "chart_" + id, labels, values, colors);

    return $"{values[0]}/{checkins.Count} Check-in đúng hạn";
  }
}