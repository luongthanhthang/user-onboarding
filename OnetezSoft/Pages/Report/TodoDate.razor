@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        THỐNG KÊ ĐÚNG HẠN
      </h1>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <_InputDate 
        @bind-Start="filterStart"
        @bind-End="filterEnd"
        IsRange
        OnRangeSelect="ChangePicker"
        HasDropdown
        ListOptions="new() {1,11,2,22,3,7}"/>
    </li>
  </ul>
  <div class="inner_section" style="flex:1">
     <ul class="columns is-multiline is-variable is-2">
       @for (int i = 0; i < chartList.Count; i++)
      {
        if (i < chartList.Count)
        {
          var item = chartList[i];
          var desc = item.desc.Split("|");
          <li class="column is-full">
            <h2 class="title is-6 has-text-info">@item.name</h2>
          </li>
          <li class="column is-half pl-5">
            <div style="height: 150px;">
              <canvas id="chartCheckin_@item.id" height="150"></canvas>
            </div>
            <div class="has-text-info pt-2 pl-5">@desc[0]</div>
          </li>
          <li class="column is-half pl-5">
            <div style="height: 150px;">
              <canvas id="chartCheckout_@item.id" height="150"></canvas>
            </div>
            <div class="has-text-info pt-2 pl-5">@desc[1]</div>
          </li>
        }
      }
    </ul>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<ProgressModel> chartList = new();
  private string filterDepartment = string.Empty;
  private string filterUserId = string.Empty;
  private long filterStart;
  private long filterEnd;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    await ChangeFilterDepartment(Layout.User.department_default);
  }

  public async Task ChangePicker(DateRange range)
  {
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var start = new DateTime(filterStart);
      var end = new DateTime(filterEnd);
      var database = await DbTodolist.GetList(Layout.Company.id, start, end);

      // Số ngày cần tạo Todolist
      int day = 0;
      for (DateTime date = end; date >= start; date = date.AddDays(-1))
      {
        if (date < DateTime.Now)
        {
         
          if (!DbDayOff.CheckOff(shareStorage.DayOffList, date))
            day++;
        }
      }

      chartList.Clear();
      if (!string.IsNullOrEmpty(filterUserId))
      {
        var user = UserService.GetMember(shareStorage.MemberList, filterUserId);
        var item = new ProgressModel()
          {
            id = filterUserId,
            name = user.name
          };
        item.desc = await RenderChart(filterUserId, new List<string>() { filterUserId }, database, day);
        chartList.Add(item);
      }
      else if (!string.IsNullOrEmpty(filterDepartment))
      {
        var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
        if (department != null)
        {
          var item = new ProgressModel()
            {
              id = department.id,
              name = department.name
            };
          item.desc = await RenderChart(department.id, department.members_id, database, day);
          chartList.Add(item);

          var childs = departmentAll.Where(x => x.parent == department.id);
          foreach (var child in childs)
          {
            var itemChild = new ProgressModel()
              {
                id = child.id,
                name = child.name
              };
            itemChild.desc = await RenderChart(child.id, child.members_id, database, day);
            chartList.Add(itemChild);
          }
        }
      }
      else
      {
        var childs = departmentAll.Where(x => x.parent == null);
        foreach (var child in childs)
        {
          var item = new ProgressModel()
            {
              id = child.id,
              name = child.name
            };
          item.desc = await RenderChart(child.id, child.members_id, database, day);
          chartList.Add(item);
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<string> RenderChart(string id, List<string> members_id, List<TodolistModel> data, int day)
  {
    var todolist = (from x in data
                    where !x.day_off && members_id.Contains(x.user_create)
                    select x).ToList();

    var total = day * members_id.Count;

    var colors = "#355caa,#dc787e";
    var labels = ("Đúng hạn,Trễ hạn").Split(",");
    var checkins = new int[2];
    var checkout = new int[2];

    // Lượt checkin
    checkins[0] = todolist.Where(x => x.ontime_checkin).Count();
    checkins[1] = total - checkins[0];
    // Lượt checkout
    checkout[0] = todolist.Where(x => x.ontime_checkout).Count();
    checkout[1] = total - checkout[0];

    await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartCheckin_" + id, labels, checkins, colors);
    await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartCheckout_" + id, labels, checkout, colors);

    return $"{checkins[0]}/{total} Check-in đúng hạn|{checkout[0]}/{total} Check-out đúng hạn";
  }
}