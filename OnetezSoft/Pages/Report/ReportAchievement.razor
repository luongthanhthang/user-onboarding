@page "/reports"
@page "/reports/achievement"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="main_content">
  <div class="card flex_column is_fullheight">
    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
      <li class="column">
        <h1 class="title is-5 has-text-info">
          THÀNH TỰU
        </h1>
      </li>
      <li class="column"></li>
      <li class="column is-narrow">
        <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
      </li>
      <li class="column is-one-quarter">
        <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
      </li>
      <li class="column is-narrow">
        <_InputDate @bind-Start="filterStart"
        @bind-End="filterEnd"
                                  IsRange
                                  HasDropdown
                     ListOptions="new() {1,11,2,22,3,7}"
                     OnRangeSelect="ChangeFilterDate" />
       </li>
     </ul>

     <div class="inner_section flex_column" style="flex:1">
       <ul class="columns" style="flex:1;overflow:hidden">
         <li class="column is-5 has-text-centered px-6">
           <h2 class="title is-6 has-text-info mb-3">
             @departmentName
           </h2>
           <div class="icon-achievement">
             @achievementList.Sum(x => x.star)
           </div>
           <div class="title has-text-link mb-1 mt-3" style="font-size: 18px;">
             TỔNG SỐ SAO
           </div>
           <div class="mb-3">
             ĐẾN TỪ THÀNH TỰU
           </div>
           <ul class="columns is-variable is-2 is-mobile">
             @for (int i = 0; i < 3; i++)
            {
              if (i < rankList.Count)
              {
                var item = rankList[i];
                var color = i == 0 ? "has-text-warning" : i == 1 ? "has-text-danger" : "has-text-link";
                <li class="column is-one-third has-text-centered @color">
                  @if (i == 0)
                  {
                    <div>1st</div>
                  }
                  else if (i == 1)
                  {
                    <div>2nd</div>
                  }
                  else if (i == 2)
                  {
                    <div>3rd</div>
                  }
                  <div class="image is-36x36 is-rounded my-2">
                    <img src="@item.avatar" title="@item.name" />
                  </div>
                  <br />
                  <span class="icon-text">
                    <span class="has-text-weight-semibold">@item.value</span>
                    <span class="icon">
                      <i class="material-icons-round is-size-6">star_border</i>
                    </span>
                  </span>
                </li>
              }
            }
          </ul>
        </li>
        <li style="height: 100%; max-height: calc(100vh - 200px)" class="column is-7 scrolly">
          <div>
            <ul class="columns is-multiline is-vcentered is-mobile is-variable is-2">
              @foreach (var item in achievementList)
              {
                var option = achievementOptions.FirstOrDefault(x => x.id == item.type_id);
                if (option != null)
                {
                  var icon = option.image;
                  var user = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user);
                  <li class="column is-1-tablet is-2-mobile">
                    <div class="image is-32x32">
                      <img src="@icon" />
                    </div>
                  </li>
                  <li class="column is-8-tablet is-10-mobile">
                    <div class="user_item">
                      <img class="image is-36x36 mr-3" src="@user.avatar" alt="IMG">
                      <p class="has-text-grey">
                        <span class="has-text-weight-semibold has-text-info">@user.name</span>
                        <span>đã đạt thành tựu</span>
                        <span class="has-text-weight-semibold has-text-info">@item.name</span>
                      </p>
                    </div>
                  </li>
                  <li class="column is-3-tablet is-full-mobile">
                    <div class="columns is-variable is-1 is-mobile">
                      <div class="column has-text-warning is-flex is-vcentered">
                        <span class="has-text-weight-semibold">@item.star</span>
                        <i class="material-icons-round is-size-6">star_border</i>
                      </div>
                      <div class="column is-narrow has-text-grey">
                        @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
                      </div>
                    </div>
                  </li>
                }
              }
            </ul>
          </div>
        </li>
      </ul>
    </div>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Thống kê thành tựu";

  private List<DepartmentModel> departmentAll = new();
  private List<DepartmentModel.SelectList> departments = new();

  private List<AchievementModel> achievementList = new();
  private List<AchievementModel.Option> achievementOptions = new();
  private List<ProgressModel> rankList = new();
  private string filterDepartment = string.Empty;
  private List<string> filterUserList = new();
  private long filterStart = DateTime.Today.Ticks;
  private long filterEnd = DateTime.Today.Ticks;
  private string departmentName = "Tất cả phòng ban";

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    departmentAll = await DbDepartment.GetAll(Layout.Company.id);
    departments.AddRange(await DbDepartment.GetSelectList(Layout.Company.id, null, 0, null));

    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    await ChangeFilterDepartment(Layout.User.department_default);
  }

  private async Task ChangeFilterDate(DateRange e)
  {
    filterStart = e.Start.Ticks;
    filterEnd = e.End.Ticks;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    var department = departmentAll.FirstOrDefault(x => x.id == value);
    if (department == null)
    {
      departmentName = "Tất cả phòng ban";
      filterDepartment = string.Empty;
      filterUserList = shareStorage.MemberList.Select(x => x.id).ToList();
    }
    else
    {
      departmentName = department.name;
      filterDepartment = value;
      filterUserList = shareStorage.MemberList.Where(x => x.departments_id.Contains(filterDepartment))
        .Select(x => x.id).ToList();
    }
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserList = new() { value };
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var start = new DateTime(filterStart);
      var end = new DateTime(filterEnd);
      var database = await DbAchievement.GetList(Layout.Company.id, null, null, start, end);
      achievementList = database.Where(x => filterUserList.Contains(x.user)).ToList();
      achievementOptions = await DbAchievementConfig.GetAll(Layout.Company.id);

      rankList.Clear();
      foreach (var userId in filterUserList)
      {
        var user = shareStorage.MemberList.SingleOrDefault(x => x.id == userId);
        if (user != null)
        {
          var star = (from x in database
                      where x.user == user.id
                      select x.star).Sum();

          rankList.Add(new ProgressModel()
            {
              id = user.id,
              name = user.name,
              avatar = user.avatar,
              departments = user.departments_name,
              value = star
            });
        }
      }
      rankList = rankList.OrderByDescending(x => x.value).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}