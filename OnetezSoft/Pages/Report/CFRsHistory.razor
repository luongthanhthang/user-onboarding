@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column is_fullheight">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <div class="title is-5 is-size-6-mobile has-text-info">LỊCH SỬ CHECK-IN</div>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <_InputDate 
        @bind-Start="filterStart"
        @bind-End="filterEnd"
        IsRange
        HasDropdown
        ListOptions="new() {1,11,2,22,3,7}"
        OnRangeSelect="ChangePicker" />
     </li>
  </ul>

   <div id="scrollbox" class="inner_section scrolly table-container" style="flex:1;overflow:auto!important">
     <table class="table is-fullwidth is-vcentered is-responsive sticky only_desktop">
       <thead>
         <tr class="tr-hide">
           <th width="25%">Người check-in</th>
           <th width="8%"></th>
           <th width="25%">Người được check-in</th>
           <th>Ngày thực hiện check-in</th>
           <th width="15%" align="right">Trạng thái</th>
         </tr>
       </thead>
       <tbody>
         @foreach (var item in checkins)
        {
          var create = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_create);
          var checkin = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_checkin);
          if (create == null || checkin == null)
            continue;
          <tr>
            <td>
              <label class="td-label">Người check-in</label>
              <div class="td-value">
                <div class="user_item">
                  <img class="image is-32x32 mr-2" src="@checkin.avatar" alt="IMG">
                  <span>@checkin.name</span>
                </div>
              </div>
            </td>
            <td class="td-hide">
              <span class="icon has-text-grey">
                <i class="material-icons-outlined is-size-5">east</i>
              </span>
            </td>
            <td>
              <label class="td-label">Được check-in</label>
              <div class="td-value">
                <div class="user_item">
                  <img class="image is-32x32 mr-2" src="@create.avatar" alt="IMG">
                  <span>@create.name</span>
                </div>
              </div>
            </td>
            <td>
              <label class="td-label">Ngày thực hiện</label>
              <div class="td-value">
                <a class="has-text-link has-text-weight-semibold">
                  @Shared.ConvertDateWeek(item.date_create)
                </a>
              </div>
            </td>
            <td align="right">
              <label class="td-label">Trạng thái</label>
              <div class="td-value">
                @if (item.status_checkin != 2)
                {
                  <span class="has-text-success">Đúng hạn</span>
                }
                else
                {
                  <span class="has-text-danger">Trễ hạn</span>
                }
              </div>
            </td>
          </tr>
        }
        @if (checkins.Count == 0)
        {
          <tr>
            <td colspan="5">
              <div class="has-text-grey py-6 has-text-centered">
                Không có dữ liệu !
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
   </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<OkrCheckinModel> checkins = new();
  private string filterUserId = string.Empty;
  private long filterStart { get; set; }
  private long filterEnd { get; set; }
  private string filterDepartment = null;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    filterDepartment = Layout.User.department_default;

    await ChangeFilterDepartment(filterDepartment);
  }

  public async Task ChangePicker(DateRange range)
  {
    filterStart = range.Start.Ticks;
    filterEnd = range.End.Ticks;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var data = await DbOkrCheckin.GetList(Layout.Company.id, Layout.CycleId,
        new DateTime(filterStart), new DateTime(filterEnd));

      if (!string.IsNullOrEmpty(filterUserId))
      {
        checkins = (from x in data
                    where x.user_create == filterUserId
                    || x.user_checkin == filterUserId
                    orderby x.date_create descending
                    select x).ToList();
      }
      else if (!string.IsNullOrEmpty(filterDepartment))
      {
        var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
        if (department != null)
        {
          checkins = (from x in data
                      where department.members_id.Contains(x.user_create)
                      || department.members_id.Contains(x.user_checkin)
                      orderby x.date_create descending
                      select x).ToList();
        }
      }
      else
      {
        checkins = data;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}