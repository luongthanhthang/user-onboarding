@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column is_fullheight @(_loaded ? "" : "is-loading")">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        DANH SÁCH VI PHẠM
      </h1>
    </li>

    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment.name" OnUpdate="ChangeDepartment" />
    </li>
    <li class="column is-one-quarter-tablet is-full-mobile">
      <div class="control has-icons-left has-icons-right has_suggest">
        <input class="input is-rounded is-small" type="text" placeholder="Nhập tên nhân viên..."
               autocomplete="off" @bind="UserSearch" @bind:event="oninput" />
        <ul class="suggest">
          @foreach (var item in userSuggests)
          {
            <li class="rsitem" @onclick="() => UserSelected(item)">
              <div class="user_item">
                <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                <span>@item.name</span>
              </div>
            </li>
          }
        </ul>
        <span class="icon is-left">
          <i class="material-icons-outlined">search</i>
        </span>
        <a class="@(Shared.IsEmpty(UserSearch) ? "is-hidden" : "icon is-right has-text-link")" @onclick="() => UserSearch = null">
          <i class="material-icons-outlined">close</i>
        </a>
      </div>
    </li>
    <li class="column is-narrow">
      <_InputDate @bind-Start="filterStart"
      @bind-End="filterEnd"
                              IsRange
                   OnRangeSelect="ChangePicker"
                              HasDropdown
                   ListOptions="new() {1,11,2,22,3,7}" />
     </li>
    <li class="column is-narrow">
      <a class="button is-warning" @onclick="Export">
        <span class="icon">
          <i class="material-icons-outlined is-size-5">file_download</i>
        </span>
      </a>
    </li>
   </ul>

   <div class="scrolly inner_section" style="flex:1">
     <table class="table is-noborder is-fullwidth is-vcentered is-responsive sticky only_desktop">
       <thead>
         <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
           <th>Thành viên</th>
           <th width="150px" align="center">Check-in trễ hạn</th>
           <th width="150px" align="center">Check-out trễ hạn</th>
           <th width="150px" align="center">Không làm Todolist</th>
         </tr>
       </thead>
       <tbody>
         @foreach (var item in reports)
        {
          <tr>
            <td>
              <div class="user_item">
                <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-semibold has-text-info is-size-6">
                    @item.name
                  </p>
                  <p class="text_1_line has-text-grey is-size-7" style="width: 250px;">
                    @item.departments
                  </p>
                </div>
              </div>
            </td>
            <td class="has-text-weight-semibold" align="center">
              <label class="td-label is-50">Check-in trễ</label>
              <div class="td-value">
                <span class="@(item.checkin > 0 ? "has-text-danger" : "")">@item.checkin</span>
              </div>
            </td>
            <td class="has-text-weight-semibold" align="center">
              <label class="td-label is-50">Check-out trễ</label>
              <div class="td-value">
                <span class="@(item.checkout > 0 ? "has-text-danger" : "")">@item.checkout</span>
              </div>
            </td>
            <td class="has-text-weight-semibold" align="center">
              <label class="td-label is-50">Không làm</label>
              <div class="td-value">
                <span class="@(item.nodata > 0 ? "has-text-danger" : "")">@item.nodata</span>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();
  private bool _loaded = false;
  private List<ReportModel> reports = new();
  private List<MemberModel> userList = new();
  private List<UserModel> allUser = new();
  private List<MemberModel> userSuggests = new();
  private string filterUserSearch = string.Empty;
  private long filterStart { get; set; }
  private long filterEnd { get; set; }
  private DepartmentModel.SelectList filterDepartment = new() { name = "Tất cả phòng ban" };

  protected override async Task OnInitializedAsync()
  {
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;
    allUser = await DbUser.GetAll(Layout.Company.id, globalService);

    DepartmentModel.SelectList department = null;
    if (!string.IsNullOrEmpty(Layout.User.department_default))
      department = departments.SingleOrDefault(x => x.id == Layout.User.department_default);

    await ChangeDepartment(department == null ? string.Empty : department.id);
  }

  public async Task ChangePicker(DateRange range)
  {
    await GetData();
  }

  private async Task ChangeDepartment(string id)
  {
    var item = departments.FirstOrDefault(x => x.id == id);

    userSuggests = new();
    filterUserSearch = string.Empty;
    filterDepartment = item != null ? item : new() { name = "Tất cả phòng ban" };
    var shareStorage = await globalService.GetShareStorage(Layout.Company.id);

    if (string.IsNullOrEmpty(id))
      userList = (from x in shareStorage.MemberList select x).ToList();
    else
      userList = (from x in shareStorage.MemberList
                  where x.departments_id.Contains(filterDepartment.id)
                  select x).ToList();

    userList = userList.Where(x =>
    {
      var user = allUser.FirstOrDefault(y => y.id == x.id);
      if(user ==  null)
        return false;
      else
      {
        return !user.no_report_todolist;
      }
    }).ToList();

    await GetData();
  }

  private string UserSearch
  {
    get => filterUserSearch;
    set
    {
      filterUserSearch = value;
      userSuggests = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in userList)
        {
          bool check = true;
          if (!string.IsNullOrEmpty(filterDepartment.id))
            if (item.departments_id == null || !item.departments_id.Contains(filterDepartment.id))
              check = false;
          if (!Shared.SearchKeyword(filterUserSearch, item.name))
            check = false;

          if (check)
            userSuggests.Add(item);
        }
      }
    }
  }

  private async Task UserSelected(MemberModel item)
  {
    userSuggests = new();
    filterUserSearch = item.name;
    userList = new() { item };
    await GetData();
  }

  private async Task<bool> GetData()
  {
    _loaded = false;
    bool _success = true;
    try
    {
      var dateS = new DateTime(filterStart);
      var dateE = new DateTime(filterEnd);
      var shareStorage = await globalService.GetShareStorage(Layout.Company.id);
      var database = await DbTodolist.GetList(Layout.Company.id, dateS, dateE);

      reports = new();
      foreach (var user in userList)
      {
        var todolist = database.Where(x => x.user_create == user.id).ToList();
        var report = new ReportModel()
          {
            id = user.id,
            name = user.name,
            avatar = user.avatar,
            departments = user.departments_name
          };

        for (DateTime day = dateE; day >= dateS; day = day.AddDays(-1))
        {
          if (day < DateTime.Today)
          {
            var item = todolist.SingleOrDefault(x => x.date == day.Ticks);
            if (item != null)
            {
              if (!item.day_off)
              {
                if (!item.ontime_checkin)
                  report.checkin++;
                if (!item.ontime_checkout)
                  report.checkout++;
              }
            }
            else
            {
              var dayOff = DbDayOff.CheckOff(shareStorage.DayOffList, day);
              if (!dayOff)
                report.nodata++;
            }
          }
        }

        reports.Add(report);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    _loaded = true;
    return _success;
  }

  private async Task Export()
  {
    var dataExport = new List<List<string>>();
    dataExport.Add(new List<string>
    {
      "Thành viên",
      "Công ty",
      "Phòng ban",
      "Check-in trễ hạn",
      "Check-out trễ hạn	",
      "Không làm Todolist"
    });

    foreach (var item in reports)
    {
      var departments = item.departments.Split("/");
      dataExport.Add(new List<string>
      {
        item.name,
        departments.Count() > 1 ? departments[1].Trim() : "",
        departments.Count() > 2 ? departments[2].Trim() : "",
        item.checkin.ToString(),
        item.checkout.ToString(),
        item.nodata.ToString()
      });
    }

    var file = Files.ExportExcel(dataExport);
    await JSRuntime.InvokeAsync<string>("newTab", file);
    await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xuất dữ liệu ra file Excel.");
  }

  public class ReportModel
  {
    public string id { get; set; }
    public string name { get; set; }
    public string avatar { get; set; }
    public string departments { get; set; }
    public int checkin { get; set; }
    public int checkout { get; set; }
    public int nodata { get; set; }
  }
}