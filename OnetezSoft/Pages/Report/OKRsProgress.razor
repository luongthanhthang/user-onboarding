@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card is_fullheight flex_column" style="height:100%">
  <ul class="columns is-vcentered is-variable is-1 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        TIẾN ĐỘ OKRs
      </h1>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
  </ul>
  <div class="scrolly inner_section pr-2 expand_height">
    <table class="table is-fullwidth is-vcentered is-noborder is-responsive">
      <tbody>
        @foreach (var item in dataList)
        {
          var showOKRs = showOkrs.Contains(item.id);
          var progressColor = Shared.ProgressColor(item.value);
          var okrList = progressOkrs.Where(x => x.user_create == item.id).ToList();
          <tr>
            <td>
              <div class="user_item">
                <img class="image is-36x36 mr-2" src="@item.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-semibold has-text-info is-size-6">
                    @item.name
                  </p>
                  <p class="text_1_line has-text-grey is-size-7" style="width: 280px;">
                    @item.departments
                  </p>
                </div>
              </div>
            </td>
            <td colspan="2" width="350px">
              <label class="td-label">Tiến độ</label>
              <div class="td-value">
                <div class="progress_has_value">
                  <progress class="progress is-small @progressColor" value="@Convert.ToInt32(item.value)" max="100"></progress>
                  <span class="@progressColor.Replace("is-", "has-text-")">
                    @Shared.FormatPercent(item.value)%
                  </span>
                </div>
              </div>
            </td>
            <td class="td-hide" width="100px">
            </td>
            <td width="100px" align="center">
              <label class="td-label">Chi tiết</label>
              <div class="td-value">
                <a class="icon-text has-text-info" @onclick="() => ShowOKRs(item.id)">
                  <span class="has-text-weight-semibold">@okrList.Count</span>
                  <span class="ml-1">OKRs</span>
                  <span class="icon">
                    <i class="material-icons-outlined is-size-5">
                      @(showOKRs ? "arrow_drop_down" : "arrow_right")
                    </i>
                  </span>
                </a>
              </div>
            </td>
          </tr>
          if (showOKRs)
          {
            <tr class="tr-hide">
              <td>Mục tiêu</td>
              <td width="175px">Kết Quả Then Chốt</td>
              <td width="175px" align="center">Tiến độ</td>
              <td align="center">Thay đổi</td>
              <td align="center">Tự tin</td>
            </tr>
            @foreach (var okr in okrList)
            {
              var confident = DbOkr.Confident(okr.confident);
              var showKey = showKeys.Contains(okr.id);
              var progress = DbOkr.GetProgress(okr.key_results);
              var okrColor = Shared.ProgressColor(progress);

              <tr>
                <td>
                  <label class="td-label">Mục tiêu</label>
                  <div class="td-value">
                    <div class="is-flex">
                      <a class="has-text-weight-semibold has-text-link" href="/okr/checkin/@okr.id/overview">
                        @okr.name
                      </a>
                      @if (okr.done)
                      {
                        <span class="ml-1 icon" title="OKRs đã hoàn thành">
                          <i class="material-icons is-size-6 has-text-success">check_circle</i>
                        </span>
                      }
                    </div>
                  </div>
                </td>
                <td>
                  <label class="td-label">Kết quả</label>
                  <div class="td-value">
                    <a class="icon-text has-text-weight-semibold has-text-info" @onclick="() => ShowKeys(okr.id)">
                      <span>@okr.key_results.Count kết quả</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">
                          @(showKey ? "arrow_drop_down" : "arrow_right")
                        </i>
                      </span>
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Tiến độ</label>
                  <div class="td-value">
                    <div class="progress_has_value">
                      <progress class="progress is-small @okrColor" value="@Convert.ToInt32(progress)" max="100" />
                      <span>@Shared.FormatPercent(progress)%</span>
                    </div>
                  </div>
                </td>
                <td class="td-half" align="center">
                  <label class="td-label">Thay đổi</label>
                  <div class="td-value has-text-weight-semibold">
                    @Shared.FormatPercent(progress - okr.progress_prev)%
                  </div>
                </td>
                <td class="td-half" align="center">
                  <label class="td-label">Tự tin</label>
                  <div class="td-value has-text-weight-semibold">
                    <span class="@confident.color">@confident.name</span>
                  </div>
                </td>
              </tr>

              if (showKey)
              {
                foreach (var kr in okr.key_results)
                {
                  var confidentKr = DbOkr.Confident(kr.confident);
                  <tr class="font_13">
                    <td class="pl-4">
                      @kr.name
                    </td>
                    <td class="pl-2">
                      @if (!string.IsNullOrEmpty(kr.link))
                      {
                        <a class="icon-text has-text-link" href="@kr.link" target="_blank">
                          <span class="icon is-small">
                            <i class="material-icons-outlined">attach_file</i>
                          </span>
                          <span>Kết quả</span>
                        </a>
                      }
                    </td>
                    <td>
                      <label class="td-label">Đạt được</label>
                      <div class="td-value">
                        <span class="has-text-success" title="@string.Format("{0:0,0}/{1:0,0}", kr.result, kr.target)">
                          @Shared.ConvertNumber(kr.result)/@Shared.ConvertNumber(kr.target)
                        </span>
                        <span class="is-pulled-right">@kr.unit</span>
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Thay đổi</label>
                      <div class="td-value">
                        @Shared.FormatPercent(Shared.Progress(kr.change, kr.target))%
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Tự tin</label>
                      <div class="td-value has-text-weight-semibold">
                        <span class="@confidentKr.color">@confidentKr.name</span>
                      </div>
                    </td>
                  </tr>
                }
              }
            }
          }
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<ProgressModel> dataList = new();
  private List<OkrModel> progressOkrs = new();
  private List<string> userListId = new();
  private List<string> showOkrs = new();
  private List<string> showKeys = new();

  private string filterDepartment = null;

  private List<MemberModel> userList = new();

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    userList = shareStorage.MemberList;
    filterDepartment = Layout.User.department_default;
    await ChangeFilterDepartment(filterDepartment);
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    if (string.IsNullOrEmpty(filterDepartment))
      userListId = (from x in userList select x.id).ToList();
    else
      userListId = (from x in userList
                    where x.departments_id.Contains(filterDepartment)
                    select x.id).ToList();
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      userListId = new() { value };
    await GetData();
  }

  private void ShowOKRs(string id)
  {
    if (showOkrs.Contains(id))
      showOkrs.Remove(id);
    else
      showOkrs.Add(id);
  }

  private void ShowKeys(string id)
  {
    if (showKeys.Contains(id))
      showKeys.Remove(id);
    else
      showKeys.Add(id);
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      await Task.Delay(1);
      dataList.Clear();
      progressOkrs = await DbOkr.GetList(Layout.Company.id, Layout.CycleId, userListId);
      foreach (var userId in userListId)
      {
        var user = userList.SingleOrDefault(x => x.id == userId);
        if (user != null)
        {
          double totalProgress = 0;
          var okrList = progressOkrs.Where(x => x.user_create == user.id).ToList();
          foreach (var okr in okrList)
          {
            totalProgress += DbOkr.GetProgress(okr.key_results);
          }

          dataList.Add(new ProgressModel()
            {
              id = user.id,
              name = user.name,
              avatar = user.avatar,
              departments = user.departments_name,
              value = totalProgress > 0 ? totalProgress / okrList.Count : 0
            });
        }
      }
      dataList = dataList.OrderByDescending(x => x.value).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}