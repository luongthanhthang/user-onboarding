@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column">
  <ul class="columns is-multiline is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 is-size-6-mobile has-text-info">
        THỐNG KÊ KAIZEN
      </h1>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <_InputDate @bind-Start="filterStart"
      @bind-End="filterEnd"
                              IsRange
                              HasDropdown
                   ListOptions="new() {1,11,2,22,3,7}"
                   OnRangeSelect="ChangeFilterPicker" />
     </li>
  </ul>
   <div class="inner_section" style="flex:1">
     <ul class="columns is-multiline is-variable is-2">
       @for (int i = 0; i < chartList.Count; i++)
      {
        if (i < chartList.Count)
        {
          var item = chartList[i];
          <li class="column is-full pt-5">
            <h2 class="title is-6 has-text-info">@item.name</h2>
          </li>
          <li class="column is-half @(Layout.IsMobile ? "" : "pl-6")">
            <div style="height: 150px;">
              <canvas id="chartFeedback_@item.id" height="150"></canvas>
            </div>
            <div class="has-text-info pt-2 pl-5">@item.desc</div>
          </li>
          <li class="column is-half @(Layout.IsMobile ? "" : "pl-6")">
            <div style="height: 150px;">
              <canvas id="chartStatus_@item.id" height="150"></canvas>
            </div>
            <div class="has-text-info pt-2 pl-6">Đánh giá Kaizen</div>
          </li>
        }
      }
    </ul>
   </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();

  private List<ProgressModel> chartList = new();
  private string filterDepartment = string.Empty;
  private string filterUserId = string.Empty;
  private long filterStart;
  private long filterEnd;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    await ChangeFilterDepartment(Layout.User.department_default);
  }

  public async Task ChangeFilterPicker(DateRange range)
  {
    filterStart = range.Start.Ticks;
    filterEnd = range.End.Ticks;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var database = await DbKaizen.GetList(Layout.Company.id, null, null,
        new DateTime(filterStart), new DateTime(filterEnd));

      chartList.Clear();
      if (!string.IsNullOrEmpty(filterUserId))
      {
        var user = UserService.GetMember(shareStorage.MemberList, filterUserId);
        var item = new ProgressModel()
          {
            id = filterUserId,
            name = user.name
          };
        item.desc = await RenderChart(filterUserId, new List<string>() { filterUserId }, database);
        chartList.Add(item);
      }
      else if (!string.IsNullOrEmpty(filterDepartment))
      {
        var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
        if (department != null)
        {
          var item = new ProgressModel()
            {
              id = department.id,
              name = department.name
            };
          item.desc = await RenderChart(department.id, department.members_id, database);
          chartList.Add(item);

          var childs = departmentAll.Where(x => x.parent == department.id);
          foreach (var child in childs)
          {
            var itemChild = new ProgressModel()
              {
                id = child.id,
                name = child.name
              };
            itemChild.desc = await RenderChart(child.id, child.members_id, database);
            chartList.Add(itemChild);
          }
        }
      }
      else
      {
        var childs = departmentAll.Where(x => x.parent == null);
        foreach (var child in childs)
        {
          var item = new ProgressModel()
            {
              id = child.id,
              name = child.name
            };
          item.desc = await RenderChart(child.id, child.members_id, database);
          chartList.Add(item);
        }
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<string> RenderChart(string id, List<string> members_id, List<KaizenModel> data)
  {
    var kaizen = data.Where(x => members_id.Contains(x.user_create));

    var status = DbKaizen.Status();
    var statusColors = "#4b9d2f,#435cab,#f6d248,#e47c83";
    var statusLabels = ("Sẽ áp dung,Đã ghi nhận,Sẽ xem xét, Chưa phù hợp").Split(",");
    var statusValues = new int[status.Count];

    for (int i = 0; i < status.Count; i++)
    {
      var item = status[i];
      statusValues[i] = kaizen.Where(x => x.status == item.id).Count();
    }

    await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartStatus_" + id, statusLabels, statusValues, statusColors);

    var feedbackColors = "#435cab,#e47c83";
    var feedbackLabels = ("Đã đánh giá, Chưa đánh giá").Split(",");
    var feedbackValues = new int[2];
    feedbackValues[0] = kaizen.Where(x => x.status >= 0).Count();
    feedbackValues[1] = kaizen.Count() - feedbackValues[0];
    await JSRuntime.InvokeAsync<string>("chartDoughnut", "chartFeedback_" + id, feedbackLabels, feedbackValues, feedbackColors);

    return $"{feedbackValues[0]}/{kaizen.Count()} Kaizen đã đánh giá";
  }
}