@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="card flex_column is_fullheight">
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        LỊCH SỬ @(type == 2 ? "GHI NHẬN" : "TẶNG SAO")
      </h1>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-narrow">
      <Dropdown>
        <Trigger>
          <a class="icon-text has-text-link">
            @if (isCreate == null)
            {
              <span class="text_1_line" style="width: 80px;">Tất cả</span>
            }
            else if (isCreate == true)
            {
              <span class="text_1_line" style="width: 80px;">Người @(type == 2 ? "ghi nhận" : "tặng sao")</span>
            }
            else
            {
              <span class="text_1_line" style="width: 80px;">Người được @(type == 2 ? "ghi nhận" : "tặng sao")</span>
            }
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeCreate(null)">
            Tất cả
          </a>
          <a class="dropdown-item" @onclick="() => ChangeCreate(true)">
            Người @(type == 2 ? "ghi nhận" : "tặng sao")
          </a>
          <a class="dropdown-item" @onclick="() => ChangeCreate(false)">
            Người được @(type == 2 ? "ghi nhận" : "tặng sao")
          </a>
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
      <_InputDate 
        @bind-Start="filterStart"
        @bind-End="filterEnd"
        IsRange
        HasDropdown
        ListOptions="new() {1,11,2,22,3,7}"
        OnRangeSelect="ChangePicker" 
       />
     </li>
   </ul>

   <div class="scrolly inner_section pr-2" style="flex:1;">
     <table class="table is-fullwidth is-noborder is-responsive">
       <tbody>
         @foreach (var item in cfrList)
        {
          var create = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_create);
          var receive = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_receive);

          <tr>
            <td class="py-4" width="25%">
              @if (create != null)
              {
                <div class="user_item mb-2">
                  <img class="image is-36x36 mr-2" src="@create.avatar" alt="IMG">
                  <span>@create.name</span>
                </div>
              }
              @if (receive != null)
              {
                <div class="user_item pl-6" style="background: url(/images/arrow_sub.png) 20px 0px no-repeat;">
                  <img class="image is-36x36 mr-2" src="@receive.avatar" alt="IMG">
                  <span>@receive.name</span>
                </div>
              }
            </td>
            <td class="py-4" width="75%">
              @if (!string.IsNullOrEmpty(item.evaluate_name))
              {
                <h3 class="title is-6 has-text-info mb-2">
                  @item.evaluate_name
                </h3>
              }
              @if (!item.privacy || item.user_create == Layout.User.id || item.user_receive == Layout.User.id)
              {
                <div class="text_3_line mb-2" onclick="toggleText(this)">
                  @((MarkupString)Shared.GetLinks(item.content))
                </div>
              }
              else
              {
                <div class="mb-2 is-italic">
                  Nội dung lời nhắn không được công khai!
                </div>
              }
              <div class="field is-grouped">
                <div class="control">
                  <span class="icon-text">
                    <span class="icon is-small" title="@(item.privacy ? "Riêng tư" : "Công khai")">
                      <i class="material-icons-round">@(item.privacy ? "lock" : "public")</i>
                    </span>
                    <span class="has-text-weight-semibold">@item.star</span>
                    <span class="icon">
                      <i class="material-icons-outlined has-text-warning">star</i>
                    </span>
                  </span>
                </div>
                <div class="control">•</div>
                <div class="control">
                  @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date_create))
                </div>
              </div>
            </td>
          </tr>
        }
        @if (cfrList.Count == 0)
        {
          <tr class="">
            <td colspan="5">
              <div class="has-text-grey py-6 has-text-centered">
                Không có dữ liệu !
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<DepartmentModel> departmentAll { get; set; } = new();
  [Parameter]
  public List<DepartmentModel.SelectList> departments { get; set; } = new();
  [Parameter]
  public int type { get; set; }

  private List<OkrCfrModel> cfrList = new();
  private string filterUserId = string.Empty;
  private long filterStart { get; set; }
  private long filterEnd { get; set; }
  private string filterDepartment = null;
  private bool? isCreate = null;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterStart = start.Ticks;
    filterEnd = end.Ticks;

    filterDepartment = Layout.User.department_default;

    await ChangeFilterDepartment(filterDepartment);
  }

  public async Task ChangePicker(DateRange range)
  {
    filterStart = range.Start.Ticks;
    filterEnd = range.End.Ticks;
    await GetData();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    filterUserId = string.Empty;
    await GetData();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (!string.IsNullOrEmpty(value))
      filterUserId = value;
    await GetData();
  }

  private async Task ChangeCreate(bool? item)
  {
    isCreate = item;
    await GetData();
  }

  private async Task<bool> GetData()
  {
    bool _success = true;
    try
    {
      var data = await DbOkrCfr.GetList(Layout.Company.id, type, new DateTime(filterStart), new DateTime(filterEnd));
      if (!string.IsNullOrEmpty(filterUserId))
      {
        if (isCreate == null)
        {
          cfrList = (from x in data
                     where x.user_create == filterUserId || x.user_receive == filterUserId
                     orderby x.date_create descending
                     select x).ToList();
        }
        else if (isCreate == true)
        {
          cfrList = (from x in data
                     where x.user_create == filterUserId
                     orderby x.date_create descending
                     select x).ToList();
        }
        else
        {
          cfrList = (from x in data
                     where x.user_receive == filterUserId
                     orderby x.date_create descending
                     select x).ToList();
        }
      }
      else if (!string.IsNullOrEmpty(filterDepartment))
      {
        var department = departmentAll.SingleOrDefault(x => x.id == filterDepartment);
        if (department != null)
        {
          if (isCreate == null)
          {
            cfrList = (from x in data
                       where department.members_id.Contains(x.user_create)
                        || department.members_id.Contains(x.user_receive)
                       orderby x.date_create descending
                       select x).ToList();
          }
          else if (isCreate == true)
          {
            cfrList = (from x in data
                       where department.members_id.Contains(x.user_create)
                       orderby x.date_create descending
                       select x).ToList();
          }
          else
          {
            cfrList = (from x in data
                       where department.members_id.Contains(x.user_receive)
                       orderby x.date_create descending
                       select x).ToList();
          }
        }
      }
      else
      {
        cfrList = data;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}