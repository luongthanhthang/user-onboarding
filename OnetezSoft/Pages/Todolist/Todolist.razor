@page "/todolist"
@page "/todolist/{currentTab}"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>Todolist của tôi</PageTitle>

<CascadingValue Value="this">
  <section class="main_content">
    <div class="flex_column is_fullheight" style="width:100%;height:100%">
      @switch (currentTab)
      {
        case "":
          <_TodoToday Day="@Day" OnCheckout="GetAchievement" currentView="currentView" OnChangedView="ChangeView" />
          break;
        case "receive":
          <_AssignedTodo OnReCountJob="CountJob" />
          break;
        case "send":
          <_AssignedList />
          break;
        case "list":
          <_TodoList />
          break;
      }
    </div>
  </section>
</CascadingValue>


@if (!CheckAccess())
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-content" style="max-width: 360px;">
      <div class="box has-text-centered pt-5">
        <span class="icon is-large has-text-danger">
          <i class="material-icons-outlined is-size-1">error_outline</i>
        </span>
        <div class="is-size-6 py-4 has-text-weight-semibold">
          @msgAccess
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  [SupplyParameterFromQuery(Name = "day")]
  public string Day { get; set; }
  [Parameter]
  public string currentTab { get; set; }

  private string msgAccess = string.Empty;
  public int achievement = 0;

  private int currentView = 1;
  private int countJob = 0;
  private DateTimeOffset? filterDateS = DateTime.Today;
  private DateTimeOffset? filterDateE = DateTime.Today;

  protected override async Task OnInitializedAsync()
  {
    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterDateS = start;
    filterDateE = end;
    countJob = await DbTodoItem.GetMyAssignedListCount(Layout.Company.id, Layout.User.id, filterDateS.Value.Ticks, filterDateE.Value.Ticks);
    await GetAchievement();
  }

  protected override void OnParametersSet()
  {
    if (string.IsNullOrEmpty(currentTab))
      currentTab = "";
  }

  private async Task<bool> GetAchievement()
  {
    bool _success = true;
    try
    {
      // Tính thành tựu Todolist
      Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
      achievement = await DbTodolist.DataAchievement(Layout.Company.id, Layout.User.id, start, end);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetAchievement()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private bool CheckAccess()
  {
    return ProductService.CheckAccess(Layout.Company, Layout.User, "todolist", out msgAccess);
  }

  private void ChangeView(int _view)
  {
    currentView = _view;
  }


  // Đếm lại việc đã giao
  private async Task CountJob()
  {
    countJob = await DbTodoItem.GetMyAssignedListCount(Layout.Company.id, Layout.User.id, filterDateS.Value.Ticks, filterDateE.Value.Ticks);
  }
}