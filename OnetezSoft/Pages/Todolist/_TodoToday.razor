@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@implements IDisposable

@if (Layout.IsMobile)
{
  <div class="flex_column is_fullheight" style="min-height:100%">
    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-3">
      <li class="column is-narrow">
        <a class="button is-link is-outlined" @onclick="ShowCheckList">
          <span class="icon mr-2">
            <i class="material-icons-round is-size-5">alarm</i>
          </span>
          <span>Việc chờ xử lý</span>
          @if (checkList.Count > 0)
          {
            <span class="is_count">@checkList.Count</span>
          }
        </a>
      </li>

      <li class="column is-narrow">
        <_InputDate Start="todoDate.Ticks"
                    StartChanged="e => DateTodoChange(e)"
                                HasNavigate
                                ShowDateWeek />
       </li>
     </ul>
     <_TodoViewList todoItems="todoItems"
                    editList="editList"
                    todolist="todolist"
                    AddItem="e => AddItem(e)"
                    DeleteItem="DeleteItem"
                    UpdateItem="UpdateItem"
                    RejectItem="RejectItem"
                    EditItem="EditItem"
                    OnCheckin="Checkin"
                    OnCheckout="Checkout" />
   </div>
}
else
{
  <div style="position: relative;" class="columns is-variable is-multiline is-2 is-vcentered mb-2">
    <div class="column">
      <h1 class="title is-5 has-text-info">
        TODOLIST
        <span class="is-12-mobile has-text-weight-normal is-italic font_14 is-secondary-40">Bạn đang có <span style="margin-right: 2px;" class="has-text-success">@Parent.achievement</span>ngày liên tiếp không trễ Todolist!</span>
      </h1>
    </div>
    <div style="" class="column is-narrow">
      <Dropdown CloseOnClickMenu>
       <Trigger>
         <a class="icon-text">
           <span class="icon">
             <span class="material-icons-outlined">
               @(currentView == 1 ? "line_weight" : currentView == 2 ? "dashboard" : "calendar_today")
              </span>
            </span>
            <span>
              @(currentView == 1 ? "Danh sách" : currentView == 2 ? "Bảng" : "Lịch")
            </span>
            <span class="icon">
              <span class="material-icons-outlined">
                arrow_drop_down
              </span>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeView(1)">
            <span class="icon-text">
              <span class="icon is-small font_14">
                <i class="material-icons-outlined ">line_weight</i>
              </span>
              <span class="font_14 has-text-weight-medium">Danh sách</span>
            </span>
          </a>
          <a class="dropdown-item" @onclick="() => ChangeView(2)">
            <span class="icon-text @(currentView == 2 ? "is-primary-40 " : "is-secondary-40" )">
              <span class="icon is-small font_14">
                <i class="material-icons-outlined">dashboard</i>
              </span>
              <span class="font_14 has-text-weight-medium">Bảng</span>
            </span>
          </a>
          <a class="dropdown-item" @onclick="() => ChangeView(3)">
            <span class="icon-text @(currentView == 3 ? "is-primary-40 " : "is-secondary-40" )">
              <span class="icon is-small font_14">
                <i class="material-icons-outlined">calendar_today</i>
              </span>
              <span class="font_14 has-text-weight-medium">Lịch</span>
            </span>
          </a>
        </MenuContent>
      </Dropdown>
    </div>
    <div class="column is-narrow">
      <div style="gap: 10px" class="control is-flex is-justify-content-flex-end">
        <div style="margin-right: @(currentView == 3 ? "180px" : "0")">
          <a class="button is-link is-outlined" @onclick="ShowCheckList">
            <span class="icon mr-2">
              <i class="material-icons-round is-size-5">alarm</i>
            </span>
            <span>Việc chờ xử lý</span>
            @if (checkList.Count > 0)
            {
              <span class="is_count">@checkList.Count</span>
            }
          </a>
        </div>
        <div>
          @if (currentView != 3)
          {
            <_InputDate Start="todoDate.Ticks"
                        StartChanged="e => DateTodoChange(e)"
                                      HasNavigate
                                      ShowDateWeek />
          }
        </div>
      </div>
    </div>
  </div>

  <div class="flex_column todolist inner_section"
       style="flex:1;@(!Layout.IsMobile ? "overflow:hidden;" : "") @(currentView == 3 ? "position:unset" : "")">
    @switch (currentView)
    {
      case 1:
        {
          <_TodoViewList todoItems="todoItems"
                         editList="editList"
                         todolist="todolist"
                         AddItem="e => AddItem(e)"
                         DeleteItem="DeleteItem"
                         UpdateItem="UpdateItem"
                         RejectItem="RejectItem"
                         EditItem="EditItem"
                         OnCheckin="Checkin"
                         OnCheckout="Checkout" />
          break;
        }
      case 2:
        {
          var sortStatus = TodolistService.SortStatusPossition(statusList);
          <_TodoViewBoard statusList="sortStatus"
                          todoItems="todoItems"
                          todolist="todolist"
                          DeleteItem="DeleteItem"
                          UpdateItem="UpdateItem"
                          RejectItem="RejectItem"
                          OnCheckin="Checkin"
                          OnCheckout="Checkout"
                          User="Layout.User"
                          todoDate="todoDate" />
          break;
        }
      case 3:
        {
          <_TodoCalendar User="Layout.User" />
          break;
        }
    }
  </div>
}


@if (checkListShow)
{
  <_CheckList data="checkList" OnClose="OnCloseCheckList" />
}

@if (pendingShow)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card">
      <section class="modal-card-head">
        <div class="modal-card-title">CÔNG VIỆC CHỜ XỬ LÝ</div>
        <a class="delete" @onclick="() => pendingShow = false"></a>
      </section>
      <section class="modal-card-body">
        @foreach (var item in todoItems.Where(x => x.status == 2))
        {
          DateTimeOffset? dateMove = new DateTime(item.date);
          <ul class="columns is-variable is-2 mb-3">
            <li class="column is-two-thirds">
              <div class="has-text-weight-semibold">
                @item.name
              </div>
              @if (!string.IsNullOrEmpty(item.detail))
              {
                <div class="has-text-grey mt-1 text_2_line" onclick="toggleText(this)">
                  <span class="has-text-weight-semibold">Chi tiết:</span>
                  <span>@((MarkupString)Shared.GetLinks(item.detail))</span>
                </div>
              }
              @if (!string.IsNullOrEmpty(item.result))
              {
                <div class="has-text-grey mt-1 text_2_line" onclick="toggleText(this)">
                  <span class="has-text-weight-semibold">Kết quả:</span>
                  <span>@((MarkupString)Shared.GetLinks(item.result))</span>
                </div>
              }
            </li>
            <li class="column is-one-third">
              <div class="has-text-grey mb-1">Thời gian thực hiện</div>
              <div class="field has-addons">
                <div class="control has-icons-left">
                  <DateRangePicker SingleDatePicker="true" @bind-StartDate="dateMove"
                                   OnSelectionStart="(DateTimeOffset date) => ChangeTaskDate(item, date)">
                    <PickerTemplate>
                      <div id="@context.Id" @onclick="context.Toggle" title="Chọn ngày">
                        <span class="icon is-left has-text-link">
                          <i class="material-icons-round is-size-5">event</i>
                        </span>
                        <div class="input is-link">
                          @if (context.TStartDate != null)
                          {
                            <span>@context.TStartDate.Value.ToString("dd/MM/yyyy")</span>
                          }
                        </div>
                      </div>
                    </PickerTemplate>
                  </DateRangePicker>
                </div>
                <div class="control">
                  <a class="button is-link is-outlined" @onclick="() => ChangeTaskDate(item, false)">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">chevron_left</i>
                    </span>
                  </a>
                </div>
                <div class="control">
                  <a class="button is-link is-outlined" @onclick="() => ChangeTaskDate(item, true)">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">chevron_right</i>
                    </span>
                  </a>
                </div>
              </div>
            </li>
          </ul>
        }
        <hr class="mt-0">
        <div class="field is-grouped is-grouped-right">
          <div class="control">
            <a class="button" @onclick="() => pendingShow = false">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">cancel</i>
              </span>
              <span>Hủy</span>
            </a>
          </div>
          <div class="control">
            <a class="button is-danger" @onclick="Checkout">
              <span class="icon">
                <i class="material-icons-outlined is-size-5">done</i>
              </span>
              <span>Check-out</span>
            </a>
          </div>
        </div>
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [CascadingParameter]
  public Todolist Parent { get; set; }
  [Parameter]
  public string Day { get; set; }
  [Parameter]
  public EventCallback OnCheckout { get; set; }
  [Parameter]
  public int currentView { get; set; }
  [Parameter]
  public EventCallback<int> OnChangedView { get; set; }
  private TodolistModel todolist = new();
  private List<TodolistModel.Todo> todoItems = new();
  private List<CheckListModel> checkList = new();
  private List<StaticModel> statusList = new();

  private List<string> editList = new();
  private DateTimeOffset todoDate;
  private bool pendingShow = false;
  private bool checkListShow = false;

  private SharedStorage shareStorage = new();

  private DotNetObjectReference<_TodoToday> obj;

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    obj = DotNetObjectReference.Create(this);

    checkList = await DbChecklist.GetList(Layout.Company.id, Layout.User.id);
    todoDate = string.IsNullOrEmpty(Day) ? DateTime.Today : Convert.ToDateTime(Day);
    await GetData();

    statusList = DbTodolist.Status();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("window.SetDotNetReference", obj, "AddItem");
    }
  }

  private async Task DateTodoChange(long date)
  {
    todoDate = new DateTime(date);
    navigation.NavigateTo("/todolist?day=" + todoDate.DateTime.ToString("yyyy-MM-dd"), false);
    await GetData();
  }

  private async Task<bool> GetData()
  {
    var _success = true;
    try
    {
      editList.Clear();
      todolist = await DbTodolist.GetbyDay(Layout.Company.id, Layout.User.id, todoDate.DateTime);
      if (todolist == null)
      {
        todolist = new TodolistModel();
        todolist.date = todoDate.DateTime.Ticks;
        todolist.user_create = Layout.User.id;
        todolist = await DbTodolist.Create(Layout.Company.id, todolist);
      }
      // Danh sách công việc
      todoItems = await DbTodoItem.GetList(Layout.Company.id, todolist.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  public async Task AddItem(int status = 1)
  {
    string start = "08:30";
    string end = "09:30";
    if (todoDate.DateTime.ToString("yyyy-MM-dd") == DateTime.Now.ToString("yyyy-MM-dd"))
    {
      start = string.Format("{0:HH:30}", DateTime.Now);
      end = string.Format("{0:HH:30}", DateTime.Now.AddHours(1));
    }

    var item = new TodolistModel.Todo()
      {
        id = Mongo.RandomId(),
        type = 1,
        level = 1,
        status = status,
        date = todoDate.DateTime.Ticks,
        start = start,
        end = end
      };
    todoItems.Add(item);
    editList.Add(item.id);
    await JSRuntime.InvokeVoidAsync("setFocus", "todo_" + item.id);
  }

  [JSInvokable]
  public async Task AddItem()
  {
    if (todolist.user_create != Layout.User.id)
      return;
    if (todolist.status == 3)
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể thêm công việc vào ngày đã check-out");
      return;
    }

    string start = "08:30";
    string end = "09:30";
    if (todoDate.DateTime.ToString("yyyy-MM-dd") == DateTime.Now.ToString("yyyy-MM-dd"))
    {
      start = string.Format("{0:HH:30}", DateTime.Now);
      end = string.Format("{0:HH:30}", DateTime.Now.AddHours(1));
    }

    var item = new TodolistModel.Todo()
      {
        id = Mongo.RandomId(),
        type = 1,
        level = 1,
        date = todoDate.DateTime.Ticks,
        status = 1,
        start = start,
        end = end,
      };
    todoItems.Add(item);
    editList.Add(item.id);
    await JSRuntime.InvokeVoidAsync("setFocus", "todo_" + item.id);
    StateHasChanged();
  }

  private async Task EditItem(string id)
  {
    editList.Add(id);
    await JSRuntime.InvokeVoidAsync("setFocus", "todo_" + id);
  }

  private async Task<bool> DeleteItem(TodolistModel.Todo item)
  {
    bool _success = true;
    try
    {
      if (todolist.status < 2 || !item.confirm)
      {
        if (!Shared.IsEmpty(item.name))
        {
          if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa: {item.name}?"))
            return false;
        }
        await DbTodoItem.Delete(Layout.Company.id, item.id);
        todoItems.Remove(item);

        if (todoItems.Count == 0)
        {
          todolist.status = 1;
          todolist.date_checkin = 0;
        }
        await DbTodolist.Update(Layout.Company.id, todolist);
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể xóa công việc đã xác nhận !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> RejectItem(TodolistModel.Todo item)
  {
    bool _success = true;
    try
    {
      if (todolist.status < 2 || !item.confirm)
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn hủy nhận: {item.name}?"))
          return false;

        item.todolist = null;
        item.assign_status = 1;
        await DbTodoItem.Update(Layout.Company.id, item);
        todoItems.Remove(item);
        if (todoItems.Count == 0)
        {
          todolist.status = 1;
          todolist.date_checkin = 0;
        }
        await DbTodolist.Update(Layout.Company.id, todolist);
        await JSRuntime.InvokeVoidAsync("clickBtn", "reload_assigned");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể hủy công việc đã xác nhận !");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "RejectItem()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateItem(TodolistModel.Todo item)
  {
    if (TimeSpan.Parse(item.start).Ticks >= TimeSpan.Parse(item.end).Ticks)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Thời gian kết thúc không thể nhỏ hơn thời gian bắt đầu công việc này!");
    else if (string.IsNullOrEmpty(item.name) || string.IsNullOrEmpty(item.name.Trim()))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập tên công việc!");
    else if (string.IsNullOrEmpty(item.start) || string.IsNullOrEmpty(item.end))
      await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập thời gian thực hiện!");
    else if (item.is_loop && item.dateEnd_cycle < item.date)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày kết thúc chu kỳ phải lớn hơn hoặc bằng ngày bắt đầu công việc này!");
    else if (item.is_loop && item.cycle == 2 && !item.weeks.Any())
      await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng chọn ít nhất 1 ngày trong tuần!");
    else
    {
      // Tạo mới công việc
      if (string.IsNullOrEmpty(item.todolist))
      {
        item.user = Layout.User.id;
        item.date = todolist.date;
        item.todolist = todolist.id;
        if (item.is_loop)
        {
          item.parentId = item.id;
          await TodolistService.HandleCreateTodoLoop(item, Layout.Company.id, Layout.User.id);
        }
        await DbTodoItem.Create(Layout.Company.id, item);
      }
      // Chỉnh sửa công việc
      else
        await DbTodoItem.Update(Layout.Company.id, item);

      await DbTodolist.Update(Layout.Company.id, todolist);
      todoItems = todoItems.OrderBy(x => x.start).ToList();
      editList.Remove(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Cập nhật todolist thành công!");
    }
  }

  private async Task UpdateAllItem()
  {
    foreach (var item in todoItems)
    {
      if (editList.Contains(item.id))
        await UpdateItem(item);
    }
  }

  private async Task<bool> Checkin()
  {
    bool _success = true;
    try
    {
      if (todoItems.Count == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không có công việc để Check-in!");
      else if (!CheckConditionItem(todoItems))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Có công việc chưa có thời gian thực hiện!");
      else
      {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn đã tạo xong và muốn nộp TodoList lên quản lý?"))
          return false;

        todolist.day_off = DbDayOff.CheckOff(shareStorage.DayOffList, new DateTime(todolist.date));
        todolist.date_checkin = DateTime.Now.Ticks;
        todolist.status = 2;
        await DbTodolist.Update(Layout.Company.id, todolist);
        editList.Clear();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Checkin()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Checkout()
  {
    bool _success = true;
    try
    {
      if (todolist.date > Convert.ToDateTime(DateTime.Now.ToShortDateString()).Ticks)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa đến thời điểm Check-out!");
      else if (todoItems.Count == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không có công việc để Check-out!");
      else if (todoItems.Where(x => x.status == 1 || x.status == 3).Count() > 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể check-out khi có công việc đang ở trạng thái Todo, Doing!");
      else if (!CheckConditionItem(todoItems))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Có công việc chưa có thời gian thực hiện!");
      else if (!pendingShow && todoItems.Where(x => x.status == 2).Count() > 0)
        pendingShow = true;
      else
      {
        if (todoItems.Where(x => x.status == 2 && x.date == todolist.date).Count() > 0)
        {
          await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày thực hiện của công việc Pending phải sau ngày hôm nay!");
          return false;
        }

        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Sau khi Check-out bạn không thể chỉnh sửa Todolist.\nBạn có chắc muốn check-out?"))
          return false;

        if (pendingShow)
        {
          foreach (var todo in todoItems)
          {
            if (todo.status == 2)
            {
              // Thêm công việc vào ngày khác
              var todoClone = Shared.Clone<TodolistModel.Todo>(todo);
              await TodolistService.AddTodoItem(Layout.Company.id, Layout.User.id, todoClone);

              // Cập nhật thuộc tính công việc hiện tại
              todo.date = todolist.date;
              await UpdateItem(todo);
            }
            else
              await UpdateItem(todo);
          }
          todoItems.RemoveAll(x => x.date != todolist.date);
        }
        else
          await UpdateAllItem();

        todolist.day_off = DbDayOff.CheckOff(shareStorage.DayOffList, new DateTime(todolist.date));
        todolist.date_checkout = DateTime.Now.Ticks;
        todolist.status = 3;
        await DbTodolist.Update(Layout.Company.id, todolist);
        pendingShow = false;
        editList.Clear();

        // Tính thành tựu
        var achievement = await DbTodolist.Achievement(Layout.Company.id, todolist.user_create, globalService);
        if (achievement)
          await JSRuntime.InvokeVoidAsync("location.reload");
        await OnCheckout.InvokeAsync();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Checkout()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private bool CheckConditionItem(List<TodolistModel.Todo> todos)
  {
    foreach (var item in todos)
    {
      if (string.IsNullOrEmpty(item.start) || string.IsNullOrEmpty(item.end))
        return false;
    }
    return true;
  }

  private async Task ChangeTaskDate(TodolistModel.Todo item, DateTimeOffset date)
  {
    if (date.DateTime.Ticks <= DateTime.Today.Ticks)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày thực hiện của công việc chờ xử lý phải sau ngày hôm nay!");
    else
      item.date = date.DateTime.Ticks;
  }

  private async Task ChangeTaskDate(TodolistModel.Todo item, bool isNext)
  {
    var date = new DateTime(item.date);
    date = isNext ? date.AddDays(1) : date.AddDays(-1);
    if (date.Ticks < DateTime.Today.Ticks)
      await JSRuntime.InvokeVoidAsync("tagline", false, "Ngày thực hiện của công việc chờ xử lý phải sau ngày hôm nay!");
    else
      item.date = date.Ticks;
  }

  private async Task<bool> ShowCheckList()
  {
    bool _success = true;
    try
    {
      checkListShow = true;
      checkList = await DbChecklist.GetList(Layout.Company.id, Layout.User.id);
      await JSRuntime.InvokeVoidAsync("setFocus", "checklist_name");
      await JSRuntime.InvokeVoidAsync("textAutoSize", "checklist_detail");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ShowCheckList()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> OnCloseCheckList(bool isUpdate)
  {
    bool _success = true;
    try
    {
      checkListShow = false;
      if (isUpdate)
      {
        await GetData();
        checkList = await DbChecklist.GetList(Layout.Company.id, Layout.User.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnCloseCheckList()", ex.Message, Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task ChangeView(int _view)
  {
    await GetData();
    await OnChangedView.InvokeAsync(_view);
    StateHasChanged();
  }

  public void Dispose()
  {
    try
    {
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }
}