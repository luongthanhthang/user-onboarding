@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div style="flex:1;@(Layout.IsMobile ? "" : "overflow:hidden");min-height:800px" class="todolist flex_column">
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        DANH SÁCH TODOLIST
      </h1>
    </li>
    <li class="column is-narrow">
      <Dropdown DropdownClass="is-right" CloseOnClickMenu=true>
        <Trigger>
          <a class="icon-text">
            @if (dateType == 1)
            {
              <span class="has-text-link">Tuần này</span>
            }
            else if (dateType == 11)
            {
              <span class="has-text-link">Tuần trước</span>
            }
            else if (dateType == 2)
            {
              <span class="has-text-link">Tháng này</span>
            }
            else if (dateType == 22)
            {
              <span class="has-text-link">Tháng trước</span>
            }
            else if (dateType == 3)
            {
              <span class="has-text-link">Quý này</span>
            }
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeDate(1)">
            Tuần này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(11)">
            Tuần trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(2)">
            Tháng này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(22)">
            Tháng trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(3)">
            Quý này
          </a>
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown main="Todolist của tôi" department="@filterDepartment" OnUpdate="ChangeDepartment" />
    </li>
    <li class="column is-one-quarter">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
  </ul>

  <div class="scrolly inner_section" style="flex:1">
    <table class="table is-noborder is-fullwidth is-vcentered is-responsive">
      <thead>
        <tr>
          <th>Thành viên</th>
          <th width="190px">Ngày check-in</th>
          <th width="190px">Ngày check-out</th>
          <th width="120px">Hoàn thành</th>
          <th width="120px">Trạng thái</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var user in userList)
        {
          var todolist = database.Where(x => x.user_create == user.id).ToList();
          <tr>
            <td colspan="5">
              <div class="user_item">
                <img class="image is-36x36 mr-2" src="@user.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-semibold has-text-info is-size-6">
                    @user.name
                  </p>
                  <p class="text_1_line has-text-grey is-size-7" style="width: 400px;">
                    @user.departments_name
                  </p>
                </div>
              </div>
            </td>
          </tr>
          for (DateTime date = filterEnd; date >= filterStart; date = date.AddDays(-1))
          {
            // Ngày nghỉ
            var dayOff = DbDayOff.CheckOff(shareStorage.DayOffList, date);
            var item = todolist.SingleOrDefault(x => x.date == date.Ticks);
            if (item != null)
            {
              var progress = Shared.Progress(item.done, item.total);
              <tr>
                <td>
                  <label class="td-label">Ngày</label>
                  <div class="td-value">
                    <a class="icon-text has-text-link" @onclick="() => ShowTodoItems(item.id)">
                      <span class="has-text-weight-bold">@Shared.ConvertDateWeek(item.date)</span>
                      <span class="icon" title="Xem nhanh các công việc">
                        <i class="material-icons-outlined is-size-5">
                          @(showTodoItems.Contains(item.id) ? "arrow_drop_down" : "arrow_right")
                        </i>
                      </span>
                      @if (item.day_off)
                      {
                        <i class="has-text-grey">(Ngày nghỉ)</i>
                      }
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Ngày check-in</label>
                  <div class="td-value">
                    <span class="mr-3">@string.Format("{0:dd/MM - HH:mm}", new DateTime(item.date_checkin))</span>
                    @if (item.ontime_checkin)
                    {
                      <span class="has-text-success">Đúng hạn</span>
                    }
                    else
                    {
                      <span class="has-text-danger">Trễ hạn</span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Ngày check-out</label>
                  <div class="td-value">
                    @if (item.date_checkout > 0)
                    {
                      <span class="mr-3">@string.Format("{0:dd/MM - HH:mm}", new DateTime(item.date_checkout))</span>
                      @if (item.ontime_checkout)
                      {
                        <span class="has-text-success">Đúng hạn</span>
                      }
                      else
                      {
                        <span class="has-text-danger">Trễ hạn</span>
                      }
                    }
                    else
                    {
                      <span>Chưa Check-out</span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Hoàn thành</label>
                  <div class="td-value has-text-weight-semibold">
                    @string.Format("{0}/{1}", item.done, item.total) - @Shared.ConvertNumber(progress)%
                  </div>
                </td>
                <td>
                  <label class="td-label">Trạng thái</label>
                  <div class="td-value has-text-weight-semibold">
                    @if (string.IsNullOrEmpty(item.user_confirm))
                    {
                      if (isManager.ContainsKey(user.id) && isManager[user.id])
                      {
                        <a class="has-text-link" @onclick="() => ConfirmItem(item)">
                          Xác nhận ngay
                        </a>
                      }
                      else
                      {
                        <span class="has-text-grey">Chờ xác nhận</span>
                      }
                    }
                    else if (item.user_confirm == "auto")
                    {
                      <span title="Hệ thống tự động xác nhận">Đã xác nhận</span>
                    }
                    else
                    {
                      var userConfirm = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_confirm);
                      <span title="@(userConfirm != null ? userConfirm.name : "Quản lý") đã xác nhận Todolist">
                        Đã xác nhận
                      </span>
                    }
                  </div>
                </td>
              </tr>
              if (showTodoItems.Contains(item.id))
              {
                var items = allTodolist.Where(x => x.todolist == item.id);
                foreach (var todo in items)
                {
                  var type = DbTodolist.Type(todo.type);
                  var level = DbTodolist.Level(todo.level);
                  var status = DbTodolist.Status(todo.status);
                  <tr>
                    <td>
                      <div class="icon-text ml-3">
                        @if (string.IsNullOrEmpty(todo.assign_user))
                        {
                          <span class="icon is-small has-text-grey">
                            <i class="material-icons is-size-7">fiber_manual_record</i>
                          </span>
                        }
                        else
                        {
                          var assignor = UserService.GetMember(shareStorage.MemberList, todo.assign_user);
                          <span class="icon is-small has-text-danger" title="Công việc được giao bởi @assignor.name">
                            <i class="material-icons-outlined is-size-6">assignment</i>
                          </span>
                        }
                        <span class="has-text-weight-medium has-text-link" onclick="toggleText(this)">
                          @todo.name
                        </span>
                      </div>
                    </td>

                    <td>
                      <label class="has-text-grey">Ưu tiên:</label>
                      <span class="@level.color">@level.name</span>
                    </td>
                    <td>
                      <label class="td-label">Thời gian</label>
                      <div class="td-value">
                        <span>@todo.start - @todo.end</span>
                      </div>
                    </td>
                    <td>
                      <label class="td-label">Trạng thái</label>
                      <div class="td-value @status.color">
                        @status.name
                      </div>
                    </td>
                  </tr>
                }
              }
            }
            else if (date < DateTime.Now && !dayOff)
            {
              <tr>
                <td>
                  <label class="td-label">Ngày</label>
                  <div class="td-value">
                    <span class="has-text-weight-bold has-text-grey">@Shared.ConvertDateWeek(date.Ticks)</span>
                  </div>
                </td>
                <td colspan="4" class="is-italic has-text-grey">
                  Không nộp Todolist
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
  </div>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private List<DepartmentModel> departmentAll = new();
  private List<MemberModel> userList = new();
  private List<TodolistModel> database = new();
  private List<TodolistModel.Todo> allTodolist = new();
  private List<string> showTodoItems = new();
  private string filterDepartment = null;
  private DateTime filterStart = DateTime.Now;
  private DateTime filterEnd = DateTime.Now;
  private int dateType = 1;

  private SharedStorage shareStorage = new();

  private Dictionary<string, bool> isManager = new();

  protected override async Task OnInitializedAsync()
  {
    allTodolist = await DbTodoItem.GetList(Layout.Company.id, null);
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    departmentAll = await DbDepartment.GetAll(Layout.Company.id);

    foreach (var user in userList)
    {
      if (!isManager.ContainsKey(user.id))
      {
        isManager.Add(user.id, await DbDepartment.CheckManagerRole(Layout.Company.id, user, Layout.User.id, departmentAll));
      }
    }

    await ChangeDepartment(null);
  }

  private async Task ChangeDate(int type)
  {
    dateType = type;
    await GetTodolist();
  }

  private async Task ChangeDepartment(string value)
  {
    filterDepartment = value;
    if (string.IsNullOrEmpty(filterDepartment))
      userList = new() { UserService.ConvertToMember(Layout.User) };
    else
      userList = shareStorage.MemberList.Where(x => x.departments_id.Contains(filterDepartment)).ToList();
    await GetTodolist();
  }

  private async Task ChangeFilterUser(string userId)
  {
    userId = string.IsNullOrEmpty(userId) ? Layout.User.id : userId;
    userList = shareStorage.MemberList.Where(x => x.id == userId).ToList();
    await GetTodolist();
  }

  private void ShowTodoItems(string id)
  {
    if (showTodoItems.Contains(id))
      showTodoItems.Remove(id);
    else
      showTodoItems.Add(id);
  }

  private async Task<bool> ConfirmItem(TodolistModel item)
  {
    bool _success = true;
    try
    {
      var todoItems = allTodolist.Where(x => x.todolist == item.id).ToList();
      foreach (var todo in todoItems)
      {
        todo.confirm = true;
        await DbTodoItem.Update(Layout.Company.id, todo);
      }
      item.date_confirm = DateTime.Now.Ticks;
      item.user_confirm = Layout.User.id;
      await DbTodolist.Update(Layout.Company.id, item);

      // Gửi thông báo chuông
      await DbNotify.Create(Layout.Company.id, 200, item.id, item.user_create, Layout.User.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ConfirmItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> GetTodolist()
  {
    bool _success = true;
    try
    {
      Shared.GetTimeSpan(dateType, out filterStart, out filterEnd);

      if (userList.Count == 1)
      {
        database = await DbTodolist.GetList(Layout.Company.id, userList[0].id, filterStart, filterEnd);
        showTodoItems = database.Select(x => x.id).ToList();
      }
      else if (userList.Count > 1)
      {
        database = await DbTodolist.GetList(Layout.Company.id, filterStart, filterEnd);
        showTodoItems.Clear();
      }

      await TodolistService.AutoConfirm(database, Layout.Company.todolist.time_confirm, Layout.Company.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetTodolist()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}