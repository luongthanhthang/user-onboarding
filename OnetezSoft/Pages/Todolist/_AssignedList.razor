@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@implements IDisposable

<section style="flex: 1;@(Layout.IsMobile ? "" : "overflow:hidden")" id="assigned_list" class="todolist flex_column">
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        VIỆC ĐÃ GIAO
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-small is-link is-rounded" @onclick="() => togglePopup = true" title="@($"Nhấn shift + \"N\" để giao việc mới")">
        <span class="icon">
          <i class="material-icons-outlined is-size-6">add</i>
        </span>
        <span>Giao việc</span>
      </a>
    </li>
    <li class="column is-narrow">
      <Dropdown CloseOnClickMenu=true>
        <Trigger>
          <a class="icon-text">
            <span class="has-text-link">@DbTodolist.AssignStatus(filterStatus).name</span>
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeFilterStatus(0)">Tất cả trạng thái</a>
          @foreach (var item in DbTodolist.AssignStatus())
          {
            <a class="dropdown-item" @onclick="() => ChangeFilterStatus(item.id)">@item.name</a>
          }
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <DepartmentDropdown department="@filterDepartment" OnUpdate="ChangeFilterDepartment" />
    </li>
    <li class="column is-one-fifth">
      <MemberSearch department="@filterDepartment" sources="shareStorage.MemberList" OnUpdate="ChangeFilterUser" />
    </li>
    <li class="column is-narrow">
       <_InputDate 
       @bind-Start="filterDateS"
       @bind-End="filterDateE"
       IsRange
       ShowDateWeek
       HasDropdown
       DefaultOption="1"
       ListOptions="new() {1,11,2,22,3,7}"
       OnRangeSelect="ChangeFilterDate" />
    </li>
  </ul>

  <div class="scrolly inner_section" style="flex:1">
     <table class="table is-vcentered is-noborder is-fullwidth is-responsive">
       <thead>
         <tr>
           <th class="is-fullwidth">
             Tiêu đề
           </th>
           <th width="140px">
             Người được giao
           </th>
           <th width="100px">
             Kết thúc
           </th>
           <th width="100px">
             Tình trạng
           </th>
           <th width="120px" align="center">
             Trạng thái
           </th>
         </tr>
       </thead>
       <tbody>
         @foreach (var item in dataList)
        {
          long day = item.Key;

          <tr>
            <td class="p-0" colspan="7"><hr class="m-0"></td>
          </tr>
          <tr>
            <td colspan="7">
              <a class="icon-text has-text-link" @onclick="() => ToggleDay(day)">
                <span class="has-text-weight-bold">@Shared.ConvertDateWeek(day)</span>
                <span class="icon" title="Xem nhanh các công việc">
                  <i class="material-icons-outlined is-size-5">
                    @(hiddenDays.Contains(day) ? "arrow_right" : "arrow_drop_down")
                  </i>
                </span>
              </a>
            </td>
          </tr>
          @if (!hiddenDays.Contains(day))
          {
            foreach (var todo in item.Value)
            {
              var level = DbTodolist.Level(todo.level);
              var status = DbTodolist.Status(todo.status);
              var assign = DbTodolist.AssignStatus(todo.assign_status);
              var member = UserService.GetMember(shareStorage.MemberList, todo.user);

              if (editList.Contains(todo.id))
              {
                <tr id="assign_@todo.id">
                  <td>
                    <input @bind="todo.name" class="input" type="text" placeholder="Nhập tên công việc" />
                  </td>
                  <td>
                    <label class="td-label">Người nhận:</label>
                    <div class="td-value">
                      <div class="user_item">
                        <span class="image is-rounded is-24x24">
                          <img src="@member.avatar" alt="AVT">
                        </span>
                        <span class="text_1_line">@member.name</span>
                      </div>
                    </div>
                  </td>
                  <td>
                    <label class="td-label">Kết thúc</label>
                    <div class="td-value">
                      <div class="select is-fullwidth is-small">
                        <select @bind="todo.end">
                          @foreach (var sl in Shared.TimeList())
                          {
                            <option value="@sl.name">@sl.name</option>
                          }
                        </select>
                      </div>
                    </div>
                  </td>
                  <td>
                    <label class="td-label">Ngày thực hiện</label>
                    <div class="td-value">
                      <_InputDate Minimal @bind-Start="todo.date" IsRight />
                    </div>
                  </td>
                  <td align="center">
                    <label class="td-label">Hành động</label>
                    <div class="td-value">
                      <a class="icon-text has-text-link mr-2" @onclick="() => UpdateItem(todo)">
                        <span class="icon is-small">
                          <i class="material-icons-outlined is-size-6">done</i>
                        </span>
                        <span>Lưu</span>
                      </a>
                      <a class="icon-text has-text-danger" @onclick="() => DeleteItem(todo)">
                        <span class="icon is-small">
                          <i class="material-icons-outlined is-size-6">delete</i>
                        </span>
                        <span>Xóa</span>
                      </a>
                    </div>
                  </td>
                </tr>
                <tr>
                  <td colspan="7">
                    <InputArea Value="@todo.detail" OnInput="x => todo.detail = x" title="Nhập mô tả công việc..." />
                  </td>
                </tr>
                @if (ProductService.CheckStorage(Layout.Company))
                {
                  <tr>
                    <td colspan="7">
                      <div class="field is-grouped mb-2">
                        <div class="control">File đính kèm: </div>
                        <div class="control">
                          <FileUpload Multiple="true" Small="true" Cloud="true" OnUpload="x => todo.files.AddRange(x)" />
                        </div>
                      </div>
                      <FileViews Delete="true" Values="todo.files" />
                    </td>
                  </tr>
                }
              }
              else
              {
                <tr id="todo-@todo.id">
                  <td>
                    <div class="icon-text ml-3">
                      <span class="icon is-small has-text-grey">
                        <i class="material-icons is-size-7">fiber_manual_record</i>
                      </span>
                      <span class="has-text-weight-medium has-text-link" title="@todo.name">
                        @todo.name
                      </span>
                    </div>
                  </td>
                  <td>
                    <label class="td-label">Người nhận:</label>
                    <div class="td-value">
                      <div class="user_item">
                        <span class="image is-rounded is-24x24">
                          <img src="@member.avatar" alt="AVT">
                        </span>
                        <span class="text_1_line">@member.name</span>
                      </div>
                    </div>
                  </td>
                  <td>
                    <label class="td-label">Kết thúc</label>
                    <div class="td-value">
                      <span>@todo.end</span>
                    </div>
                  </td>
                  <td>
                    <label class="td-label">Tình trạng</label>
                    <div class="td-value">
                      <span class="has-text-weight-semibold @status.color.Replace("is-", "has-text-")">
                        @status.name
                      </span>
                    </div>
                  </td>
                  <td align="center">
                    <label class="td-label">Trạng thái</label>
                    <div class="td-value">
                      @if (todo.assign_status == 1)
                      {
                        <div class="dropdown is-hoverable">
                          <div class="dropdown-trigger">
                            <div class="icon-text">
                              <span class="@assign.color">@assign.name</span>
                              <span class="icon is-small">
                                <i class="material-icons-outlined is-size-6">expand_more</i>
                              </span>
                            </div>
                          </div>
                          <div class="dropdown-menu">
                            <div class="dropdown-content py-0">
                              <a class="dropdown-item px-2 icon-text has-text-link"
                              @onclick="() => EditItem(todo)">
                                <span class="icon is-small">
                                  <i class="material-icons-outlined is-size-6">edit</i>
                                </span>
                                <span>Chỉnh sửa</span>
                              </a>
                              <a class="dropdown-item px-2 icon-text has-text-danger"
                              @onclick="() => DeleteItem(todo)">
                                <span class="icon is-small">
                                  <i class="material-icons-outlined is-size-6">delete</i>
                                </span>
                                <span>Xóa</span>
                              </a>
                            </div>
                          </div>
                        </div>
                      }
                      else
                      {
                        <span class="has-text-weight-semibold @assign.color">@assign.name</span>
                      }
                    </div>
                  </td>
                </tr>
                @if (!Shared.IsEmpty(todo.detail) || !Shared.IsEmpty(todo.result) || todo.files.Count > 0)
                {
                  <tr>
                    <td colspan="7" class="pb-4">
                      @if (!Shared.IsEmpty(todo.detail))
                      {
                        <div class="is-flex pl-5">
                          <label class="td-label is-show">Chi tiết:</label>
                          <div class="td-value is-word-break">
                            <div class="text_1_line" onclick="toggleText(this)">
                              @((MarkupString)Shared.GetLinks(todo.detail))
                            </div>
                          </div>
                        </div>
                      }
                      @if (!Shared.IsEmpty(todo.result))
                      {
                        <div class="is-flex pl-5">
                          <label class="td-label is-show">Kết quả:</label>
                          <div class="td-value is-word-break">
                            <div class="text_1_line" onclick="toggleText(this)">
                              @((MarkupString)Shared.GetLinks(todo.result))
                            </div>
                          </div>
                        </div>
                      }
                      @if (todo.files.Count > 0)
                      {
                        <div class="is-flex pl-5">
                          <label class="has-text-grey" style="width: 100px;">File đính kèm:</label>
                          <div>
                            <FileViews Values="todo.files" />
                          </div>
                        </div>
                      }
                    </td>
                  </tr>
                }
              }
            }
          }
        }
        @if (dataList.Count == 0)
        {
          <tr class="">
            <td class="py-1 has-text-grey has-text-centered" colspan="100%">
              Không có công việc được giao!
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</section>

@if (togglePopup)
{
  <_AssignedPopup OnUpdate="UpdateList" />
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EventCallback OnReCountWork { get; set; }

  private Dictionary<long, List<TodolistModel.Todo>> dataList = new();
  private List<string> editList = new();
  private List<long> hiddenDays = new();
  private int filterStatus = 0;
  private string filterDepartment = string.Empty;
  private List<string> filterUserList = new();
  private long filterDateS;
  private long filterDateE;
  private bool togglePopup = false;

  private DotNetObjectReference<_AssignedList> obj;

  private SharedStorage shareStorage = new();

  protected override async Task OnInitializedAsync()
  {
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    obj = DotNetObjectReference.Create(this);

    Shared.GetTimeSpan(1, out DateTime start, out DateTime end);
    filterDateS = start.Ticks;
    filterDateE = end.Ticks;
    await GetList();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await JSRuntime.InvokeVoidAsync("window.SetDotNetReference", obj, "OpenPopup");
  }


  private async Task ChangeFilterStatus(int value)
  {
    filterStatus = value;
    await GetList();
  }

  private async Task ChangeFilterDepartment(string value)
  {
    filterDepartment = value;
    if (string.IsNullOrEmpty(filterDepartment))
      filterUserList.Clear();
    else
      filterUserList = shareStorage.MemberList.Where(x => x.departments_id.Contains(filterDepartment))
        .Select(x => x.id).ToList();
    await GetList();
  }

  private async Task ChangeFilterDate(DateRange range)
  {
    await GetList();
  }

  private async Task ChangeFilterUser(string value)
  {
    if (string.IsNullOrEmpty(value))
      filterUserList.Clear();
    else
      filterUserList = new() { value };
    await GetList();
  }

  private async Task UpdateList(bool isUpdate)
  {
    togglePopup = false;
    if (isUpdate)
    {
      await GetList();
      await OnReCountWork.InvokeAsync();
    }
  }

  private void ToggleDay(long day)
  {
    if (hiddenDays.Contains(day))
      hiddenDays.Remove(day);
    else
      hiddenDays.Add(day);
  }

  private async Task GetList()
  {
    try
    {
      var dataTodoList = await DbTodoItem.GetAssignedList(Layout.Company.id, Layout.User.id, filterDateS, filterDateE);
      if (filterStatus > 0)
        dataTodoList.RemoveAll(x => x.assign_status != filterStatus);
      if (filterUserList.Count > 0)
        dataTodoList.RemoveAll(x => !filterUserList.Contains(x.user));
      else if (filterUserList.Count == 0 && !string.IsNullOrEmpty(filterDepartment))
        dataTodoList.Clear();

      dataList.Clear();
      DateTime dateS = Convert.ToDateTime(new DateTime(filterDateS).Date.ToString("yyyy-MM-dd"));
      DateTime dateE = Convert.ToDateTime(new DateTime(filterDateE).Date.ToString("yyyy-MM-dd"));

      for (DateTime date = dateE; date >= dateS; date = date.AddDays(-1))
      {
        long day = date.Date.Ticks;
        var list = dataTodoList.Where(x => x.date == day).OrderBy(x => x.end).ToList();
        if (list.Count > 0)
          dataList.Add(day, list);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task<bool> DeleteItem(TodolistModel.Todo item)
  {
    bool _success = true;
    try
    {
      var todo = await DbTodoItem.Get(Layout.Company.id, item.id);
      if (todo != null)
      {
        if (todo.assign_status == 1)
        {
          if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa công việc: {item.name}?"))
            return false;
          await DbTodoItem.Delete(Layout.Company.id, item.id);
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể xóa công việc này!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Công việc này đã được xóa trước đó!");
      await OnReCountWork.InvokeAsync();
      await GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> EditItem(TodolistModel.Todo item)
  {
    bool _success = true;
    try
    {
      var todo = await DbTodoItem.Get(Layout.Company.id, item.id);
      if (todo != null)
      {
        if (todo.assign_status == 1)
          editList.Add(todo.id);
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể chỉnh sửa công việc này!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Công việc này đã được xóa trước đó!");
      await GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "EditItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateItem(TodolistModel.Todo item)
  {
    try
    {
      var todo = await DbTodoItem.Get(Layout.Company.id, item.id);
      if (todo != null)
      {
        if (todo.assign_status == 1)
        {
          if (Shared.IsEmpty(item.name))
          {
            await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn cần nhập tiêu đề công việc!");
            return;
          }
          else
          {
            var todolist = await DbTodolist.GetbyDay(Layout.Company.id, item.user, new DateTime(item.date));
            if (todolist != null && todolist.status == 3)
            {
              await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn không thể chọn ngày nhân viên đã check-out Todolist!");
              return;
            }
            else
              await DbTodoItem.Update(Layout.Company.id, item);
          }
        }
        else
          await JSRuntime.InvokeVoidAsync("tagline", false, "Không thể chỉnh sửa công việc này!");
      }
      else
        await JSRuntime.InvokeVoidAsync("tagline", false, "Công việc này đã được xóa trước đó!");
      editList.Remove(item.id);
      await GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  [JSInvokable]
  public void OpenPopup()
  {
    togglePopup = true;
    StateHasChanged();
  }

  public void Dispose()
  {
    try
    {
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }
}