@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<div class="flex_column">
  <div id="page_fwork" class="main_content plan is_data">
    <div class="is_expanded is_data mt-0 pt-0">
      @if (Layout.IsMobile)
      {
        <div class="p-0">
          <div class="field is-grouped is-fullwidth mb-3">
            <div class="control is-expanded has-icons-right">
              <input class="input is-small is-rounded is_bg" type="text"
                     placeholder="Tiêu đề công việc..." @onchange="FilterKeyword">
              <span class="icon is-right is-small">
                <i class="material-icons-outlined is-size-5">search</i>
              </span>
            </div>
            <div class="control">
              <_InputDate @bind-Start="filterDateS"
              @bind-End="filterDateE"
                          OnRangeSelect="FilterDate"
                                            Minimal
                           Format="dd/MM"
                                            IsRange
                           DefaultString="Thời gian" />
             </div>
           </div>
           <ul class="columns is-vcentered is-variable is-1 mb-3 is-mobile scrollx-mobile">
             <li class="column is-narrow" style="width: 126px;">
               <div class="select is-small is-fullwidth">
                 <select @onchange="(e) => FilterDeadline(Convert.ToInt32(e.Value))">
                   <option value="0">Thời hạn</option>
                   <option value="1">Sắp hết hạn</option>
                   <option value="2">Trễ hạn</option>
                 </select>
               </div>
             </li>
             <li class="column is-narrow" style="width: 126px;">
               <div class="select is-small is-fullwidth">
                 <select @onchange="(e) => FilterPlan(e.Value.ToString())">
                   <option value="">Kế hoạch</option>
                   @foreach (var item in planList)
                  {
                    <option value="@item.id">@item.name</option>
                  }
                </select>
              </div>
            </li>
            <li class="column is-narrow" style="width: 126px;">
              <div class="select is-small is-fullwidth">
                <select @onchange="(e) => FilterPriority(Convert.ToInt32(e.Value))">
                  <option value="0">Độ ưu tiên</option>
                  @foreach (var item in WorkService.Priority())
                  {
                    <option value="@item.id">@item.name</option>
                  }
                </select>
              </div>
            </li>
            <li class="column is-narrow" style="width: 126px;">
              <div class="select is-small is-fullwidth">
                <select @onchange="(e) => FilterEnd(Convert.ToInt32(e.Value))">
                  <option value="0">Ngày kết thúc</option>
                  <option value="1">Tuần này</option>
                  <option value="2">Tháng này</option>
                  <option value="3">Quý này</option>

                </select>
              </div>
            </li>
          </ul>
          @foreach (var status in statusList)
          {
            var show = toggleStatus.Contains(status.id);
            var tasks = taskGroups.ContainsKey(status.id) ? taskGroups[status.id] : new();
            var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

            <div class="icon-text py-1">
              <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleStatus(status.id)">
                <i class="material-icons-outlined is-size-5">@(show ? "arrow_drop_down" : "arrow_right")</i>
              </a>
              <span class="has-text-weight-semibold font_14">
                @status.name @(count > 0 ? $"({count})" : "")
              </span>
            </div>
            @if (show)
            {
              foreach (var context in tasks)
              {
                if (context.id == null)
                {
                  if (context.plan_id == null)
                  {
                    <div class="has-text-centered p-3">
                      <span class="is-size-7">@context.name</span>
                    </div>
                  }
                  else
                  {
                    <div class="py-1">
                      <a class="icon-text has-text-link" href="/work/@context.plan_id/task">
                        <span class="icon is-small mr-2">
                          <i class="material-icons-outlined is-size-6">link</i>
                        </span>
                        <span>@context.name</span>
                      </a>
                    </div>
                  }
                }
                else
                {
                  var plan = planList.SingleOrDefault(x => x.id == context.plan_id);
                  <OnetezSoft.Pages.Work._TaskMobileItem 
                    model="context" 
                    plan="plan" 
                    showPlan="true" 
                    isTeam="true"
                    editRole="false"
                    members="memberList[plan.id]" 
                    toggleList="toggleList" 
                    OnToggle="OnToggle" />
                }
              }
            }
          }
        </div>
      }
      else
      {
        <div>
          <div class="card flex_column" style="flex:1; overflow:hidden">
            <ul class="columns is-vcentered is-variable is-2 mb-3">
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>Thời hạn</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterDeadline == 0 ? "has-text-weight-semibold" : "")" @onclick="() => FilterDeadline(0)">
                      Tất cả
                    </a>
                    <a class="dropdown-item @(filterDeadline == 1 ? "has-text-weight-semibold" : "")" @onclick="() => FilterDeadline(1)">
                      Sắp hết hạn
                    </a>
                    <a class="dropdown-item @(filterDeadline == 2 ? "has-text-weight-semibold" : "")" @onclick="() => FilterDeadline(2)">
                      Trễ hạn
                    </a>
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>Kế hoạch</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterPlan == null ? "has-text-weight-semibold" : "")"
                    @onclick="() => FilterPlan(null)">Tất cả</a>
                    @foreach (var item in planList)
                    {
                      <a class="dropdown-item @(filterPlan == item.id ? "has-text-weight-semibold" : "")"
                      @onclick="() => FilterPlan(item.id)">@item.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow" style="width: 110px;">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>
                        @(filterPriority != 0 ? WorkService.Priority(filterPriority).name : "Độ ưu tiên")
                      </span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterPriority == 0 ? "has-text-weight-semibold" : "")"
                    @onclick="() => FilterPriority(0)">Tất cả</a>
                    @foreach (var item in WorkService.Priority())
                    {
                      <a class="dropdown-item @(filterPriority == item.id ? "has-text-weight-semibold" : "")" style="color: @item.color;"
                      @onclick="() => FilterPriority(item.id)">@item.name</a>
                    }
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow">
                <Dropdown DropdownClass="is-size-7" CloseOnClickMenu=true>
                  <Trigger>
                    <a class="icon-text">
                      <span>Ngày kết thúc</span>
                      <span class="icon">
                        <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
                      </span>
                    </a>
                  </Trigger>
                  <MenuContent>
                    <a class="dropdown-item @(filterEnd == 0 ? "has-text-weight-semibold" : "")" @onclick="() => FilterEnd(0)">
                      Tất cả
                    </a>
                    <a class="dropdown-item @(filterEnd == 1 ? "has-text-weight-semibold" : "")" @onclick="() => FilterEnd(1)">
                      Tuần này
                    </a>
                    <a class="dropdown-item @(filterEnd == 2 ? "has-text-weight-semibold" : "")" @onclick="() => FilterEnd(2)">
                      Tháng này
                    </a>
                    <a class="dropdown-item @(filterEnd == 3 ? "has-text-weight-semibold" : "")" @onclick="() => FilterEnd(3)">
                      Quý này
                    </a>
                    <a class="dropdown-item @(filterEnd == 7 ? "has-text-weight-semibold" : "")" @onclick="() => FilterEnd(7)">
                      Quý trước
                    </a>
                  </MenuContent>
                </Dropdown>
              </li>
              <li class="column is-narrow" style="width: 115px;">
                <_InputDate @bind-Start="filterDateS"
                @bind-End="filterDateE"
                            OnRangeSelect="FilterDate"
                                                Minimal
                             Format="dd/MM"
                                                IsRange
                             DefaultString="Thời gian" />
               </li>
               <li class="column">
                 <div class="control has-icons-right">
                   <input class="input is-small is-rounded" type="text" placeholder="Tiêu đề công việc..." @onchange="FilterKeyword">
                   <span class="icon is-right is-small">
                     <i class="material-icons-outlined is-size-5">search</i>
                   </span>
                 </div>
               </li>
             </ul>
             <div class="scrolly inner_section pt-0" style="height: calc(100vh - 280px);">
               <ul class="task_list columns is-gapless is-size-7 has-text-grey" style="position: sticky;top: 0px;background: #FAFAFA; z-index: 3; border-bottom: 1px solid #DEDEDE;">
                 <li class="column" style="width: calc(100% - 630px);">Công việc</li>
                 <li class="column is-narrow" style="width: 110px;">Thời hạn</li>
                 <li class="column is-narrow" style="width: 130px;">Mức độ ưu tiên</li>
                 <li class="column is-narrow" style="width: 110px;">Thành viên</li>
                 <li class="column is-narrow" style="width: 80px;">Trạng thái</li>
                 <li class="column is-narrow" style="width: 30px;"></li>
               </ul>
               @foreach (var status in statusList)
              {
                var show = toggleStatus.Contains(status.id);
                var tasks = taskGroups.ContainsKey(status.id) ? taskGroups[status.id] : new();
                var count = tasks.Where(x => !string.IsNullOrEmpty(x.id)).Count();

                <ul class="task_list columns is-gapless is-size-7">
                  <li class="column is-full">
                    <div class="icon-text">
                      <a class="icon is-small has-text-dark mr-2" @onclick="() => ToggleStatus(status.id)">
                        <i class="material-icons-outlined is-size-5">@(show ? "arrow_drop_down" : "arrow_right")</i>
                      </a>
                      <span class="has-text-weight-semibold font_14">
                        @status.name @(count > 0 ? $"({count})" : "")
                      </span>
                    </div>
                  </li>
                </ul>
                @if (show)
                {
                  <Dropzone Items="tasks"
                            TItem="WorkPlanModel.Task"
                            Class="drop_task_list"
                            AllowsDrag="x => false"
                            WrapperClass="task_list is_item columns is-multiline is-gapless is-size-7"
                            HandlerClass="column is-narrow">
                    <Handler>
                      @if (context.id != null)
                      {
                        <span class="icon is_drag ml-2">
                          <i class="material-icons-outlined is-size-6">drag_indicator</i>
                        </span>
                      }
                    </Handler>
                    <ChildContent>
                      @if (context.id == null)
                      {
                        if (context.plan_id == null)
                        {
                          <div class="pl-4 py-1 is-size-7">
                            @context.name
                          </div>
                        }
                        else
                        {
                          <div class="is-size-7 pb-1">
                            <a class="icon-text has-text-link" href="/work/@context.plan_id/task">
                              <span class="icon is-small mr-2">
                                <i class="material-icons-outlined is-size-6">link</i>
                              </span>
                              <span class="has-text-weight-semibold  text_1_line" style="height:unset">@context.name</span>
                            </a>
                          </div>
                        }
                      }
                      else
                      {
                        var plan = planList.SingleOrDefault(x => x.id == context.plan_id);
                        if (plan != null)
                        {
                          <OnetezSoft.Pages.Work._TaskListItem model="context"
                                                               isTeam="true"
                                                               plan="plan"
                                                               showPlan="true"
                                                               editRole="false"
                                                               members="memberList[plan.id]"
                                                               toggleList="toggleList"
                                                               OnToggle="OnToggle" />
                        }
                      }
                    </ChildContent>
                  </Dropzone>
                }
              }
            </div>
          </div>
        </div>
      }
    </div>
  </div>

</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public UserModel User { get; set; }

  private List<WorkPlanModel> planList = new();
  private List<int> toggleStatus = new() { 1, 2 };
  private SharedStorage shareStorage = new();
  private string filterPlan = null;
  private string filterKey = null;
  private int filterDeadline = 0;
  private int filterPriority = 0;
  private int filterEnd = 0;
  private long filterDateS;
  private long filterDateE;

  private List<StaticModel> statusList = new();
  private Dictionary<int, List<WorkPlanModel.Task>> taskGroups = new();
  private Dictionary<string, List<MemberModel>> memberList = new();
  private List<string> toggleList = new();

  protected override async Task OnParametersSetAsync()
  {
    ResetFilter();
    filterDateS = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).Ticks;
    filterDateE = new DateTime(filterDateS).AddMonths(3).AddDays(-1).Ticks;
    // Lấy danh sách kế hoạch tham gia và đang diễn ra
    planList = await DbWorkPlan.GetListJoin(Layout.Company.id, User.id, 1);
    RemovePlan();

    memberList.Clear();
    foreach (var plan in planList)
    {
      var listId = plan.members.Select(x => x.id).ToList();
      var members = shareStorage.MemberList.Where(x => listId.Contains(x.id)).ToList();
      memberList.Add(plan.id, members);
    }

    statusList = WorkService.Status();
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    await GetTaskList();
    // Đóng tất cả công việc
    toggleList.Clear();
  }

  private void ToggleStatus(int id)
  {
    if (toggleStatus.Contains(id))
      toggleStatus.Remove(id);
    else
      toggleStatus.Add(id);
  }

  private async Task<bool> GetTaskList()
  {
    bool _success = true;
    try
    {
      // Lấy danh sách công việc đang tham gia
      var taskList = new List<WorkPlanModel.Task>();
      foreach (var plan in planList)
      {
        // Lọc theo kế hoạch
        if (filterPlan != null && filterPlan != plan.id)
          continue;
        var tasks = await DbWorkTask.GetListJoin(Layout.Company.id, plan.id, User.id);
        taskList.AddRange(tasks);
      }

      // Bộ lọc tìm kiếm
      taskList = FilterTaskList(taskList);

      // Chia nhóm công việc
      SplitTaskList(taskList);

    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnParametersSetAsync()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }


  private List<WorkPlanModel.Task> FilterTaskList(List<WorkPlanModel.Task> taskList)
  {
    // Lọc theo thời hạn
    if (filterDeadline == 1) // Sắp hết hạn
      taskList = taskList.Where(x => WorkService.CheckDeadline(x) == 1).ToList();
    else if (filterDeadline == 2) // Trễ hạn
      taskList = taskList.Where(x => WorkService.CheckDeadline(x) == 2).ToList();

    // Lọc theo thời gian thực hiện công việc
    if (filterDateS > 0 && filterDateE > 0)
    {
      var start = filterDateS;
      var end = filterDateE;
      taskList = (from x in taskList
                  where (x.date_start >= start && x.date_end <= end)
                  || (x.date_start <= start && x.date_end >= start)
                  || (x.date_end >= end && x.date_start <= end)
                  select x).ToList();
    }

    // Lọc theo ngày kết thúc công việc
    if (filterEnd != 0)
    {
      Shared.GetTimeSpan(filterEnd, out DateTime start, out DateTime end);
      taskList = taskList.Where(x => start.Ticks <= x.date_end && x.date_end < end.AddDays(1).Ticks).ToList();
    }

    // Lọc theo độ ưu tiên công việc
    if (filterPriority != 0)
      taskList = taskList.Where(x => x.priority == filterPriority).ToList();

    // Lọc theo tiêu đề công việc
    if (!string.IsNullOrEmpty(filterKey))
      taskList = taskList.Where(x => Shared.SearchKeyword(filterKey, x.name)).ToList();

    return taskList;
  }

  private void SplitTaskList(List<WorkPlanModel.Task> taskList)
  {
    taskGroups.Clear();
    foreach (var status in statusList)
    {
      List<WorkPlanModel.Task> tasks = new();
      foreach (var plan in planList)
      {
        var planTasks = (from x in taskList
                         where x.status == status.id && x.plan_id == plan.id
                         orderby x.pos, x.date_end
                         select x).ToList();
        if (planTasks.Count > 0)
        {
          planTasks.Insert(0, new() { name = "Kế hoạch: " + plan.name, plan_id = plan.id, status = status.id });
          tasks.AddRange(planTasks);
        }
      }
      if (tasks.Count == 0)
        tasks = new() { new() { name = "Chưa có công việc", status = status.id } };

      taskGroups.Add(status.id, tasks);
    }
  }



  private async Task FilterPlan(string value)
  {
    filterPlan = value;
    await GetTaskList();
  }

  private async Task FilterDeadline(int value)
  {
    filterDeadline = value;
    await GetTaskList();
  }

  private async Task FilterPriority(int value)
  {
    filterPriority = value;
    await GetTaskList();
  }

  private async Task FilterEnd(int value)
  {
    filterEnd = value;
    await GetTaskList();
  }

  private async Task FilterDate(DateRange range)
  {
    await GetTaskList();
  }

  private async Task FilterKeyword(ChangeEventArgs e)
  {
    filterKey = e.Value.ToString();
    await GetTaskList();
  }

  private void OnToggle(string id)
  {
    if (toggleList.Contains(id))
      toggleList.Remove(id);
    else
      toggleList.Add(id);
  }

  private void RemovePlan()
  {
    // Remove all plan private but if have current user dont remove
    planList = planList.Where(x => x.members.Any(y => y.id == Layout.User.id) && !x.is_private).ToList();
  }

  private void ResetFilter()
  {
    filterPlan = null;
    filterKey = null;
    filterDeadline = 0;
    filterPriority = 0;
    filterEnd = 0;
  }

}