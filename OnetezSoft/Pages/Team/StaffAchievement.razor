@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (CheckAccess("todolist"))
{
  <div class="mb-5">
    <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-one-third">
        <div class="dropdown is-hoverable">
          <div class="dropdown-trigger">
            <div class="icon-text">
              <h1 class="title is-5 has-text-info">
                THÀNH TỰU TODOLIST
              </h1>
              <span class="icon has-text-info">
                <i class="material-icons-outlined is-size-5">info</i>
              </span>
            </div>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <div class="dropdown-item">
                Các thành tựu Todolist dựa trên số ngày có Todolist đúng hạn liên tiếp (không kể ngày nghỉ) trong tháng.
                Todolist được xem là đúng hạn khi cả checkin và checkout đều đúng hạn.
              </div>
            </div>
          </div>
        </div>
      </li>
      @if (monthTodolist == DateTime.Now.Month)
      {
        <li class="column has-text-weight-semibold is-size-7">
          @todolist ngày liên tiếp không trễ Todolist
        </li>
        <li class="column is-narrow has-text-weight-semibold is-size-7">
          Còn <span class="has-text-danger">@(dayMonth - DateTime.Now.Day)</span> ngày kết thúc tháng
        </li>
      }
      else
      {
        <li class="column has-text-weight-semibold has-text-danger has-text-right is-size-7">
          Tháng đã kết thúc
        </li>
      }
      <li class="column is-narrow">
        <div class="select">
          <select @onchange="ChangeMonthTodolist">
            @for (DateTime date = DateTime.Now; date >= DateTime.Now.AddMonths(-6); date = date.AddMonths(-1))
            {
              <option value="@date.ToString("yyyy-MM-01")">Tháng @date.ToString("MM, yyyy")</option>
            }
          </select>
        </div>
      </li>
    </ul>
    <div class="inner_section">
      <ul class="columns is-gapless is-mobile is-multiline">
        @foreach (var item in todosAchievement)
        {
          var achievement = achiTodolist.Where(x => x.type_id == item.id);
          <li class="column is-one-fifth-table is-half-mobile">
            <div class="achi_item @(achievement.Count() > 0 ? "is-active" : "")">
              <div class="achi_todolist" style="background-image:url(@item.image)">
                @item.star
              </div>
              <div class="item_title mt-3">@item.name</div>
              <div class="item_desc">@item.apply lần</div>
            </div>
          </li>
        }
      </ul>
    </div>
  </div>
}

@if (CheckAccess("cfr"))
{
  <div class="mb-5">
    <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-one-third">
        <div class="dropdown is-hoverable">
          <div class="dropdown-trigger">
            <div class="icon-text">
              <h1 class="title is-5 has-text-info">
                THÀNH TỰU GHI NHẬN
              </h1>
              <span class="icon has-text-info">
                <i class="material-icons-outlined is-size-5">info</i>
              </span>
            </div>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <div class="dropdown-item">
                Các thành tựu ghi nhận dựa trên số ghi nhận bạn nhận được trong tháng.
              </div>
            </div>
          </div>
        </div>
      </li>
      @if (monthCfrs == DateTime.Now.Month)
      {
        <li class="column has-text-weight-semibold is-size-7">
          Được ghi nhận @cfrs lần
        </li>
        <li class="column is-narrow has-text-weight-semibold is-size-7">
          Còn <span class="has-text-danger">@(dayMonth - DateTime.Now.Day)</span> ngày kết thúc tháng
        </li>
      }
      else
      {
        <li class="column has-text-weight-semibold has-text-danger has-text-right is-size-7">
          Tháng đã kết thúc
        </li>
      }
      <li class="column is-narrow">
        <div class="select">
          <select @onchange="ChangeMonthCfrs">
            @for (DateTime date = DateTime.Now; date >= DateTime.Now.AddMonths(-6); date = date.AddMonths(-1))
            {
              <option value="@date.ToString("yyyy-MM-01")">Tháng @date.ToString("MM, yyyy")</option>
            }
          </select>
        </div>
      </li>
    </ul>
    <div class="inner_section">
      <ul class="columns is-gapless is-mobile is-multiline">
        @foreach (var item in cfrsAchievement)
        {
          var achievement = achiCfrs.Where(x => x.type_id == item.id);
          <li class="column is-one-fifth-table is-half-mobile">
            <div class="achi_item @(achievement.Count() > 0 ? "is-active" : "")">
              <div class="achi_cfrs" style="background-image:url(@item.image)">@item.star</div>
              <div class="item_title mt-3">@item.name</div>
              <div class="item_desc">@item.apply lần</div>
            </div>
          </li>
        }
      </ul>
    </div>
  </div>
}

@if (CheckAccess("kaizen"))
{
  <div class="mb-5">
    <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-one-third">
        <div class="dropdown is-hoverable">
          <div class="dropdown-trigger">
            <div class="icon-text">
              <h1 class="title is-5 has-text-info">
                THÀNH TỰU KAIZEN
              </h1>
              <span class="icon has-text-info">
                <i class="material-icons-outlined is-size-5">info</i>
              </span>
            </div>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <div class="dropdown-item">
                Các thành tựu Kaizen dựa trên số Kaizen có ích của bạn trong tháng. Kaizen được xem là có ích khi được đánh giá bởi quản lý là Đã ghi nhận, Sẽ áp dụng hoặc Sẽ xem xét.
              </div>
            </div>
          </div>
        </div>
      </li>
      @if (monthKaizen == DateTime.Now.Month)
      {
        <li class="column has-text-weight-semibold is-size-7">
          @kaizen Góp ý Kaizen có ích
        </li>
        <li class="column is-narrow has-text-weight-semibold is-size-7">
          Còn <span class="has-text-danger">@(dayMonth - DateTime.Now.Day)</span> ngày kết thúc tháng
        </li>
      }
      else
      {
        <li class="column has-text-weight-semibold has-text-danger has-text-right is-size-7">
          Tháng đã kết thúc
        </li>
      }
      <li class="column is-narrow">
        <div class="select">
          <select @onchange="ChangeMonthKaizen">
            @for (DateTime date = DateTime.Now; date >= DateTime.Now.AddMonths(-6); date = date.AddMonths(-1))
            {
              <option value="@date.ToString("yyyy-MM-01")">Tháng @date.ToString("MM, yyyy")</option>
            }
          </select>
        </div>
      </li>
    </ul>
   <div class="inner_section">
      <ul class="columns is-gapless is-mobile is-multiline">
        @foreach (var item in kaizensAchievement)
        {
          var achievement = achiKaizen.Where(x => x.type_id == item.id);
          <li class="column is-one-fifth-table is-half-mobile">
            <div class="achi_item @(achievement.Count() > 0 ? "is-active" : "")">
              <div class="achi_kaizen" style="background-image:url(@item.image)">@item.star</div>
              <div class="item_title mt-3">@item.name</div>
              <div class="item_desc">@item.apply góp ý</div>
            </div>
          </li>
        }
      </ul>
   </div>
  </div>
}

@if (CheckAccess("train"))
{
  <div class="">
    <ul class="columns is-vcentered is-variable is-2 mb-2">
      <li class="column is-one-third">
        <div class="dropdown is-hoverable">
          <div class="dropdown-trigger">
            <div class="icon-text">
              <h1 class="title is-5 has-text-info">
                THÀNH TỰU ĐÀO TẠO
              </h1>
              <span class="icon has-text-info">
                <i class="material-icons-outlined is-size-5">info</i>
              </span>
            </div>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <div class="dropdown-item">
                Các thành tựu Đào tạo dựa trên số Chứng chỉ đào tạo mà bạn nhận được trong tháng.
              </div>
            </div>
          </div>
        </div>
      </li>
      @if (monthEducate == DateTime.Now.Month)
      {
        <li class="column has-text-weight-semibold is-size-7">
          Đạt được @educate chứng chỉ
        </li>
        <li class="column is-narrow has-text-weight-semibold is-size-7">
          Còn <span class="has-text-danger">@(dayMonth - DateTime.Now.Day)</span> ngày kết thúc tháng
        </li>
      }
      else
      {
        <li class="column has-text-weight-semibold has-text-danger has-text-right is-size-7">
          Tháng đã kết thúc
        </li>
      }
      <li class="column is-narrow">
        <div class="select">
          <select @onchange="ChangeMonthEducate">
            @for (DateTime date = DateTime.Now; date >= DateTime.Now.AddMonths(-6); date = date.AddMonths(-1))
            {
              <option value="@date.ToString("yyyy-MM-01")">Tháng @date.ToString("MM, yyyy")</option>
            }
          </select>
        </div>
      </li>
    </ul>
   <div class="inner_section">
      <ul class="columns is-gapless is-mobile is-multiline">
        @foreach (var item in educatesAchievement)
        {
          var achievement = achiEducate.Where(x => x.type_id == item.id);
          <li class="column is-one-fifth-table is-half-mobile">
            <div class="achi_item @(achievement.Count() > 0 ? "is-active" : "")">
              <div class="achi_educate" style="background-image:url(@item.image)">@item.star</div>
              <div class="item_title mt-3">@item.name</div>
              <div class="item_desc">@item.apply chứng chỉ</div>
            </div>
          </li>
        }
      </ul>
   </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public UserModel User { get; set; }

  private List<AchievementModel> achiTodolist = new();
  private List<AchievementModel> achiCfrs = new();
  private List<AchievementModel> achiKaizen = new();
  private List<AchievementModel> achiEducate = new();
  private List<AchievementModel.Option> todosAchievement = new();
  private List<AchievementModel.Option> cfrsAchievement = new();
  private List<AchievementModel.Option> kaizensAchievement = new();
  private List<AchievementModel.Option> educatesAchievement = new();

  private int todolist = 0;
  private int cfrs = 0;
  private int kaizen = 0;
  private int educate = 0;
  private int monthTodolist = DateTime.Now.Month;
  private int monthCfrs = DateTime.Now.Month;
  private int monthKaizen = DateTime.Now.Month;
  private int monthEducate = DateTime.Now.Month;
  private int dayMonth = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);

  protected override async Task OnInitializedAsync()
  {
    todosAchievement = await DbAchievement.GetListByType(Layout.Company.id, "todolist");
    cfrsAchievement = await DbAchievement.GetListByType(Layout.Company.id, "cfrs");
    kaizensAchievement = await DbAchievement.GetListByType(Layout.Company.id, "kaizen");
    educatesAchievement = await DbAchievement.GetListByType(Layout.Company.id, "educate");
  }

  protected override async Task OnParametersSetAsync()
  {
    try
    {
      Handled.Shared.GetTimeSpan(2, out DateTime start, out DateTime end);
      var database = await DbAchievement.GetList(Layout.Company.id, User.id, null, start, end);

      achiTodolist = database.Where(x => x.type == "todolist").ToList();
      todolist = await DbTodolist.DataAchievement(Layout.Company.id, User.id, start, end);

      achiCfrs = database.Where(x => x.type == "cfrs").ToList();
      var cfrsList = await DbOkrCfr.DataAchievement(Layout.Company.id, User.id, start, end);
      cfrs = cfrsList.Count;

      achiKaizen = database.Where(x => x.type == "kaizen").ToList();
      var kaizenList = await DbKaizen.DataAchievement(Layout.Company.id, User.id, start, end);
      kaizen = kaizenList.Count;

      achiEducate = database.Where(x => x.type == "educate").ToList();
      var educateList = await DbEducateLearned.DataAchievement(Layout.Company.id, User.id, start, end);
      educate = educateList.Count;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnParametersSetAsync()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task ChangeMonthTodolist(ChangeEventArgs e)
  {
    try
    {
      var start = Convert.ToDateTime(e.Value);
      var end = start.AddMonths(1).AddDays(-1);
      monthTodolist = start.Month;
      achiTodolist = await DbAchievement.GetList(Layout.Company.id, User.id, "todolist", start, end);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeMonthTodolist()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task ChangeMonthCfrs(ChangeEventArgs e)
  {
    try
    {
      var start = Convert.ToDateTime(e.Value);
      var end = start.AddMonths(1).AddDays(-1);
      monthCfrs = start.Month;
      achiCfrs = await DbAchievement.GetList(Layout.Company.id, User.id, "cfrs", start, end);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeMonthCfrs()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task ChangeMonthKaizen(ChangeEventArgs e)
  {
    try
    {
      var start = Convert.ToDateTime(e.Value);
      var end = start.AddMonths(1).AddDays(-1);
      monthKaizen = start.Month;
      achiKaizen = await DbAchievement.GetList(Layout.Company.id, User.id, "kaizen", start, end);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeMonthKaizen()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task ChangeMonthEducate(ChangeEventArgs e)
  {
    try
    {
      var start = Convert.ToDateTime(e.Value);
      var end = start.AddMonths(1).AddDays(-1);
      monthEducate = start.Month;
      achiEducate = await DbAchievement.GetList(Layout.Company.id, User.id, "educate", start, end);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeMonthEducate()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private bool CheckAccess(string productId)
  {
    return ProductService.CheckAccess(Layout.Company, User, productId, out string message);
  }
}