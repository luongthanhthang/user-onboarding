@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="tabs">
  <div class="tabs_name has-text-grey is-size-7 has-text-weight-light is-italic text_1_line">
    @quotes.name" — @quotes.author
  </div>
  <ul>
    @if (CheckAccess("okrs"))
    {
      <li class="@(tab == 1 ? "is-active" : "")">
        <a class="has-text-weight-normal" href="/teams/personal/@staff.id?tab=1">OKRs</a>
      </li>
    }
    @if (CheckAccess("todolist"))
    {
      <li class="@(tab == 2 ? "is-active" : "")">
        <a class="has-text-weight-normal" href="/teams/personal/@staff.id?tab=2">Todolist</a>
      </li>
    }
    @if (CheckAccess("work"))
    {
      <li class="@(tab == 4 ? "is-active" : "")">
        <a class="has-text-weight-normal" href="/teams/personal/@staff.id?tab=4">Kế hoạch</a>
      </li>
    }
    <li class="@(tab == 3 ? "is-active" : "")">
      <a class="has-text-weight-normal" href="/teams/personal/@staff.id?tab=3">Thành tựu</a>
    </li>
  </ul>
</div>

<div class="columns is-vcentered is-mobile is-multiline is-variable is-3 mb-2">
  <div class="column is-full-mobile">
    <a class="icon-text">
      <span class="icon image is-32x32 is-rounded">
        <img src="@staff.avatar" alt="" />
      </span>
      <div>
        <p class="has-text-weight-bold">
          @staff.FullName
        </p>
        <p class="is-size-7" style="opacity:0.8;">
          @staff.job_title
        </p>
      </div>
    </a>
  </div>
  <div class="column is-narrow has-text-centered">
    <span class="icon-text has-text-link">
      <span class="icon">
        <i class="material-icons-outlined is-size-5">grade</i>
      </span>
      <span class="has-text-weight-bold">@staff.star_distribute</span>
    </span>
    <div class="is-size-7">Sao được cấp</div>
  </div>
  <div class="column is-narrow has-text-centered">
    <span class="icon-text has-text-primary">
      <span class="icon">
        <i class="material-icons-outlined is-size-5">grade</i>
      </span>
      <span class="has-text-weight-bold">@staff.star_total</span>
    </span>
    <div class="is-size-7">Sao của bạn</div>
  </div>
  <div class="column is-narrow has-text-centered">
    <span class="icon-text has-text-success">
      <span class="icon">
        <i class="material-icons-outlined is-size-5">trending_up</i>
      </span>
      <span class="has-text-weight-bold">@kaizen</span>
    </span>
    <div class="is-size-7">Kaizen giúp ích</div>
  </div>
  <div class="column is-narrow has-text-centered">
    <span class="icon-text has-text-danger">
      <span class="icon">
        <i class="material-icons-outlined is-size-5">verified</i>
      </span>
      <span class="has-text-weight-bold">@educate</span>
    </span>
    <div class="is-size-7">Chứng chỉ đã đạt</div>
  </div>
</div>


@if (tab == 1)
{
  if (CheckAccess("okrs"))
  {
    <StaffOkrList User="staff" />
  }
  else
  {
    <div class="has-text-danger has-text-weight-bold has-text-centered">
      @(staff.id == Layout.User.id ? "Bạn" : staff.FullName) không được cho phép sử dụng sản phẩm này.
    </div>
  }
}
else if (tab == 2)
{
  if (CheckAccess("todolist"))
  {
    <StaffTodolist User="staff" />
  }
  else
  {
    <div class="has-text-danger has-text-weight-bold has-text-centered">
      @(staff.id == Layout.User.id ? "Bạn" : staff.FullName) không được cho phép sử dụng sản phẩm này.
    </div>
  }
}
else if (tab == 4)
{
  if (CheckAccess("work"))
  {
    <StaffWorkPlan User="staff" />
  }
  else
  {
    <div class="has-text-danger has-text-weight-bold has-text-centered">
      @(staff.id == Layout.User.id ? "Bạn" : staff.FullName) không được cho phép sử dụng sản phẩm này.
    </div>
  }
}
else if (tab == 3)
{
  <StaffAchievement User="staff" />
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public UserModel staff { get; set; }

  private List<DepartmentModel.SelectList> department = new();
  private QuotesModel quotes = new();
  private int tab;
  private int cfrs = 0;
  private int kaizen = 0;
  private int educate = 0;
  private bool showInfo = false;

  private List<string> access = new();

  protected override void OnInitialized()
  {
    tab = CheckAccess("okrs") ? 1 : CheckAccess("todolist") ? 2 : CheckAccess("work") ? 4 : 3;
    quotes = DbQuotes.GetRandom(Layout.Company.id);
  }

  protected override async Task OnParametersSetAsync()
  {
    showInfo = false;
    List<int> tabs = new List<int> { 1, 2, 3, 4 };
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tab", out var outTab))
      tab = Convert.ToInt32(outTab);
    if(!tabs.Contains(tab))
      tab = 3;

    await GetData();
  }

  private async Task GetData()
  {
    try
    {
      var start = Convert.ToDateTime("2021-01-01");
      var end = DateTime.Now;

      var cfrsList = await DbOkrCfr.DataAchievement(Layout.Company.id, staff.id, start, end);
      cfrs = cfrsList.Count;

      var kaizenList = await DbKaizen.DataAchievement(Layout.Company.id, staff.id, start, end);
      kaizen = kaizenList.Count;

      var educateList = await EducateService.GetListLearned(Layout.Company.id, staff.id, 2);
      educate = educateList.Count;

      department = await DbDepartment.GetSelectListOfUser(Layout.Company.id, staff.departments_id, null);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetData()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private bool CheckAccess(string productId)
  {
    return ProductService.CheckAccess(Layout.Company, staff, productId, out string message);
  }
}