@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService
@implements IDisposable

@if (tab == 1)
{
  if(canView)
  {
    <div class="@(Layout.IsMobile ? "" : "todolist-team-header") mb-2">
      <div class="tabs my-0 @(Layout.IsMobile ? "mb-2" : "")">
      </div>
      <div class="is-flex">
        @if (!Layout.IsMobile)
        {
          <div style="gap: 0 10px; margin-right: @(currentView == 3 ? "200px" : "15px")" class="is-flex is-align-items-center">
            <Dropdown DropdownClass="is-right" CloseOnClickMenu=true>
              <Trigger>
                <a class="icon-text">
                  @{
                    var view = DbTodolist.ViewList().Where(x => x.id == currentView).FirstOrDefault();
                    <span class="icon is-secondary-20">
                      <i class="material-icons-outlined font_14">@view.icon</i>
                    </span>
                    <span class="has-text-weight-medium font_14 is-secondary-20">@view.name</span>
                  }
                  <span class="icon is-secondary-20 is-size-5">
                    <i class="material-icons-outlined">arrow_drop_down</i>
                  </span>
                </a>

              </Trigger>
              <MenuContent>
                @foreach (var item in DbTodolist.ViewList())
                {
                  <a class="dropdown-item icon-text" @onclick="() => ChangeView(item.id)">
                    <span class="icon font_14 @(currentView == item.id ? "has-text-link" : "is-secondary-20")">
                      <i class="material-icons-outlined">@item.icon</i>
                    </span>
                    <span class="font_14 @(currentView == item.id ? "has-text-link" : "is-secondary-20") has-text-weight-medium">@item.name</span>
                  </a>
                }
              </MenuContent>
            </Dropdown>
          </div>
        }
        @if (currentView != 3)
        {
          <_InputDate Start="todoDate.Value.DateTime.Ticks" StartChanged="DateTodoChange" ShowDateWeek HasNavigate />
        }
      </div>
    </div>

    if (currentView == 1)
    {
      <div class="inner_section flex_column" style="flex:1; @(Layout.IsMobile ? "" : "overflow:hidden"); margin-right:-1.5rem; max-height: calc(100% - 220px)">
        <div class="scrolly mb-4 pr-2" style="flex:1;">
          <table class="table is-vcentered is-noborder is-fullwidth is-responsive sticky @(Layout.IsMobile ? "only_desktop" : "")">
            <thead>
              <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
                <th class="">
                  Danh sách công việc
                </th>
                <th width="140px">
                  Độ ưu tiên
                </th>
                <th width="100px" align="center">
                  Bắt đầu
                </th>
                <th width="100px" align="center">
                  Kết thúc
                </th>
                <th width="100px" align="center">
                  Tình trạng
                </th>
              </tr>
            </thead>
            <tbody>
              @if (todoItems.Count == 0)
              {
                <tr>
                  @if(todolist == null || todolist.status < 3)
                  {
                    <td colspan="6" class="has-text-grey has-text-centered py-3 is-italic">
                      Chưa có công việc cho ngày @string.Format("{0:dd/MM}", todoDate.Value.DateTime)
                    </td>
                  }
                </tr>
              }
              else
              {
                @foreach (var item in todoItems)
                {
                  var status = DbTodolist.Status(item.status);
                  var type = DbTodolist.Type(item.type);
                  var level = DbTodolist.Level(item.level);
                  <tr>
                    <td>
                      @if (string.IsNullOrEmpty(item.assign_user))
                      {
                        <span class="has-text-weight-semibold has-text-link">@item.name</span>
                      }
                      else
                      {
                        var assignor = UserService.GetMember(shareStorage.MemberList, item.assign_user);
                        <span class="icon-text">
                          <span class="icon is-small has-text-danger" title="Công việc được giao bởi @assignor.name">
                            <i class="material-icons-outlined is-size-6">assignment</i>
                          </span>
                          <span class="has-text-weight-semibold has-text-link">@item.name</span>
                        </span>
                      }
                    </td>
                    <td>
                      <label class="td-label">Độ ưu tiên</label>
                      <div class="td-value">
                        <span class="has-text-weight-semibold @level.color">@level.name</span>
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Bắt đầu</label>
                      <div class="td-value">
                        @item.start
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Kết thúc</label>
                      <div class="td-value">
                        @item.end
                      </div>
                    </td>
                    <td align="center">
                      <label class="td-label">Tình trạng</label>
                      <div class="td-value">
                        <a class="button is-rounded @status.color px-2 is-small" style="width: 90px;">
                          <span>@status.name</span>
                        </a>
                      </div>
                    </td>
                  </tr>
                  <tr>
                    <td colspan="2">
                      @if (!string.IsNullOrEmpty(item.detail))
                      {
                        <div class="is-flex">
                          <label class="td-label is-show">Chi tiết:</label>
                          <div class="td-value is-word-break">
                            <div class="text_2_line" onclick="toggleText(this)">
                              @((MarkupString)Shared.GetLinks(item.detail))
                            </div>
                          </div>
                        </div>
                      }
                      @if (!string.IsNullOrEmpty(item.result))
                      {
                        <div class="is-flex">
                          <label class="td-label is-show">Kết quả:</label>
                          <div class="td-value is-word-break">
                            <div class="text_2_line" onclick="toggleText(this)">
                              @((MarkupString)Shared.GetLinks(item.result))
                            </div>
                          </div>
                        </div>
                      }
                    </td>
                  </tr>
                }
              }
            </tbody>
          </table>
        </div>
      </div>
    }
    else if (currentView == 2)
    {
      var sortStatus = TodolistService.SortStatusPossition(DbTodolist.Status());
      <div class="inner_section flex_column" style="flex:1;@(Layout.IsMobile ? "" : "overflow:hidden"); max-height: calc(100% - 220px)">
         <OnetezSoft.Pages.Todolist._TodoViewBoard statusList="sortStatus"
                                                User="User"
                                                todoItems="todoItems"
                                                todolist="todolist"
                                                isTeam="true"
                                                todoDate="todoDate"/>
      </div>
    }
    else
    {
      <div class="inner_section flex_column mb-5" style="position: unset; flex:1; @(Layout.IsMobile ? "" : "overflow:hidden")">
        <OnetezSoft.Pages.Todolist._TodoCalendar isTeam="true" User="User" />
      </div>
    }    
  }
  else
  {
    <div class="mb-2">
      <div class="has-text-centered is-italic">
        Bạn không thể xem todolist của người này.
      </div>
    </div>
  }
}
else
{
  <div class="@(Layout.IsMobile ? "mb-3" : "todolist-team-header") mb-2">

    <div class="tabs my-0 @(Layout.IsMobile ? "mb-2" : "")">
      <ul>
        <li class="" @onclick="() => tab = 1">
          <a class="has-text-weight-medium is-secondary-40 font_14 is-block has-text-centered">Chi tiết todolist</a>
        </li>
        <li class="is-active" @onclick="() => tab = 2">
          <a class="has-text-weight-medium is-secondary-40 font_14 is-block has-text-centered">Lịch sử todolist</a>
        </li>
      </ul>
    </div>
    <div>
      <Dropdown DropdownClass="is-right" CloseOnClickMenu>
        <Trigger>
          <a class="icon-text">
            @if (dateType == 1)
            {
              <span class="has-text-link">Tuần này</span>
            }
            else if (dateType == 11)
            {
              <span class="has-text-link">Tuần trước</span>
            }
            else if (dateType == 2)
            {
              <span class="has-text-link">Tháng này</span>
            }
            else if (dateType == 22)
            {
              <span class="has-text-link">Tháng trước</span>
            }
            else if (dateType == 3)
            {
              <span class="has-text-link">Quý này</span>
            }
            <span class="icon">
              <i class="material-icons-outlined is-size-5">arrow_drop_down</i>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeDate(1)">
            Tuần này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(11)">
            Tuần trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(2)">
            Tháng này
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(22)">
            Tháng trước
          </a>
          <a class="dropdown-item" @onclick="() => ChangeDate(3)">
            Quý này
          </a>
        </MenuContent>
      </Dropdown>
    </div>
  </div>

  <div class="inner_section">
    <table class="table is-noborder is-fullwidth is-vcentered is-responsive">
      <thead>
        <tr class="is-size-7" style="border-bottom: 1px solid #DEDEDE;">
          <th>Thành viên</th>
          <th width="190px">Ngày check-in</th>
          <th width="190px">Ngày check-out</th>
          <th width="120px">Hoàn thành</th>
          <th width="115px">Trạng thái</th>
        </tr>
      </thead>
      <tbody>
        @if (User != null && User.departments_id != null)
        {
          <tr>
            <td colspan="5">
              <div class="user_item">
                <img class="image is-36x36 mr-2" src="@User.avatar" alt="IMG">
                <div>
                  <p class="has-text-weight-semibold has-text-info is-size-6">
                    @User.FullName
                  </p>
                  <p class="text_1_line has-text-grey is-size-7" style="width: 400px;">
                    @User.departments_name
                  </p>
                </div>
              </div>
            </td>
          </tr>
          for (DateTime date = filterEnd; date >= filterStart; date = date.AddDays(-1))
          {
            // Ngày nghỉ
            var dayOff = DbDayOff.CheckOff(shareStorage.DayOffList, date);
            var item = database.SingleOrDefault(x => x.date == date.Ticks);
            if (item != null)
            {
              var progress = Shared.Progress(item.done, item.total);
              <tr>
                <td class="pl-6">
                  <label class="td-label">Ngày</label>
                  <div class="td-value">
                    <a class="icon-text has-text-link" @onclick="() => ShowItems(item.id)">
                      <span class="has-text-weight-semibold">@string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))</span>
                      <span class="icon" title="Xem nhanh các công việc">
                        <i class="material-icons-outlined is-size-5">
                          @(showTodoItems.Contains(item.id) ? "arrow_drop_down" : "arrow_right")
                        </i>
                      </span>
                      @if (item.day_off)
                      {
                        <i class="has-text-grey">(Ngày nghỉ)</i>
                      }
                    </a>
                  </div>
                </td>
                <td>
                  <label class="td-label">Ngày check-in</label>
                  <div class="td-value">
                    <span class="mr-3">@string.Format("{0:dd/MM - HH:mm}", new DateTime(item.date_checkin))</span>
                    @if (item.ontime_checkin)
                    {
                      <span class="has-text-success">Đúng hạn</span>
                    }
                    else
                    {
                      <span class="has-text-danger">Trễ hạn</span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Ngày check-out</label>
                  <div class="td-value">
                    @if (item.date_checkout > 0)
                    {
                      <span class="mr-3">@string.Format("{0:dd/MM - HH:mm}", new DateTime(item.date_checkout))</span>
                      @if (item.ontime_checkout)
                      {
                        <span class="has-text-success">Đúng hạn</span>
                      }
                      else
                      {
                        <span class="has-text-danger">Trễ hạn</span>
                      }
                    }
                    else
                    {
                      <span>Chưa Check-out</span>
                    }
                  </div>
                </td>
                <td>
                  <label class="td-label">Hoàn thành</label>
                  <div class="td-value has-text-weight-semibold">
                    @string.Format("{0}/{1}", item.done, item.total) - @Shared.ConvertNumber(progress)%
                  </div>
                </td>
                <td>
                  <label class="td-label">Trạng thái</label>
                  <div class="td-value has-text-weight-semibold">
                    @if (string.IsNullOrEmpty(item.user_confirm))
                    {
                      if (isManager)
                      {
                        <a class="has-text-link" @onclick="() => ConfirmItem(item)">
                          Xác nhận ngay
                        </a>
                      }
                      else
                      {
                        <span class="has-text-grey">Chờ xác nhận</span>
                      }
                    }
                    else if (item.user_confirm == "auto")
                    {
                      <span title="Hệ thống tự động xác nhận">Đã xác nhận</span>
                    }
                    else
                    {
                      var userConfirm = shareStorage.MemberList.SingleOrDefault(x => x.id == item.user_confirm);
                      <span title="@(userConfirm != null ? userConfirm.name : "Quản lý") đã xác nhận Todolist">
                        Đã xác nhận
                      </span>
                    }
                  </div>
                </td>
              </tr>
              if (showTodoItems.Contains(item.id))
              {
                var items = allTodoItems.Where(x => x.todolist == item.id).ToList();
                foreach (var todo in items)
                {
                  var type = DbTodolist.Type(todo.type);
                  var level = DbTodolist.Level(todo.level);
                  var status = DbTodolist.Status(todo.status);
                  <tr>
                    <td class="pl-6">
                      <span class="icon-text ml-3">
                        @if (string.IsNullOrEmpty(todo.assign_user))
                        {
                          <span class="icon is-small has-text-grey">
                            <i class="material-icons is-size-7">fiber_manual_record</i>
                          </span>
                        }
                        else
                        {
                          var assignor = UserService.GetMember(shareStorage.MemberList, todo.assign_user);
                          <span class="icon is-small has-text-danger" title="Công việc được giao bởi @assignor.name">
                            <i class="material-icons-outlined is-size-6">assignment</i>
                          </span>
                        }
                        <span class="has-text-weight-semibold has-text-link" onclick="toggleText(this)">
                          @todo.name
                        </span>
                      </span>
                    </td>
                    <td>
                      <label class="has-text-grey">Ưu tiên:</label>
                      <span class="@level.color">@level.name</span>
                    </td>
                    <td>
                      <label class="td-label">Thời gian</label>
                      <div class="td-value">
                        <span>@todo.start - @todo.end</span>
                      </div>
                    </td>
                    <td>
                      <label class="td-label">Trạng thái</label>
                      <div class="td-value @status.color">
                        @status.name
                      </div>
                    </td>
                  </tr>
                }
              }
            }
            else if (date < DateTime.Now && !dayOff)
            {
              <tr>
                <td class="pl-6">
                  <label class="td-label">Ngày</label>
                  <div class="td-value">
                    <span class="has-text-weight-semibold has-text-grey">@string.Format("{0:dd/MM/yyyy}", date)</span>
                  </div>
                </td>
                <td colspan="4" class="is-italic has-text-grey">
                  Không có Todolist
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
  </div>
}


@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public UserModel User { get; set; }

  private TodolistModel todolist = new();
  private List<TodolistModel.Todo> todoItems = new();
  private List<TodolistModel.Todo> allTodoItems = new();
  private List<string> editList = new();
  private DateTimeOffset? todoDate = DateTime.Today;

  private int dateType = 1;
  private List<DepartmentModel> departmentAll = new();
  private List<TodolistModel> database = new();
  private List<string> showTodoItems = new();
  private DateTime filterStart = DateTime.Now;
  private DateTime filterEnd = DateTime.Now;
  private int tab = 1;
  private int currentView = 1;

  private bool isManager;

  private SharedStorage shareStorage = new();

  private DotNetObjectReference<StaffTodolist> obj;

  private bool canView;

  protected override async Task OnInitializedAsync()
  {
    allTodoItems = await DbTodoItem.GetList(Layout.Company.id,null);
    shareStorage = await globalService.GetShareStorage(Layout.Company.id);
    obj = DotNetObjectReference.Create(this);
    departmentAll = await DbDepartment.GetAll(Layout.Company.id);
  }

  protected override async Task OnParametersSetAsync()
  {
    canView = TodolistService.CheckIfAllowToView(Layout.Company.todolist.view_type, User, Layout.User, departmentAll);

    if (canView)
    {
      await GetDataDay();
      await GetDataList();      
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JSRuntime.InvokeVoidAsync("window.SetDotNetReference", obj, "AddItem");
    }
  }

  private async Task DateTodoChange(long date)
  {
    todoDate = new DateTime(date);
    await GetDataDay();
  }

  private async Task DateTodoNavi(bool next)
  {
    todoDate = next ? todoDate.Value.DateTime.AddDays(1) : todoDate.Value.DateTime.AddDays(-1);
    await GetDataDay();
  }

  private async Task GetDataDay()
  {
    try
    {
      editList.Clear();

      todolist = await DbTodolist.GetbyDay(Layout.Company.id, User.id, todoDate.Value.DateTime);

      // Nếu người dùng tự xem thì mới tạo Todolist
      if (todolist == null && Layout.User.id == User.id)
      {
        todolist = new TodolistModel();
        todolist.date = todoDate.Value.DateTime.Ticks;
        todolist.user_create = User.id;
        todoItems = new();
        todolist = await DbTodolist.Create(Layout.Company.id, todolist);
      }
      if (todolist != null)
        todoItems = allTodoItems.Where(x => x.todolist == todolist.id).ToList();
      else
      {
        todoItems = new();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetDataDay()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
    }
  }

  private async Task ChangeDate(int type)
  {
    dateType = type;
    await GetDataList();
  }

  private async Task<bool> GetDataList()
  {
    bool _success = true;
    try
    {
      showTodoItems.Clear();
      Shared.GetTimeSpan(dateType, out filterStart, out filterEnd);
      database = await DbTodolist.GetList(Layout.Company.id, User.id, filterStart, filterEnd);

      isManager = await DbDepartment.CheckManagerRole(Layout.Company.id, User, Layout.User.id, departmentAll);
      await TodolistService.AutoConfirm(database, Layout.Company.todolist.time_confirm, Layout.Company.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetDataList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ConfirmItem(TodolistModel item)
  {
    bool _success = true;
    try
    {
      var items = allTodoItems.Where(x => x.todolist == item.id).ToList();
      foreach (var todo in items)
      {
        todo.confirm = true;
        await DbTodoItem.Update(Layout.Company.id, todo);
      }
      item.date_confirm = DateTime.Now.Ticks;
      item.user_confirm = Layout.User.id;
      await DbTodolist.Update(Layout.Company.id, item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ConfirmItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void ShowItems(string id)
  {
    if (showTodoItems.Contains(id))
      showTodoItems.Remove(id);
    else
      showTodoItems.Add(id);
  }


  private async Task ChangeView(int _view)
  {
    currentView = _view;
  }

  public void Dispose()
  {
    try
    {
      obj?.Dispose();
    }
    catch (Exception ex)
    {
      return;
    }
  }
}