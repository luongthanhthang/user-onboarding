@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@if (model != null)
{
   <section class="modal is-active">
      <div class="modal-background"></div>
      <section class="modal-card has_bg">
         <section class="modal-card-head is-warning" style="background-image: url('/images/illustrations/banner.png')">
            <div class="modal-card-title">
               <div class="title">
                  @(string.IsNullOrEmpty(model.id) ? "Tạo" : "Thông tin") banner
               </div>
               <div class="subtitle">
                  Banner có thể hiển thị ở những trang tùy chọn của khách hàng
               </div>
            </div>
            <a class="delete is-medium" @onclick="Cancel"></a>
         </section>
         <section class="modal-card-body">
            <div class="field">
               <label class="label has-text-weight-bold">Tiêu đề</label>
               <div class="control has-icons-left">
                  <input @bind="model.name" type="text" class="input is_line has-text-weight-bold" placeholder="Nhập tiêu đề..." />
                  <span class="icon is-left has-text-black">
                     <i class="material-icons-round is-size-6">edit</i>
                  </span>
               </div>
            </div>

            <div class="field">
               <label class="label has-text-weight-bold">Hình ảnh</label>
               @if (!string.IsNullOrEmpty(model.image))
               {
                  <div class="image mb-3">
                     <img src="@model.image" alt="img">
                  </div>
               }
               <div class="control">
                  <a class="button is-white is-small px-0 @(uploading ? "is-loading" : "")"
                     onclick="document.getElementById('file').click()">
                     <span class="icon">
                        <i class="material-icons-sharp is-size-6">file_upload</i>
                     </span>
                     <span>Tải ảnh lên</span>
                  </a>
                  <InputFile OnChange="Upload" accept="image/*" class="is-hidden" id="file" />
               </div>
            </div>

            <div class="field">
               <label class="label has-text-weight-bold">Liên kết</label>
               <div class="control has-icons-left">
                  <input @bind="model.link" type="text" class="input is_line has-text-weight-bold" placeholder="Nhập link kết..." />
                  <span class="icon is-left has-text-black">
                     <i class="material-icons-round is-size-6">edit</i>
                  </span>
               </div>
            </div>

            <div class="field">
               <label class="label has-text-weight-bold">Trang hiển thị</label>
               <div class="control has-icons-left mb-3">
                  <div class="select is_line is-fullwidth">
                     <select @onchange="SelectPage">
                        <option value="">Chọn trang</option>
                        @foreach (var sl in PageList())
                        {
                           <option value="@sl.Key">@sl.Value</option>
                        }
                     </select>
                  </div>
                  <span class="icon is-left has-text-black">
                     <i class="material-icons-round is-size-6">plagiarism</i>
                  </span>
               </div>
               <ul class="columns is-multiline is-mobile">
                  @foreach (var item in model.pages)
                  {
                     <li class="column is-narrow">
                        <div class="icon-text is-size-7 mt-1">
                           <span class="has-text-weight-medium">@item.Value</span>
                           <a class="icon is-small has-text-danger" @onclick="() => model.pages.Remove(item.Key)">
                              <i class="material-icons-round is-size-6">close</i>
                           </a>
                        </div>
                     </li>
                  }
               </ul>
            </div>
         </section>
         <section class="modal-card-foot is-right">
            <a class="button" @onclick="Cancel">
               <span class="icon">
                  <i class="material-icons-round is-size-6">chevron_left</i>
               </span>
               <span class="is-size-7">Trở về</span>
            </a>
            @if (string.IsNullOrEmpty(model.id))
            {
               <a class="button is-link" @onclick="Update">
                  <span class="icon">
                     <i class="material-icons-round is-size-6">add</i>
                  </span>
                  <span class="is-size-7">Tạo mới</span>
               </a>
            }
            else
            {
               <a class="button is-link" @onclick="Update">
                  <span class="icon">
                     <i class="material-icons-round is-size-6">done</i>
                  </span>
                  <span class="is-size-7">Cập nhật</span>
               </a>
            }
         </section>
      </section>
   </section>
}

@code {
   [CascadingParameter]
   public LayoutAdmin Layout { get; set; }
   [Parameter]
   public BannerModel model { get; set; }
   [Parameter]
   public EventCallback<bool> OnUpdate { get; set; }

   private async Task Cancel()
   {
      await OnUpdate.InvokeAsync(false);
   }

   private async Task<bool> Update()
   {
      bool _success = true;
      try
      {
         if (string.IsNullOrEmpty(model.name) || string.IsNullOrEmpty(model.name.Trim()))
            await Tagline("Bạn chưa nhập tiêu đề banner");
         else if (string.IsNullOrEmpty(model.image))
            await Tagline("Bạn chưa tải ảnh lên");
         else if (model.pages.Count == 0)
            await Tagline("Bạn chưa chọn trang hiển thị");
         else
         {
            if (string.IsNullOrEmpty(model.id))
               await DbMainBanner.Create(model);
            else
               await DbMainBanner.Update(model);
            await OnUpdate.InvokeAsync(true);
         }
      }
      catch (Exception ex)
      {
         var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
         StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id);
         await Layout.Tagline();
         _success = false;
      }
      return _success;
   }

   private void SelectPage(ChangeEventArgs e)
   {
      var key = e.Value.ToString();
      if (!string.IsNullOrEmpty(key))
      {
         if (model.pages.Where(x => x.Key == key).Count() == 0)
         {
            var item = PageList().SingleOrDefault(x => x.Key == key);
            model.pages.Add(item.Key, item.Value);
         }
      }
   }

   private bool uploading = false;
   private async Task Upload(InputFileChangeEventArgs e)
   {
      uploading = true;
      foreach (var file in e.GetMultipleFiles())
      {
         try
         {
            if (file.Size <= Layout.MaxFileSize)
            {
               var fileStream = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
               model.image = await Files.SaveFileAsync(fileStream, file.Name);
            }
            else
               await Tagline($"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB");
         }
         catch (Exception ex)
         {
            await Tagline($"Không thể tải ảnh lên: {ex.ToString()}");
            uploading = false;
            return;
         }
      }
      uploading = false;
   }

   private async Task Tagline(string message)
   {
      await JSRuntime.InvokeVoidAsync("tagline", false, message);
   }

   private Dictionary<string, string> PageList()
   {
      var results = new Dictionary<string, string>();
      results.Add("/client/companys", "Tổ chức");
      results.Add("/client/transactions", "Giao dịch");
      results.Add("/client/products", "Cửa hàng");
      return results;
   }

}