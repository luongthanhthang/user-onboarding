@page "/admin/accounts"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

<section class="px-4">
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column is-narrow">
      <h1 class="title is-5">
        @_title:
        <span class="has-text-weight-normal">@total.ToString() tài khoản</span>
      </h1>
    </li>
    <li class="column">
      <Dropdown>
        <Trigger>
          <div class="avatar_list">
            @{
              var count = 0;
            }
            @foreach(var row in onlineList)
            {
              var user = dataList.FirstOrDefault(x => x.id == row.Key);
              if(user != null && count < 10)
              {
                <a class="image is-rounded is-24x24" title="@user.FullName">
                  <img src="@user.avatar" alt="IMG">
                </a>
                count++;
              }
            }
            @if (onlineList.Count > 10)
            {
              <a class="image is-rounded is-24x24 has-background-grey-light is-size-7 has-text-white"
                 style="justify-content: center; align-items: center;">
                +@(onlineList.Count - 10)
              </a>
            }
          </div>
        </Trigger>
        <MenuContent>
          @foreach(var row in onlineList)
          {
            var user = dataList.FirstOrDefault(x => x.id == row.Key);
            if(user != null)
            {
              <a class="dropdown-item">
                <div class="icon-text">
                  <span class="icon image is-24x24 is-rounded mr-2">
                    <img src="@user.avatar" alt="IMG">
                    </span>
                  <span class="has-text-dark">@user.FullName</span>
                </div>
              </a>
            }
          }
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-one-third">
      <div class="control has-icons-left" title="Nhấn Enter để tìm">
        <input @bind="filterKeyword" @onkeyup="ChangeKeyword" type="text" class="input is-small"
               placeholder="Tìm theo ID, email, tên khách hàng, công ty" />
        <span class="icon is-left has-text-dark">
          <i class="material-icons-round is-size-6">search</i>
        </span>
      </div>
    </li>
    <li class="column is-narrow">
      <div class="field has-addons">
        <div class="control">
          <span class="button is-small is-static">Sắp xếp</span>
        </div>
        <div class="control is-expanded">
          <div class="select is-small is-full">
            <select @onchange="ChangeOrderby">
              <option value="1">Ngày tạo</option>
              <option value="2">Truy cập</option>
              <option value="3">Email</option>
              <option value="4">Tổ chức</option>
            </select>
          </div>
        </div>
      </div>
    </li>
  </ul>

  <table class="table is-fullwidth is-vcentered is-hoverable is-responsive is_head_bg is-size-7">
    <thead>
      <tr>
        <th width="100px">ID</th>
        <th width="20%">Tài khoản</th>
        <th>Họ và tên</th>
        <th>Tổ chức</th>
        <th width="110px" align="center">Loại tài khoản</th>
        <th width="80px" align="center">Trạng thái</th>
        <th width="80px" align="center">Truy cập</th>
        <th width="80px" align="center">Xử lý</th>
      </tr>
    </thead>
    <tbody class="has-text-weight-medium">
      @foreach (var item in dataList)
      {
        var companys = item.companys != null ? item.companys.Select(x => x.name).ToList() : new List<string>();
        var duplicate = dataList.Where(x => x.email == item.email).Count() > 1;
        var avatar = item.avatar.StartsWith("/") ? ConfigSystem.Domain + item.avatar : item.avatar;
        <tr>
          <td>
            @if (item.delete)
            {
              <del class="has-text-grey">@item.id</del>
            }
            else
            {
              <span class="has-text-dark">@item.id</span>
            }
          </td>
          <td>
            <div class="icon-text">
              <a class="icon image is-24x24 is-rounded mr-2" @onclick="() => AvatarItem(item)">
                <img src="@avatar" alt="IMG" />
              </a>
              <span class="has-text-@(duplicate ? "dark" : "dark")">@item.email</span>
            </div>
          </td>
          <td>
            <label class="td-label">Họ tên</label>
            <div class="td-value">
              @item.FullName
            </div>
          </td>
          <td>
            <label class="td-label">Tổ chức</label>
            <div class="td-value">
              <div class="text_2_line">
                @string.Join(", ", companys)
              </div>
            </div>
          </td>
          <td align="center">
            <label class="td-label">Loại</label>
            <div class="td-value has-text-weight-semibold is-uppercase">
              @if (item.is_admin)
              {
                <span class="has-text-danger mr-2">Admin</span>
              }
              @if (item.is_customer)
              {
                <span class="has-text-link">Khách</span>
              }
            </div>
          </td>
          <td align="center">
            <label class="td-label">Trạng thái</label>
            <div class="td-value">
              <a class="icon" @onclick="() => ActiveItem(item)">
                <i class="material-icons-round is-size-5 has-text-@(item.active ? "success" : "grey")">
                  toggle_@(item.active ? "on" : "off")
                </i>
              </a>
            </div>
          </td>
          <td align="center">
            <label class="td-label">Truy cập</label>
            <div class="td-value">
              @if (item.online > 0)
              {
                <span class="text_inline">
                  @Handled.Shared.ConvertDate(new DateTime(item.online)).Replace(" trước", "")
                </span>
              }
            </div>
          </td>
          <td align="center">
            <label class="td-label">Xử lý</label>
            <div class="td-value">
              <a class="icon" @onclick="() => UpdateItem(item)">
                <i class="material-icons-outlined is-size-6">sync</i>
              </a>
              <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                <i class="material-icons-outlined is-size-6">delete</i>
              </a>
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
  @if (dataList.Count == 0)
  {
    <div class="has-text-grey has-text-centered py-5">
      Không tìm thấy dữ liệu phù hợp
    </div>
  }
  <nav class="pagination is-small mb-5">
    <a class="pagination-previous" href="/admin/accounts?p=@(paging - 1)">Prev</a>
    <a class="pagination-next" href="/admin/accounts?p=@(paging + 1)">Next</a>
    <ul class="pagination-list">
      @for (var p = 1; p <= Shared.Paging(total, size); p++)
      {
        var active = paging == p ? "is-current" : "";
        <li>
          <a class="pagination-link @active" href="/admin/accounts?p=@p">@p</a>
        </li>
      }
    </ul>
  </nav>
</section>

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  private string _title = "Quản lý tài khoản";
  private List<UserModel> dataList = new();
  private Dictionary<string,string> onlineList = new();
  private string filterKeyword = string.Empty;
  private int orderby = 1;
  private int paging = 1;
  private int size = 50;
  private int total = 0;

  protected override async Task OnInitializedAsync()
  {
    onlineList = await globalService.GetOnline();
    await GetOnline();
    await GetList();
  }

  protected override async Task OnParametersSetAsync()
  {
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("p", out var outPage))
      paging = Convert.ToInt32(outPage);

    await GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = DbMainUser.GetAll(filterKeyword, orderby, paging, size, out total);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void ChangeKeyword(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
    {
      navigation.NavigateTo("/admin/accounts?p=1");
      //paging = 1;
      //GetList();
    }
    else if (args.Key == "Escape")
    {
      filterKeyword = string.Empty;
      navigation.NavigateTo("/admin/accounts?p=1");
      //paging = 1;
      //GetList();
    }
  }

  private void ChangeOrderby(ChangeEventArgs e)
  {
    orderby = Convert.ToInt32(e.Value);
    navigation.NavigateTo("/admin/accounts?p=1");
    //paging = 1;
    //GetList();
  }

  private async Task<bool> AvatarItem(UserModel item)
  {
    bool _success = true;
    try
    {
      item.avatar = $"https://avatars.dicebear.com/api/micah/{Mongo.RandomId()}.svg?background=pink";
      await DbMainUser.Update(item, globalService);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "AvatarItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> UpdateItem(UserModel item)
  {
    bool _success = true;
    try
    {
      await DbMainUser.Update(item, globalService);
      await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã cập nhật tài khoản {item.email}");
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ActiveItem(UserModel item)
  {
    bool _success = true;
    try
    {
      item.active = !item.active;
      await DbMainUser.Update(item, globalService);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ActiveItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteItem(UserModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa vĩnh viễn tài khoản {item.email} ?"))
        return false;

      int count = 0;
      if (item.companys != null)
      {
        foreach (var company in item.companys)
        {
          await DbUser.Delete(company.id, item.id);
          await globalService.Update(company.id);
          count++;
        }
      }
      await DbMainUser.Delete(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, $"Đã xóa tài khoản {item.email} khỏi {count} tổ chức");
      dataList.Remove(item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task GetOnline()
  {
    while (true)
    {
      await Task.Delay(30000);
      onlineList = await globalService.GetOnline();
    }
  }
}