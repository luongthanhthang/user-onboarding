@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

@if (model != null)
{
  <section class="modal is-active">
    <div class="modal-background"></div>
    <section class="modal-card has_bg">
      <section class="modal-card-head is-danger" style="background-image: url('/images/illustrations/users.png')">
        <div class="modal-card-title">
          <div class="title">
            Chỉnh sửa NDSP
          </div>
          <div class="subtitle">
            Người dùng sản phẩm là người dùng truy cập
            <br />
            vào sử dụng sản phẩm
          </div>
        </div>
        <a class="delete is-medium" @onclick="Cancel"></a>
      </section>
      <section class="modal-card-body">
        <form class="columns" autocomplete="off">
          <div class="column is-one-quarter">
            <div class="image is-128x128 is-radius mb-3">
              <img src="@model.avatar" />
            </div>
            <a class="button is-white is-small is-fullwidth @(uploading ? "is-loading" : "")"
               onclick="document.getElementById('file').click()">
              <span class="icon">
                <i class="material-icons-sharp is-size-6">file_upload</i>
              </span>
              <span>Tải ảnh lên</span>
            </a>
            <InputFile OnChange="Upload" accept="image/*" class="is-hidden" id="file" />
          </div>

          <div class="column is-three-quarters">
            <div class="field has-text-weight-bold">
              Thông tin tài khoản
            </div>
            <ul class="columns is-multiline is-variable is-2">
              <li class="column is-full">
                <div class="field">
                  <div class="control has-icons-left">
                    <input value="@model.email" type="text" class="input is_line" readonly />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">account_circle</i>
                    </span>
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <div class="control has-icons-left">
                    <input @bind="model.last_name" type="text" class="input is_line" placeholder="Nhập họ" />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">person</i>
                    </span>
                  </div>
                </div>
              </li>
              <li class="column is-half">
                <div class="field">
                  <div class="control has-icons-left">
                    <input @bind="model.first_name" type="text" class="input is_line" placeholder="Nhập tên" />
                    <span class="icon is-left has-text-black">
                      <i class="material-icons-round is-size-6">person</i>
                    </span>
                  </div>
                </div>
              </li>
            </ul>

            <div class="field has-text-weight-bold mt-5">
              Sản phẩm được quyền truy cập
            </div>

            <ul class="columns is-multiline is-variable is-1">
              @foreach (var product in company.products.Where(x => x.active && x.id != "storage"))
              {
                var access = ProductService.CheckAccess(model.products, product.id);
                <li class="column is-half">
                  <div class="icon-text @(product.used == product.total && !access ? "is_opacity" : "")">
                    <a class="icon is-small mr-2" @onclick="() => AccessProduct(product)">
                      <i class="material-icons-round is-size-5 has-text-@(access ? "success" : "grey")">
                        toggle_@(access ? "on" : "off")
                      </i>
                    </a>
                    <span class="has-text-weight-semibold is-size-7">
                      @product.title - @product.used/@product.total
                    </span>
                  </div>
                </li>
              }
            </ul>

            <div class="field has-text-weight-bold mt-5">
              Trạng thái
            </div>
            <label class="checkbox is-size-7">
              <input @bind="model.active" type="checkbox" />
              <span>Kích hoạt</span>
            </label>
          </div>
        </form>
      </section>
      <section class="modal-card-foot is-right">
        <a class="button" @onclick="Cancel">
          <span class="icon">
            <i class="material-icons-round is-size-6">chevron_left</i>
          </span>
          <span class="is-size-7">Trở về</span>
        </a>
        <a class="button is-link" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span class="is-size-7">Cập nhật</span>
        </a>
      </section>
    </section>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public UserModel model { get; set; }
  [Parameter]
  public CompanyModel company { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }

  private string password = string.Empty;

  private void Reset()
  {
    password = string.Empty;
  }

  private async Task Cancel()
  {
    await OnUpdate.InvokeAsync(false);
    Reset();
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(model.first_name) && string.IsNullOrEmpty(model.last_name))
        await Tagline("Bạn chưa nhập họ và tên cho tài khoản !");
      else
      {
        // Xóa quyền dùng sản phẩm khi hủy kích hoạt
        if (!model.active)
          model.products = new();
        await DbUser.Update(company.id, model, globalService);
        await OnUpdate.InvokeAsync(true);
        Reset();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task AccessProduct(CompanyModel.Product product)
  {
    var access = ProductService.CheckAccess(model.products, product.id);
    if (access)
    {
      // Có quyền rồi → Thì xóa
      model.products.Remove(product.id);
    }
    else if (product.used < product.total)
    {
      // Chưa có → Thì thêm quyền sử dụng
      model.products.Add(product.id);
    }
    else
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, "Đã hết số lượng người dùng sản phẩm " + product.title);
    }
  }

  private bool uploading = false;
  private async Task Upload(InputFileChangeEventArgs e)
  {
    uploading = true;
    foreach (var file in e.GetMultipleFiles())
    {
      try
      {
        if (file.Size <= Layout.MaxFileSize)
        {
          var fileStream = new StreamContent(file.OpenReadStream(Layout.MaxFileSize));
          model.avatar = await Files.SaveFileAsync(fileStream, file.Name);
        }
        else
          await Tagline($"Chỉ cho phép file tối đa {string.Format("{0:0,0}", Layout.MaxFileSize / 1024000)} MB");
      }
      catch (Exception ex)
      {
        await Tagline($"Không thể tải ảnh lên: {ex.ToString()}");
      }
    }
    uploading = false;
  }

  private async Task Tagline(string message)
  {
    await JSRuntime.InvokeVoidAsync("tagline", false, message);
  }
}