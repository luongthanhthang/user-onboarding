@page "/admin/feedback"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage storage
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="px-4">
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column">
      <h1 class="title is-5">
        @_title
      </h1>
    </li>
    <li class="column is-narrow">
      <div class="control has-icons-left">
        <div class="select is-small has-text-weight-medium is-fullwidth">
          <select @onchange="ChangeCompany">
            <option value="">Tất cả công ty</option>
            @foreach (var sl in companys)
            {
              if (sl.id == filterCompany)
              {
                <option value="@sl.id" selected>@sl.name</option>
              }
              else
              {
                <option value="@sl.id">@sl.name</option>
              }
            }
          </select>
        </div>
        <span class="icon is-left has-text-dark"><i class="material-icons-round is-size-6">filter_list</i></span>
      </div>
    </li>
    <li class="column is-narrow">
      <div class="control has-icons-left">
        <div class="select is-small has-text-weight-medium is-fullwidth">
          <select @onchange="ChangeStatus">
            <option value="0">Tất cả trạng thái</option>
            @foreach (var sl in DbMainFeedback.Status())
            {
              if (sl.id == filterStatus)
              {
                <option value="@sl.id" selected>@sl.name</option>
              }
              else
              {
                <option value="@sl.id">@sl.name</option>
              }
            }
          </select>
        </div>
        <span class="icon is-left has-text-dark"><i class="material-icons-round is-size-6">filter_list</i></span>
      </div>
    </li>
    <li class="column is-narrow">
      <div class="control has-icons-left" style="width: 180px;">
        <div class="input is-small">
          <DateRangePicker @bind-StartDate="filterDateS" @bind-EndDate="filterDateE" OnRangeSelect="ChangeDate" />
        </div>
        <span class="icon is-left has-text-grey"><i class="material-icons-round is-size-6">calendar_today</i></span>
      </div>
    </li>
    <li class="column is-narrow">
      <div class="control has-icons-left" style="width: 240px;" title="Nhấn Enter để tìm">
        <input @bind="filterKeyword" @onkeyup="ChangeKeyword" type="text" class="input is-small"
               placeholder="Tìm theo người gửi, công ty, tiêu đề..." />
        <span class="icon is-left has-text-dark">
          <i class="material-icons-round is-size-6">search</i>
        </span>
      </div>
    </li>
  </ul>

  <ul class="columns is-multiline">
    @foreach (var feedback in dataList)
    {
      var status = DbMainFeedback.Status(feedback.status);
      var comment = feedback.comments.LastOrDefault();
      var note = feedback.notes.LastOrDefault();

      <li class="column is-full">
        <div class="card p-4 pr-5">
          <ul class="columns is-multiline is-variable is-1 is-mobile">
            <li class="column is-four-fifths">
              <div class="box_color_left ml-2 pl-3 @status.color.Replace("has-text-", "is-")">
                <div class="user_item mb-1">
                  <img class="image is-32x32" src="@feedback.user_avatar" alt="IMG">
                  <div class="pl-2">
                    <p class="has-text-weight-bold has-text-info">@feedback.user_name</p>
                    <p class="is-size-7 has-text-grey">@feedback.company_name</p>
                  </div>
                </div>
                <div class="has-text-weight-bold is-size-6 text_1_line pb-1">
                  <a class="has-text-info" href="/admin/feedback/@feedback.id">@feedback.name</a>
                </div>
                <div class="is-size-7 has-text-grey">
                  @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(feedback.date))
                </div>
              </div>
            </li>
            <li class="column is-one-fifth has-text-right">
              <span class="icon-text @status.color">
                <span class="icon">
                  <i class="material-icons">fiber_manual_record</i>
                </span>
                <span class="has-text-weight-bold">@status.name</span>
              </span>
              @if (feedback.new_client)
              {
                <span class="icon-text has-text-danger ml-3">
                  <span class="icon">
                    <i class="material-icons">fiber_manual_record</i>
                  </span>
                  <span class="has-text-weight-bold">Mới</span>
                </span>
              }
            </li>
            <li class="column is-full has-text-grey">
              <div class="has-text-grey text_2_line pl-2" onclick="toggleText(this)">
                @((MarkupString)Shared.TextToHtml(feedback.content))
              </div>
            </li>
            @foreach (var file in feedback.files)
            {
              var fileName = Files.FileName(file);
              <li class="column is-narrow">
                <a class="icon-text has-text-link" href="@file" target="_blank">
                  <span class="icon">
                    <i class="material-icons-outlined is-size-6">description</i>
                  </span>
                  <span class="font_14semibold">@fileName</span>
                </a>
              </li>
            }
            @if (comment != null)
            {
              <li class="column is-full pl-3">
                <hr class="mt-1 mb-2" />
                <div class="has-text-weight-bold has-text-info">Phản hồi mới</div>
                <article class="media pt-2">
                  <div class="media-left">
                    <div class="image is-32x32 is-rounded">
                      <img src="@comment.user_avatar" alt="IMG" />
                    </div>
                  </div>
                  <div class="media-content">
                    <ul class="columns is-multiline is-variable is-1 is-mobile">
                      <li class="column is-full pl-2">
                        <div class="has-text-weight-bold has-text-info">
                          @comment.user_name - @comment.company_name
                        </div>
                        <div class="is-size-7 has-text-grey">
                          @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(comment.date))
                        </div>
                        <div class="has-text-grey text_2_line" onclick="toggleText(this)">
                          @((MarkupString)Shared.TextToHtml(comment.content))
                        </div>
                      </li>
                      @foreach (var file in comment.files)
                      {
                        var fileName = Files.FileName(file);
                        <li class="column is-narrow">
                          <a class="icon-text has-text-link" href="@file" target="_blank">
                            <span class="icon">
                              <i class="material-icons-outlined">description</i>
                            </span>
                            <span class="font_13">@fileName</span>
                          </a>
                        </li>
                      }
                    </ul>
                  </div>
                </article>
              </li>
            }
            @if (note != null)
            {
              <li class="column is-full pl-3">
                <hr class="mt-1 mb-2" />
                <div class="has-text-weight-bold has-text-info">Ghi chú mới</div>
                <article class="media pt-2">
                  <div class="media-left">
                    <div class="image is-32x32 is-rounded">
                      <img src="@note.user_avatar" alt="IMG" />
                    </div>
                  </div>
                  <div class="media-content">
                    <ul class="columns is-multiline is-variable is-1 is-mobile">
                      <li class="column is-full pl-2">
                        <div class="has-text-weight-bold has-text-info">
                          @note.user_name
                        </div>
                        <div class="is-size-7 has-text-grey">
                          @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(note.date))
                        </div>
                        <div class="has-text-grey text_2_line" onclick="toggleText(this)">
                          @((MarkupString)Shared.TextToHtml(note.content))
                        </div>
                      </li>
                      @foreach (var file in note.files)
                      {
                        var fileName = Files.FileName(file);
                        <li class="column is-narrow">
                          <a class="icon-text has-text-link" href="@file" target="_blank">
                            <span class="icon">
                              <i class="material-icons-outlined">description</i>
                            </span>
                            <span class="font_13">@fileName</span>
                          </a>
                        </li>
                      }
                    </ul>
                  </div>
                </article>
              </li>
            }
          </ul>
        </div>
      </li>
    }
    @if (dataList.Count == 0)
    {
      <li class="column is-full">
        <div class="card p-5 has-text-grey">
          Kết quả tìm kiếm trống
        </div>
      </li>
    }
  </ul>
</section>

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  private string _title = "Góp ý hệ thống";
  private List<FeedbackModel> dataList = new();
  private List<CompanyModel> companys = new();

  private int filterStatus = 0;
  private string filterKeyword = string.Empty;
  private string filterCompany = string.Empty;
  private DateTimeOffset? filterDateS { get; set; }
  private DateTimeOffset? filterDateE { get; set; }

  protected override async Task OnInitializedAsync()
  {
    companys = await DbMainCompany.GetAll();
    await GetFilter();
    Search();
  }

  private async Task ChangeCompany(ChangeEventArgs e)
  {
    filterCompany = e.Value.ToString();
    Search();
    await SetFilter();
  }

  private async Task ChangeStatus(ChangeEventArgs e)
  {
    filterStatus = Convert.ToInt32(e.Value);
    Search();
    await SetFilter();
  }

  private async Task ChangeDate(DateRange range)
  {
    Search();
    await SetFilter();
  }

  private async Task ChangeKeyword(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
    {
      Search();
      await SetFilter();
    }
    else if (args.Key == "Escape")
    {
      filterKeyword = string.Empty;
      Search();
      await SetFilter();
    }
  }

  private async Task<bool> Search()
  {
    bool _success = true;
    try
    {
      dataList = await DbMainFeedback.GetList(filterKeyword, filterStatus, filterCompany,
        filterDateS.Value.DateTime, filterDateE.Value.DateTime);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Search()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task SetFilter()
  {
    var filter = $"{DateTime.Today.ToShortDateString()};{filterStatus};{filterKeyword};{filterCompany};{filterDateS.Value.Ticks};{filterDateE.Value.Ticks}";
    await storage.SetAsync("filter_feedback", filter);
  }

  private async Task GetFilter()
  {
    var filter = await storage.GetAsync<string>("filter_feedback");
    if (filter.Success && !string.IsNullOrEmpty(filter.Value))
    {
      var array = filter.Value.Split(';');
      if (array[0] == DateTime.Today.ToShortDateString())
      {
        filterStatus = Convert.ToInt32(array[1]);
        filterKeyword = array[2];
        filterCompany = array[3];
        filterDateS = new DateTime(Convert.ToInt64(array[4]));
        filterDateE = new DateTime(Convert.ToInt64(array[5]));
        return;
      }
    }

    Shared.GetTimeSpan(4, out DateTime start, out DateTime end);
    filterDateS = start;
    filterDateE = end;
  }
}