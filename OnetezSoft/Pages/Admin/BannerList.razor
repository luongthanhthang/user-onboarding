@page "/admin/config/banners"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="px-4">
  <ul class="menu_bar mb-4">
    <li>
      <a class="icon-text has-text-white" href="/admin/config/products">
        <span class="icon">
          <i class="material-icons-round is-size-5">apps</i>
        </span>
        <span class="is-size-7 has-text-weight-bold">Sản phẩm</span>
      </a>
    </li>
    <li>
      <a class="icon-text has-text-white" href="/admin/config/promotions">
        <span class="icon">
          <i class="material-icons-round is-size-5">auto_awesome</i>
        </span>
        <span class="is-size-7 has-text-weight-bold">Ưu đãi</span>
      </a>
    </li>
    <li>
      <a class="icon-text has-text-white" href="/admin/config/users">
        <span class="icon">
          <i class="material-icons-round is-size-5">account_circle</i>
        </span>
        <span class="is-size-7 has-text-weight-bold">Tài khoản admin</span>
      </a>
    </li>
    <li>
      <a class="icon-text has-text-white is-active" href="/admin/config/banners">
        <span class="icon">
          <i class="material-icons-round is-size-5">celebration</i>
        </span>
        <span class="is-size-7 has-text-weight-bold">Banner quảng cáo</span>
      </a>
    </li>
  </ul>

  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column">
      <h1 class="title is-5">
        @_title
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="icon-text has-text-link" @onclick="() => EditItem(null)">
        <span class="icon">
          <i class="material-icons-outlined">add</i>
        </span>
        <span class="is-size-7 has-text-weight-medium">Tạo banner</span>
      </a>
    </li>
  </ul>

  <table class="table is-fullwidth is-vcentered is-responsive is_head_bg is-size-7">
    <thead>
      <tr>
        <th width="15%">Hình ảnh</th>
        <th width="20%">Tiêu đề</th>
        <th width="15%">Trang hiển thị</th>
        <th>Liên kết</th>
        <th width="15%">Ngày tạo</th>
        <th width="80px" align="center">Xử lý</th>
      </tr>
    </thead>
    <tbody class="has-text-weight-medium">
      @foreach (var item in dataList)
      {
        <tr>
          <td>
            <a class="image" href="@item.image" target="_blank">
              <img src="@item.image" alt="IMG" />
            </a>
          </td>
          <td>
            <label class="td-label">Tiêu đề</label>
            <div class="td-value">
              @item.name
            </div>
          </td>
          <td>
            <label class="td-label">Trang hiển thị</label>
            <div class="td-value">
              <div class="text_3_line" onclick="toggleText(this)">
                @foreach (var p in item.pages)
                {
                  <p>• @p.Value</p>
                }
              </div>
            </div>
          </td>
          <td>
            <label class="td-label">Liên kết</label>
            <div class="td-value">
              <a class="text_inline" href="@item.link" target="_blank">
                @item.link
              </a>
            </div>
          </td>
          <td>
            <label class="td-label">Ngày tạo</label>
            <div class="td-value">
              @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(item.date))
            </div>
          </td>
          <td align="center">
            <label class="td-label">Xử lý</label>
            <div class="td-value">
              <a class="icon has-text-dark" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                <i class="material-icons-round is-size-6">edit</i>
              </a>
              <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                <i class="material-icons-round is-size-6">delete</i>
              </a>
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
  @if (dataList.Count == 0)
  {
    <div class="has-text-grey has-text-centered py-6">
      Không tìm thấy dữ liệu phù hợp
    </div>
  }
</section>

<_BannerEdit model="model" OnUpdate="OnUpdate" />

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }

  private string _title = "Banner quảng cáo";
  private List<BannerModel> dataList = new();
  private BannerModel model = null;

  protected override async Task OnInitializedAsync()
  {
    await GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = await DbMainBanner.GetList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteItem(BannerModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa banner {item.name} ?"))
        return false;

      dataList.Remove(item);
      await DbMainBanner.Delete(item.id);
      await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa banner: " + item.name);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> EditItem(BannerModel item)
  {
    bool _success = true;
    try
    {
      if (item == null)
        model = new BannerModel() { pages = new Dictionary<string, string>() };
      else
        model = await DbMainBanner.Get(item.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "EditItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task OnUpdate(bool isUpdate)
  {
    if (isUpdate)
    {
      var message = string.IsNullOrEmpty(model.id) ? "Đã tạo banner thành công!" : "Đã cập nhật banner thành công!";
      await JSRuntime.InvokeVoidAsync("tagline", true, message);
      await GetList();
    }
    model = null;
  }
}