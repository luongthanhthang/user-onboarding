@page "/admin/feedback/{Id}"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

<section class="p-4">
  <div class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <div class="column">
      <h1 class="title is-5">
        Chi tiết góp ý
      </h1>
    </div>
    <div class="column is-narrow">
      <a class="icon-text has-text-link" href="/admin/feedback">
        <span class="icon">
          <i class="material-icons-outlined">arrow_back</i>
        </span>
        <span class="is-size-7 has-text-weight-medium">Quay lại</span>
      </a>
    </div>
  </div>
  <div class="card p-5">
    <ul class="columns is-vcentered is-multiline is-variable is-1 is-mobile">
      @if (feedback != null)
      {
        var status = DbMainFeedback.Status(feedback.status);

        <li class="column">
          <div class="box_color_left ml-2 pl-3 @status.color.Replace("has-text-", "is-")">
            <div class="user_item mb-1">
              <img class="image is-32x32" src="@feedback.user_avatar" alt="IMG">
              <div>
                <p class="has-text-weight-bold has-text-info">@feedback.user_name</p>
                <p class="is-size-7 has-text-grey">@feedback.company_name</p>
              </div>
            </div>
            <div class="has-text-weight-bold has-text-info is-size-6 pb-1">
              @feedback.name
            </div>
            <div class="is-size-7 has-text-grey">
              @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(feedback.date))
            </div>
          </div>
        </li>
        <li class="column is-narrow">
          <div class="dropdown @(showStatus ? "is-active" : "")">
            <div class="dropdown-trigger">
              <a class="icon-text @status.color" @onclick="() => showStatus = !showStatus">
                <span class="icon">
                  <i class="material-icons">fiber_manual_record</i>
                </span>
                <span class="has-text-weight-bold">@status.name</span>
                <span class="icon has-text-grey">
                  <i class="material-icons is-size-5">arrow_drop_down</i>
                </span>
              </a>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu">
              <div class="dropdown-content">
                @foreach (var sl in DbMainFeedback.Status())
                {
                  <a class="dropdown-item has-text-weight-bold @sl.color" @onclick="() => ChangeStatus(sl.id)">
                    @sl.name
                  </a>
                }
              </div>
            </div>
          </div>
        </li>
        @if (feedback.new_client)
        {
          <li class="column is-narrow">
            <span class="icon-text has-text-danger">
              <span class="icon">
                <i class="material-icons">fiber_manual_record</i>
              </span>
              <span class="has-text-weight-bold">Mới</span>
            </span>
          </li>
        }
        <li class="column is-full has-text-grey">
          <div class="pl-2">
            @((MarkupString)Shared.TextToHtml(feedback.content))
          </div>
        </li>
        @foreach (var file in feedback.files)
        {
          var fileName = Files.FileName(file);
          <li class="column is-narrow">
            <a class="icon-text has-text-link" href="@file" target="_blank">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">description</i>
              </span>
              <span class="font_14">@fileName</span>
            </a>
          </li>
        }
        <li class="column is-full">
          <hr class="my-2" />
          @foreach (var item in feedback.comments)
          {
            <article class="media pt-2 my-2">
              <div class="media-left">
                <div class="image is-32x32 is-rounded">
                  <img src="@item.user_avatar" alt="IMG" />
                </div>
              </div>
              <div class="media-content">
                <ul class="columns is-multiline is-variable is-1 is-mobile">
                  <li class="column is-full pl-2">
                    <div class="has-text-weight-bold has-text-info">
                      @item.user_name - @item.company_name
                    </div>
                    <div class="is-size-7 has-text-grey">
                      @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(item.date))
                    </div>
                    <div class="pt-1">
                      @((MarkupString)Shared.TextToHtml(item.content))
                    </div>
                  </li>
                  @foreach (var file in item.files)
                  {
                    var fileName = Files.FileName(file);
                    <li class="column is-narrow">
                      <a class="icon-text has-text-link" href="@file" target="_blank">
                        <span class="icon">
                          <i class="material-icons-outlined">description</i>
                        </span>
                        <span class="font_13">@fileName</span>
                      </a>
                    </li>
                  }
                </ul>
              </div>
            </article>
          }
        </li>
        <li class="column is-full">
          <hr class="my-2" />
        </li>
        <li class="column is-full">
          <div class="field is-grouped">
            <div class="control has-text-grey has-text-weight-medium">
              Phản hồi góp ý
            </div>
            @foreach (var file in filesComment)
            {
              var fileName = Files.FileName(file);
              <div class="control">
                <div class="icon-text has-text-link">
                  <span class="icon">
                    <i class="material-icons-outlined">description</i>
                  </span>
                  <a class="font_13" href="@file" target="_blank">@fileName</a>
                  <a class="icon has-text-danger" @onclick="() => filesComment.Remove(file)" title="Xoá">
                    <i class="material-icons-outlined">close</i>
                  </a>
                </div>
              </div>
            }
          </div>
          <div class="field is-grouped">
            <div class="control is-expanded has-icons-right">
              <textarea @bind="content" id="replyInput" class="textarea scrolly" rows="1" placeholder="Nội dung bình luận..." />
              <a class="icon is-right has-text-link" onclick="document.getElementById('file').click()"
                 title="Đính kèm tệp" style="pointer-events: auto;">
                <i class="material-icons-outlined is-size-5">attachment</i>
              </a>
              <InputFile OnChange="Upload" class="is-hidden" id="file"
                         accept=".pdf,.png,.jpg,.jpeg,.mp4,.doc,.docx,.xls,.xlsx" multiple />
            </div>
            <div class="control">
              <a class="button is-link @(_upload ? "is-loading" : "")" @onclick="Comment">
                <span class="icon">
                  <i class="material-icons-outlined is-size-6">send</i>
                </span>
                <span>Gửi</span>
              </a>
            </div>
          </div>
        </li>
        <li class="column is-full">
          <hr class="my-2" />
        </li>
        <li class="column is-full">
          <a class="icon-text has-text-info" @onclick="() => showNotes= !showNotes">
            <span class="has-text-weight-bold">Ghi chú</span>
            <span class="ml-1">(@feedback.notes.Count)</span>
            <span class="icon">
              <i class="material-icons is-size-6">@(showNotes ? "expand_more" : "chevron_right")</i>
            </span>
          </a>
          <div class="@(showNotes ? "expand_more" : "is-hidden")">
            @foreach (var note in feedback.notes)
            {
              <article class="media pt-2 my-2">
                <div class="media-left">
                  <div class="image is-32x32 is-rounded">
                    <img src="@note.user_avatar" alt="IMG" />
                  </div>
                </div>
                <div class="media-content">
                  <ul class="columns is-multiline is-variable is-1 is-mobile">
                    <li class="column is-full pl-2">
                      <div>
                        <span class="has-text-weight-bold has-text-info">
                          @note.user_name
                        </span>
                        <span class="px-3">•</span>
                        <a class="has-text-danger" @onclick="() => DeleteNote(note)">
                          Xoá ghi chú này
                        </a>
                      </div>
                      <div class="is-size-7 has-text-grey">
                        @string.Format("{0:dd/MM/yyyy, HH:mm}", new DateTime(note.date))
                      </div>
                      <div>
                        @((MarkupString)Shared.TextToHtml(note.content))
                      </div>
                    </li>
                    @foreach (var file in note.files)
                    {
                      var fileName = Files.FileName(file);
                      <li class="column is-narrow">
                        <a class="icon-text has-text-link" href="@file" target="_blank">
                          <span class="icon">
                            <i class="material-icons-outlined">description</i>
                          </span>
                          <span class="font_13">@fileName</span>
                        </a>
                      </li>
                    }
                  </ul>
                </div>
              </article>
            }
            <hr class="my-2" />
            <div class="field is-grouped">
              <div class="control has-text-grey has-text-weight-medium">
                Tạo ghi chú mới
              </div>
              @foreach (var file in filesNote)
              {
                var fileName = Files.FileName(file);
                <div class="control">
                  <div class="icon-text has-text-link">
                    <span class="icon">
                      <i class="material-icons-outlined">description</i>
                    </span>
                    <a class="font_13" href="@file" target="_blank">@fileName</a>
                    <a class="icon has-text-danger" @onclick="() => filesNote.Remove(file)" title="Xoá">
                      <i class="material-icons-outlined">close</i>
                    </a>
                  </div>
                </div>
              }
            </div>
            <div class="field is-grouped">
              <div class="control is-expanded has-icons-right">
                <textarea @bind="note" id="noteInput" class="textarea scrolly" rows="1" placeholder="Nội dung ghi chú..." />
                <a class="icon is-right has-text-link" onclick="document.getElementById('fileNote').click()"
                   title="Đính kèm tệp" style="pointer-events: auto;">
                  <i class="material-icons-outlined is-size-5">attachment</i>
                </a>
                <InputFile OnChange="UploadNote" class="is-hidden" id="fileNote"
                           accept=".pdf,.png,.jpg,.jpeg,.mp4,.doc,.docx,.xls,.xlsx" multiple />
              </div>
              <div class="control">
                <a class="button is-link" @onclick="Note">
                  <span class="icon">
                    <i class="material-icons-outlined is-size-6">done</i>
                  </span>
                  <span>Lưu</span>
                </a>
              </div>
            </div>
          </div>
        </li>
      }
      else
      {
        <li class="column is-full">
          <div class="py-6 has-text-grey">
            Dữ liệu không tồn tại hoặc đã bị xoá !
          </div>
        </li>
      }
    </ul>
  </div>
</section>

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public string Id { get; set; }

  private bool success = false;
  private string _message = string.Empty;
  private string _title = "Góp ý hệ thống";
  private bool _upload = false;
  private long MaxFileSize = 2 * 1024000;

  private FeedbackModel feedback = new();
  private string content = string.Empty;
  private List<string> filesComment = new();
  private string note = string.Empty;
  private List<string> filesNote = new();
  private bool showStatus = false;
  private bool showNotes = false;

  protected override async Task OnInitializedAsync()
  {
    feedback = await DbMainFeedback.Get(Id);
    if (feedback != null)
    {
      feedback.new_client = false;
      await DbMainFeedback.Update(feedback);

      await JSRuntime.InvokeVoidAsync("textAutoSize", "#replyInput");
      await JSRuntime.InvokeVoidAsync("textAutoSize", "#noteInput");

      await ListenCallback();
    }
  }

  private async Task<bool> ChangeStatus(int id)
  {
    bool _success = true;
    try
    {
      showStatus = false;
      feedback.status = id;
      feedback = await DbMainFeedback.Update(feedback);
      MessagingCenter.Send(this, "feedback_" + feedback.id, feedback.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ChangeStatus()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task Upload(InputFileChangeEventArgs e)
  {
    showStatus = false;
    _upload = true;
    success = true;
    var filesUpload = e.GetMultipleFiles();
    if (filesUpload.Count < 6)
    {
      _message = "Đang tải file lên....";
      foreach (var file in filesUpload)
      {
        try
        {
          if (filesComment.Count < 5)
          {
            if (Files.CheckExtension(file.Name, null))
            {
              if (file.Size <= MaxFileSize)
              {
                var fileStream = new StreamContent(file.OpenReadStream(MaxFileSize));
                var fileLink = await Files.SaveFileAsync(fileStream, file.Name);
                filesComment.Add(fileLink);
              }
              else
              {
                _message += $"<br/>{file.Name}: dung lượng file lớn hơn 2 MB";
                success = false;
              }
            }
            else
            {
              _message += $"<br/>{file.Name}: định dạng file không hợp lệ";
              success = false;
            }
          }
          else
          {
            _message = $"Đã đủ số lượng file cho phép tải";
            success = false;
          }
        }
        catch (Exception ex)
        {
          _message += $"{file.Name}: {ex.ToString()}";
          success = false;
        }
      }
      _upload = false;
      if (_message == "Đang tải file lên....")
        _message = string.Empty;
    }
    else
    {
      _upload = false;
      success = false;
      _message = "Chỉ cho phép tải lên 5 file đính kèm !";
    }

    if(!success)
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, _message);
    }
  }

  private async Task<bool> Comment()
  {
    bool _success = true;
    try
    {
      showStatus = false;
      success = false;
      _message = string.Empty;
      if (string.IsNullOrEmpty(content))
      {
        _message = "Chưa nhập nội dung phản hồi!";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else
      {
        DbMainFeedback.Comment(feedback.id, content, filesComment, Layout.User, "Chăm sóc khách hàng", true);
        filesComment = new();
        content = string.Empty;

        // Gửi thông báo chuông
        await DbNotify.Create(feedback.company_id, 30, feedback.id, feedback.user_id, "Chăm sóc khách hàng");

        MessagingCenter.Send(this, "feedback_" + feedback.id, feedback.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Comment()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UploadNote(InputFileChangeEventArgs e)
  {
    showStatus = false;
    success = true;
    var filesUpload = e.GetMultipleFiles();
    if (filesUpload.Count < 6)
    {
      _message = "Đang tải file lên....";
      foreach (var file in filesUpload)
      {
        try
        {
          if (filesNote.Count < 5)
          {
            if (Files.CheckExtension(file.Name, null))
            {
              if (file.Size <= MaxFileSize)
              {
                var fileStream = new StreamContent(file.OpenReadStream(MaxFileSize));
                var fileLink = await Files.SaveFileAsync(fileStream, file.Name);
                filesNote.Add(fileLink);
              }
              else
              {
                _message += $"<br/>{file.Name}: dung lượng file lớn hơn 2 MB";
                success = false;
              }
            }
            else
            {
              _message += $"<br/>{file.Name}: định dạng file không hợp lệ";
              success = false;
            }
          }
          else
          {
            _message = $"Đã đủ số lượng file cho phép tải";
            success = false;
          }
        }
        catch (Exception ex)
        {
          _message += $"{file.Name}: {ex.ToString()}";
          success = false;
        }
      }
      _upload = false;
      if (_message == "Đang tải file lên....")
        _message = string.Empty;
    }
    else
    {
      _upload = false;
      success = false;
      _message = "Chỉ cho phép tải lên 5 file đính kèm !";
    }

    if(!success)
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, _message);
    }
  }

  private async Task<bool> Note()
  {
    bool _success = true;
    try
    {
      showStatus = false;
      _success = false;
      _message = string.Empty;
      if (string.IsNullOrEmpty(note))
      {
        _message = "Chưa nhập nội dung ghi chú!";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else
      {
        feedback = await DbMainFeedback.Note(feedback.id, note, filesNote, Layout.User);
        filesNote = new();
        note = string.Empty;

        MessagingCenter.Send(this, "feedback_" + feedback.id, feedback.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Note()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteNote(FeedbackModel.Note item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa ghi chú này?"))
        return false;

      feedback.notes.Remove(item);
      DbMainFeedback.Update(feedback);

      MessagingCenter.Send(this, "feedback_" + feedback.id, feedback.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteNote()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  public async Task<bool> ListenCallback()
  {
    bool _success = true;
    try
    {
      MessagingCenter.Subscribe<Pages.Admin.FeedbackDetail, string>(this, "feedback_" + feedback.id, async (sender, value) =>
      {
        feedback = await DbMainFeedback.Get(value);
        await InvokeAsync(StateHasChanged);
      });

      MessagingCenter.Subscribe<Pages.Feedback.FeedbackDetail, string>(this, "feedback_" + feedback.id, async (sender, value) =>
      {
        feedback = await DbMainFeedback.Get(value);
        await InvokeAsync(StateHasChanged);
      });
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ListenCallback()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}