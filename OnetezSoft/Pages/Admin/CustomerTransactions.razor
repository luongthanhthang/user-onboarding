@page "/admin/customers/{Id}/transaction"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (customer != null)
{
  <section class="px-4">
    <_CustomerInfo model="customer" />

    <ul class="menu_bar mb-4">
      <li>
        <a class="icon-text has-text-white" href="/admin/customers/@customer.id/company">
          <span class="icon">
            <i class="material-icons-round is-size-5">people</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Tổ chức</span>
        </a>
      </li>
      <li>
        <a class="icon-text has-text-white is-active" href="/admin/customers/@customer.id/transaction">
          <span class="icon">
            <i class="material-icons-round is-size-5">attach_money</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Lịch sử giao dịch</span>
        </a>
      </li>
    </ul>

    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
      <li class="column">
        <h1 class="title is-5">
          @_title
        </h1>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="FilterType">
              <option value="0">Loại giao dịch</option>
              @foreach (var sl in TransactionService.Type())
              {
                <option value="@sl.id">@sl.name</option>
              }
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">filter_list</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="FilterStatus">
              <option value="0">Trạng thái</option>
              @foreach (var sl in TransactionService.Status())
              {
                <option value="@sl.id">@sl.name</option>
              }
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">filter_list</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left">
          <div class="select is-small has-text-weight-medium">
            <select @onchange="FilterTimes">
              <option value="0">Thời gian</option>
              <option value="2">Tháng này</option>
              <option value="22">Tháng trước</option>
              <option value="5">3 tháng trước</option>
              <option value="6">6 tháng trước</option>
            </select>
          </div>
          <span class="icon is-left has-text-dark">
            <i class="material-icons-round is-size-6">filter_list</i>
          </span>
        </div>
      </li>
      <li class="column is-narrow">
        <div class="control has-icons-left" style="width: 180px;">
          <div class="input is-small">
            <DateRangePicker @bind-StartDate="filterDateS" @bind-EndDate="filterDateE" OnRangeSelect="FilterDates" />
          </div>
          <span class="icon is-left has-text-grey">
            <i class="material-icons-round is-size-6">calendar_today</i>
          </span>
        </div>
      </li>
    </ul>

    <table class="table is-fullwidth is-vcentered is-hoverable is_head_bg is-size-7">
      <thead>
        <tr>
          <th width="10%">Mã giao dịch</th>
          <th width="10%">Thời gian</th>
          <th width="10%">Loại giao dịch</th>
          <th width="12%">Số tiền</th>
          <th>Nội dung</th>
          <th width="12%">Số dư còn lại</th>
          <th width="10%">Trạng thái</th>
        </tr>
      </thead>
      <tbody class="has-text-weight-medium">
        @foreach (var item in dataList)
        {
          var status = TransactionService.Status(item.status);
          var type = TransactionService.Type(item.type);
          <tr>
            <td>
              <span>@item.id</span>
            </td>
            <td>
              <span>@string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))</span>
            </td>
            <td>
              @if (item.type == 2)
              {
                <span>Hệ thống @(item.money > 0 ? "nạp" : "rút")</span>
              }
              else
              {
                <span>@type.name</span>
              }
            </td>
            <td>
              <span class="has-text-weight-bold has-text-@(item.money > 0 ? "success" : "danger")">
                @string.Format("{0:0,0} VNĐ", item.money)
              </span>
            </td>
            <td>
              @((MarkupString)Shared.TextToHtml(item.content))
            </td>
            <td>
              <span class="has-text-weight-bold">
                @Shared.ConvertCurrency(item.balance) VNĐ
              </span>
            </td>
            <td>
              <span class="icon-text @status.color">
                <span class="icon is-small mr-2">
                  <i class="material-icons-round is-size-6">@status.icon</i>
                </span>
                <span>@status.name</span>
              </span>
            </td>
          </tr>
        }
      </tbody>
    </table>
    @if (dataList.Count == 0)
    {
      <div class="has-text-grey has-text-centered py-5">
        Không tìm thấy dữ liệu phù hợp
      </div>
    }
  </section>
}
else
{
  <section class="p-4">
    <div class="has-text-grey has-text-centered py-6">
      Dữ liệu không tồn tại hoặc đã xóa
    </div>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public string Id { get; set; }

  private string _title = "Lịch sử giao dịch";
  private UserModel customer = null;
  private List<TransactionModel> dataList = new();
  private int filterType = 0;
  private int filterStatus = 0;
  private DateTimeOffset? filterDateS = DateTime.Today.AddDays(-30);
  private DateTimeOffset? filterDateE = DateTime.Today;

  protected override async Task OnInitializedAsync()
  {
    customer = await DbMainUser.Get(Id, null);
    if (customer != null)
      GetList();
  }

  private void FilterType(ChangeEventArgs e)
  {
    filterType = Convert.ToInt32(e.Value);
    GetList();
  }

  private void FilterStatus(ChangeEventArgs e)
  {
    filterStatus = Convert.ToInt32(e.Value);
    GetList();
  }

  private void FilterTimes(ChangeEventArgs e)
  {
    Shared.GetTimeSpan(Convert.ToInt32(e.Value), out DateTime dateS, out DateTime dateE);
    filterDateS = dateS;
    filterDateE = dateE;
    GetList();
  }

  private void FilterDates(DateRange range)
  {
    GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = await DbMainTransaction.GetListOfCustomer(customer.id, filterType, filterStatus, filterDateS, filterDateE);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}