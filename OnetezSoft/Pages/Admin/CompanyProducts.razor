@page "/admin/company/{Id}/products"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

@if (company != null)
{
  <section class="px-4">
    <ul class="menu_bar mb-4">
      <li>
        <a class="icon-text has-text-white is-active" href="/admin/company/@company.id/products">
          <span class="icon">
            <i class="material-icons-round is-size-5">apps</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Sản phẩm</span>
        </a>
      </li>
      <li>
        <a class="icon-text has-text-white" href="/admin/company/@company.id/users">
          <span class="icon">
            <i class="material-icons-round is-size-5">group_add</i>
          </span>
          <span class="is-size-7 has-text-weight-bold">Người dùng</span>
        </a>
      </li>
    </ul>

    <div class="mb-4">
      <_CompanyInfo company="company" members="members" products="productList" />
    </div>

    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-3">
      <li class="column">
        <h1 class="title is-5">@_title</h1>
      </li>
    </ul>

    <table class="table is-fullwidth is-vcentered is-responsive is_head_bg is-size-7">
      <thead>
        <tr>
          <th width="15%">Sản phẩm</th>
          <th>Số lượng sử dụng</th>
          <th width="15%">Ngày mua/gia hạn</th>
          <th width="15%">Ngày hết hạn</th>
          <th width="15%">Giá</th>
          <th width="100px" align="center">Trạng thái</th>
          <th width="80px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody class="has-text-weight-medium">
        @foreach (var item in productList)
        {
          var module = company.products.FirstOrDefault(x => x.id == item.id);
          <tr class="@(module == null ? "is_opacity" : "")">
            <td>
              <div class="icon-text">
                <span class="image is-40x40 mr-2">
                  <img src="@item.icon" alt="icon" />
                </span>
                <span class="has-text-weight-bold">@item.title</span>
              </div>
            </td>
            @if (module != null)
            {
              <td>
                @if (item.id == "storage")
                {
                  <span class="has-text-weight-bold">
                    @string.Format("{0:0.00}/{1}", (double)module.used/1024, module.total)
                  </span>
                  <span>GB (Gigabyte)</span>
                }
                else
                {
                  <span class="has-text-weight-bold">@module.used/@module.total</span>
                  <span>người dùng</span>
                }
              </td>
              <td>
                @string.Format("{0:dd/MM/yyyy}", new DateTime(module.start))
              </td>
              <td>
                <span class="@(module.end < DateTime.Today.Ticks ? "has-text-danger" : "")">
                  @string.Format("{0:dd/MM/yyyy}", new DateTime(module.end))
                </span>
              </td>
              <td>
                <span class="has-text-weight-bold">@string.Format("{0:0,0}", item.price)</span>
                <span>@(item.id == "storage" ? "VNĐ/GB/tháng" : "VNĐ/người/tháng")</span>
              </td>
              <td align="center">
                <a class="icon" @onclick="() => ActiveItem(item)">
                  <i class="material-icons-round is-size-5 has-text-@(module.active ? "success" : "grey")">
                    toggle_@(module.active ? "on" : "off")
                  </i>
                </a>
              </td>
            }
            else
            {
              <td colspan="5">Chưa kích hoạt</td>
            }
            <td align="center">
              <a class="icon has-text-dark" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                <i class="material-icons-round is-size-6">edit</i>
              </a>
            </td>
          </tr>
        }
      </tbody>
    </table>

    @if (productList.Count == 0)
    {
      <div class="has-text-grey has-text-centered py-6">
        Không tìm thấy dữ liệu phù hợp
      </div>
    }
  </section>

  @if (productEdit != null)
  {
    <section class="modal is-active">
      <div class="modal-background"></div>
      <section class="modal-card has_bg">
        <section class="modal-card-head is-warning"
                 style="background-image: url('/images/illustrations/editproduct.png')">
          <div class="modal-card-title">
            <div class="title">
              Thông tin sản phẩm
            </div>
            <div class="subtitle" @onclick="ProductCancel">
              Thay đổi thông số sản phẩm của khách hàng gồm
              <br />
              số người dùng tối đa, thời hạn.
            </div>
          </div>
          <a class="delete is-medium"></a>
        </section>
        <section class="modal-card-body">
          <div class="field">
            <label class="label has-text-weight-bold">Sản phẩm</label>
            <div class="control">
              <div class="icon-text">
                <span class="image is-40x40 mr-2">
                  <img src="@productInfo.icon" alt="icon" />
                </span>
                <span class="has-text-weight-bold">@productInfo.title</span>
              </div>
            </div>
          </div>

          <div class="field">
            @if (productEdit.id == "storage")
            {
              <label class="label has-text-weight-bold">Dung lượng lưu trữ <i>(Đơn vị: GB)</i></label>
              <div class="control has-icons-left">
                <input @bind="productEdit.total" type="number" class="input is_line font_14" min="1" />
                <span class="icon is-left has-text-black">
                  <i class="material-icons-round is-size-6">cloud</i>
                </span>
              </div>
            }
            else
            {
              <label class="label has-text-weight-bold">Số người sử dụng sản phẩm</label>
              <div class="control has-icons-left">
                <input @bind="productEdit.total" type="number" class="input is_line font_14" min="1" />
                <span class="icon is-left has-text-black">
                  <i class="material-icons-round is-size-6">person_add</i>
                </span>
              </div>
              <div class="is-italic is-size-7 mt-1">
                Số lượng nhân sự của tổ chức: @members.Count
              </div>
            }
          </div>

          <div class="field">
            <label class="label has-text-weight-bold">Thời hạn sử dụng (ngày hết hạn)</label>
            <div class="control has-icons-left">
              <div class="input is_line font_14">
                <DateRangePicker SingleDatePicker="true" @bind-StartDate="endDate" />
              </div>
              <span class="icon is-left has-text-black">
                <i class="material-icons-round is-size-6">event</i>
              </span>
            </div>
          </div>

          <div class="field">
            <label class="label has-text-weight-medium">Trạng thái</label>
            <div class="control">
              <label class="checkbox is-size-7">
                <input @bind="productEdit.active" type="checkbox" />
                <span>Kích hoạt</span>
              </label>
            </div>
          </div>
        </section>
        <section class="modal-card-foot is-right">
          <a class="button" @onclick="ProductCancel">
            <span class="icon">
              <i class="material-icons-round is-size-6">chevron_left</i>
            </span>
            <span class="is-size-7">Trở về</span>
          </a>
          <a class="button is-link" @onclick="ProductUpdate">
            <span class="icon">
              <i class="material-icons-round is-size-6">done</i>
            </span>
            <span class="is-size-7">Cập nhật</span>
          </a>
        </section>
      </section>
    </section>
  }
}
else
{
  <section class="p-4">
    <div class="has-text-grey has-text-centered py-6">
      Dữ liệu không tồn tại hoặc đã xóa
    </div>
  </section>
}

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }
  [Parameter]
  public string Id { get; set; }
  private string _title = "Sản phẩm sở hữu";
  private CompanyModel company = null;
  private List<UserModel> members = new();
  private List<ProductModel> productList = new();
  private CompanyModel.Product productEdit = null;
  private ProductModel productInfo = null;
  private DateTimeOffset? endDate = null;

  protected override async Task OnParametersSetAsync()
  {
    company = await DbMainCompany.Get(Id);
    if (company != null)
    {
      productList = await DbMainProduct.GetList();
      members = await DbUser.GetAll(company.id, globalService);
      // Cập nhật số lượng thành viên
      company.members = members.Count;
      await DbMainCompany.Update(company);
      await globalService.Update(company.id);
    }
  }

  private async Task<bool> ActiveItem(ProductModel item)
  {
    bool _success = true;
    try
    {
      var module = company.products.FirstOrDefault(x => x.id == item.id);
      if (module != null)
      {
        module.active = !module.active;
        await DbMainCompany.Update(company);
        await globalService.Update(company.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ActiveItem()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(ProductModel item)
  {
    productInfo = item;
    productEdit = company.products.FirstOrDefault(x => x.id == item.id);
    if (productEdit == null)
      productEdit = new() { id = item.id, active = true, total = members.Count };
    else
      endDate = new DateTime(productEdit.end);
  }

  private async Task<bool> ProductCancel()
  {
    bool _success = true;
    try
    {
      company = await DbMainCompany.Get(Id);
      productEdit = null;
      productInfo = null;
      endDate = null;
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ProductCancel()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ProductUpdate()
  {
    bool _success = true;
    try
    {
      if (productEdit.total <= 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập số người dùng sản phẩm");
      else if (endDate == null)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa nhập thời hạn sử dụng");
      else
      {
        productEdit.title = productInfo.title;
        productEdit.end = endDate.Value.DateTime.Ticks;
        // Thêm sản phẩm
        if (productEdit.start == 0)
        {
          productEdit.start = DateTime.Today.Ticks;
          company.products.Add(productEdit);
        }

        company = await DbMainCompany.Update(company);
        await globalService.Update(company.id);
        await ProductCancel();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ProductUpdate()", ex.ToString(), Layout.User.id);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}