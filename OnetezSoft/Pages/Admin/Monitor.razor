@page "/admin/monitor"
@layout LayoutAdmin
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

@{
  var activitiesPageList = new List<ActivitiesTrackingModel>();
  if (activitiesModuleCurrentPage == 1)
  {
    activitiesPageList = activities.Take(activitiesModuleSize).ToList();
  }
  else
  {
    activitiesPageList = activities.Skip(activitiesModuleSize * (activitiesModuleSize - 1)).Take(activitiesModuleSize).ToList();
  }

  activitiesPageList = activitiesPageList.OrderByDescending(x => x.update).ToList();
}

<section class="px-4">
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column">
      <h1 class="title is-5 is-clickable" @onclick="RunActivitiesChart">
        Số lượng user online theo thời gian
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="icon-text button is-primary" @onclick="RunActivitiesChart">
        <span class="icon">
          <span class="material-icons-outlined">
            refresh
          </span>
        </span>
        <span>
          Làm mới
        </span>
      </a>
    </li>
    <li class="column is-narrow">
      <Dropdown>
        <Trigger>
          <a class="icon-text">
            <span>
              @(selectedModule.IsEmpty() ? "Chọn trang" : selectedModule)
            </span>
            <span class="icon">
              <span class="material-icons-outlined">
                arrow_drop_down
              </span>
            </span>
          </a>
        </Trigger>
        <MenuContent>
          <a class="dropdown-item" @onclick="() => ChangeActivitiesPageFilter(string.Empty)">
            Tất cả
          </a>
          @foreach (var item in navList)
          {
            <a class="dropdown-item" @onclick="() => ChangeActivitiesPageFilter(item.name)">
              @item.name
            </a>
          }
        </MenuContent>
      </Dropdown>
    </li>
    <li class="column is-narrow">
      <_InputDate 
        @bind-Start="start" 
        @bind-End="end"
        OnRangeSelect="RunActivitiesChart"
        IsRange
        HasTime
        Format="dd/MM HH:mm"/>
    </li>
  </ul>

  @if (activities.Count > 0)
  {
    <div class="scrollx pb-2 mb-4">
      <canvas id="activitiesChart" height="300"></canvas>
    </div>
  }

@*  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column">
      <h1 class="title is-5">
        Danh sách truy cập và module
      </h1>
    </li>
  </ul>

  <div class="table-container scrolly" style="height:600px">
    <table class="table is-fullwidth is-vcentered">
      <colgroup>
      </colgroup>
      <thead>
        <tr>
          <th>Thời gian</th>
          <th>Tài khoản</th>
          <th>Module</th>
        </tr>
      </thead>
      <tbody>
        <Virtualize Items="activitiesPageList" TItem="ActivitiesTrackingModel" Context="x">
          <ItemContent>
            @foreach (var item in x.users)
            {
              var user = userList.FirstOrDefault(x => x.id == item.user);
              var company = companyList.FirstOrDefault(x => x.id == item.company);

              <tr>
                <td>
                  @x.update_string
                </td>
                <td>
                  <div class="user_item">
                    <img class="image is-36x36 mr-2" src="@(user == null ? "/images/avatar.png" : user.avatar)" alt="IMG">
                    <p>
                      @(user == null ? "Tài khoản bị xóa" : user.FullName)
                      <br />
                      <span class="text_1_line is-size-7">
                        @(company == null ? "Công ty bị xóa" : company.name)
                      </span>
                    </p>
                  </div>
                </td>
                <td>
                  @GetPageName(item.url)
                </td>
              </tr>
            }
          </ItemContent>
          <ChildContent>

          </ChildContent>
        </Virtualize>

      </tbody>
    </table>
  </div>
  <nav class="pagination is-right scrollx pb-2 is-small">
    <ul class="pagination-list" style="flex-wrap:nowrap">
      @for (var p = 1; p <= Shared.Paging(activitiesModuleTotal, activitiesModuleSize); p++)
      {
        var active = activitiesModuleCurrentPage == p ? "is-current" : "";
        <li>
          <a class="pagination-link @active" href="/admin/monitor?p=@p">@p</a>
        </li>
      }
    </ul>
  </nav>*@

  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
    <li class="column">
      <h1 class="title is-5">
        Tổ chức truy cập nhiều nhất
      </h1>
    </li>
  </ul>
  @if (activities.Count > 0)
  {
    <div class="scrollx pb-2 mb-4">
      <canvas id="companyChart"
              height="300"></canvas>
    </div>
  }

  @if (ConfigSystem.DeveloperId.Contains(Layout.User.id) || Layout.User.id == "237OABC8BA" || Layout.User.id == "237NA96E4D")
  {
    <ul class="columns is-vcentered is-multiline is-variable is-2 mb-4">
      <li class="column">
        <h1 class="title is-5">
          Error Logs
        </h1>
      </li>
    </ul>

    <div class="table-container scrolly" style="height:600px">
      <table class="table is-fullwidth is-vcentered">
        <colgroup>
        </colgroup>
        <thead>
          <tr>
            <th width="120">Thời gian</th>
            <th>Nội dung</th>
          </tr>
        </thead>
        <tbody>
          <Virtualize TItem="CatchLogModel" Context="item" Items="catchLogs" OverscanCount="10">
            <tr>
              <td>
                @item.create_string
              </td>
              <td>
                @item.message
              </td>
            </tr>
          </Virtualize>
        </tbody>
      </table>
    </div>
  }
</section>

@code {
  [CascadingParameter]
  public LayoutAdmin Layout { get; set; }

  private string _title = "Theo dõi chỉ số";
  private long start;
  private long end;
  private List<ActivitiesTrackingModel> activities = new();
  private List<NavModel> navList = new();
  private List<UserModel> userList = new();
  private List<CompanyModel> companyList = new();
  private string selectedModule;

  private List<CatchLogModel> catchLogs = new();

  private int activitiesTimeFilter = 7;
  private int activitiesModuleSize = 200;
  private int activitiesModuleCurrentPage = 1;
  private int activitiesModuleTotal = 0;

  protected override async Task OnInitializedAsync()
  {
    userList = await DbMainUser.GetAll();
    companyList = await DbMainCompany.GetAll();

    var now = DateTime.Now;
    now = now.AddHours(-2);
    start = Math.Max(now.Ticks, DateTime.Today.Ticks);
    end = DateTime.Today.AddDays(1).AddTicks(-1).Ticks;

    navList = ModuleService.GetList(null, null, true);
  }

  protected override async Task OnParametersSetAsync()
  {
    var uri = navigation.ToAbsoluteUri(navigation.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("p", out var outPage))
      activitiesModuleCurrentPage = Convert.ToInt32(outPage);

    if (activitiesModuleCurrentPage == 0)
      activitiesModuleCurrentPage = 1;
  }

  protected override async Task OnAfterRenderAsync(bool first)
  {
    if (first)
    {
      await RunActivitiesChart();
    }
  }

  private async Task RunActivitiesChart()
  {
    try
    {
      //activities = await DbMainActivitiesTracking.GetListActivities();
      activities = activities.OrderBy(x => x.update).ToList();

      // catchLogs = await DbMainActivitiesTracking.GetAll();
      catchLogs = catchLogs.OrderByDescending(x => x.create).ToList();

      if (activities.Count == 0)
        return;

      if (activitiesTimeFilter != 0)
      {
        activities = activities.Where(x => x.update >= start && x.update <= end).ToList();
      }

      if (!selectedModule.IsEmpty())
      {
        activities = activities.Where(x => x.users.Any(y => GetPageName(y.url) == selectedModule)).ToList();
      }

      activitiesModuleTotal = activities.Count;

      // For activities Chart
      var activitiesGroup = activities.OrderBy(x => x.update).ToList();

      int chartCount = activitiesGroup.Count;

      var chartLabel = new string[chartCount];
      var chartDatas = new int[chartCount];

      var count = 0;
      foreach (var group in activitiesGroup)
      {
        chartLabel[count] = string.Format("{0}", group.update_string);
        chartDatas[count] = group.users.Count();
        count++;
      }

      await JSRuntime.InvokeAsync<string>("runChartLineAdmin", "Truy cập theo thời gian", chartLabel, chartDatas, "activitiesChart");
      //

      // For companyChart
      var flattenActivities = new List<ActivitiesTrackingModel>();
      activities.ForEach(x =>
      {
        x.users.ForEach(y =>
        {
          if (flattenActivities.FirstOrDefault(z => z.update_string == x.update_string && z.users.Any(u => u.company == y.company)) == null)
          {
            flattenActivities.Add(new()
              {
                id = x.id,
                update = x.update,
                users = new() { new() { company = y.company, url = y.url, user = y.user } },
              });
          }
        });
      });
      var companyGroup = flattenActivities.GroupBy(x => x.users.FirstOrDefault().company).ToList();

      chartCount = companyGroup.Count;

      chartLabel = new string[chartCount];
      chartDatas = new int[chartCount];

      count = 0;
      foreach (var group in companyGroup)
      {
        var userInGroup = group.GroupBy(x => x.users.FirstOrDefault().user).ToList();
        var phase = 0;
        foreach (var user in userInGroup)
        {
          var phasePerUser = 0;
          var sorted = user.OrderBy(x => x.update).ToList();

          if (sorted.Count > 0)
          {
            phasePerUser = 1;
            var item = sorted[0].update;
            foreach (var userPhase in sorted)
            {
              if (userPhase.update - item > (TimeSpan.TicksPerMinute * 5))
              {
                phasePerUser++;
              }
              item = userPhase.update;
            }
          }
          phase += phasePerUser;
        }
        var label = string.Format("{0}", GetCompanyName(group.Key));
        var mostModule = group.GroupBy(x => x.users.FirstOrDefault().url).OrderByDescending(x => x.Count()).FirstOrDefault();
        label += " - Số nhân viên sử dụng: " + userInGroup.Count;
        label += " - Trung bình mỗi nhân viên: " + Math.Round((double)(phase / userInGroup.Count), 1);
        label += " - Module dùng nhiều nhất: " + GetPageName(mostModule.Key);
        chartLabel[count] = label;
        chartDatas[count] = phase;
        count++;
      }

      await JSRuntime.InvokeAsync<string>("runChartLineAdmin", "Số lần truy cập", chartLabel, chartDatas, "companyChart");
      //

      StateHasChanged();
    }
    catch (Exception ex)
    {
      return;
    }
  }

  private string GetPageName(string path)
  {
    if (path.IsEmpty())
      return string.Empty;

    if (path.Contains("homepage"))
      return "Trang chủ";

    path = path.Split("/").FirstOrDefault();

    var page = navList.FirstOrDefault(x =>
    {
      var navPath = x.link.Split("/").FirstOrDefault();

      return navPath == path;
    });

    return page == null ? string.Empty : page.name;
  }

  private string GetCompanyName(string id)
  {
    var company = companyList.FirstOrDefault(x => x.id == id);

    return company == null ? "Tổ chức bị xóa" : company.name;
  }

  private async Task ChangeActivitiesTimeFilter(ChangeEventArgs e)
  {
    activitiesTimeFilter = Convert.ToInt32(e.Value);

    DateTime from = DateTime.Today;
    DateTime to = DateTime.Today;

    if (activitiesTimeFilter != 0)
    {
      if (activitiesTimeFilter == 7)
      {
        from = DateTime.Today;
        to = DateTime.Today.AddDays(1).AddTicks(-1);

      }
      else if (activitiesTimeFilter != 0)
      {
        Shared.GetTimeSpan(activitiesTimeFilter, out from, out to);
        to = to.Date.AddDays(1).AddTicks(-1);
      }
      start = from.Ticks;
      end = (to + new TimeSpan(0, 0, 59, 59, 999)).Ticks;
    }

    await RunActivitiesChart();
  }

  private async Task ChangeActivitiesDateTimeFilter()
  {
    end = (new DateTime(end) + new TimeSpan(0, 0, 0, 59, 999)).Ticks;
    await RunActivitiesChart();
  }

  private async Task ChangeActivitiesPageFilter(string page)
  {
    selectedModule = page;
    await RunActivitiesChart();
  }

  private async Task ChangeActivitiesPageFilter(int page)
  {
    activitiesModuleCurrentPage = page;
    await RunActivitiesChart();
  }
}
