@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<div class="is-size-6">
  <ul class="columns is-multiline">
    <li class="column is-one-fifth">
      <div class="has-text-weight-bold has-text-info py-2">Nhập tiêu đề góp ý:</div>
    </li>
    <li class="column is-four-fifths">
      <input @bind="feedback.name" type="text" class="input is_bg is-size-6" placeholder="Nhập tiêu đề.." />
    </li>
    <li class="column is-one-fifth">
      <div class="has-text-weight-bold has-text-info py-2">Nhập nội dung góp ý:</div>
    </li>
    <li class="column is-four-fifths">
      <textarea @bind="feedback.content" class="textarea is_bg is-size-6" placeholder="Nhập nội dung ..." rows="10" />
    </li>
    <li class="column is-one-fifth">
      <div class="has-text-weight-bold has-text-info py-2">Đính kèm file:</div>
    </li>
    <li class="column is-four-fifths">
      <div class="control has-icons-left @(_upload ? "is-loading" : "")">
        <InputFile OnChange="Upload" class="input is_bg is-size-6"
                   accept=".pdf,.png,.jpg,.jpeg,.mp4,.doc,.docx,.xls,.xlsx" multiple />
        <span class="icon is-left has-text-info">
          <i class="material-icons-outlined is-size-5">upload</i>
        </span>
      </div>
      @foreach (var file in feedback.files)
      {
        var fileName = Files.FileName(file);
        <div class="icon-text has-text-link pt-1">
          <span class="icon">
            <i class="material-icons-outlined is-size-6">description</i>
          </span>
          <a class="font_14 has-text-weight-semibold" href="@file" target="_blank">@fileName</a>
          <a class="icon has-text-danger" @onclick="() => feedback.files.Remove(file)" title="Xoá">
            <i class="material-icons-outlined is-size-6">close</i>
          </a>
        </div>
      }
      <div class="is-italic font_14 pt-3 has-text-grey">
        Tập tin đính kèm có dung lượng tối đa 2MB, giới hạn tối đa 5 file 1 lần góp ý.
        <br />
        Định dạng hỗ trợ: PDF, PNG, JPG, JPEG, MP4, DOC, DOCX, XLS, XLSX
      </div>
    </li>
    <li class="column is-full">
      <div class="field is-grouped is-grouped-right">
        <div class="control">
          <a class="button is-info" @onclick="Cancel">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">cancel</i>
            </span>
            <span>Hủy bỏ</span>
          </a>
        </div>
        <div class="control">
          <a class="button is-link" @onclick="Create">
            <span class="icon">
              <i class="material-icons-outlined is-size-6">send</i>
            </span>
            <span>Gửi góp ý</span>
          </a>
        </div>
      </div>
    </li>
  </ul>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public EventCallback<bool> OnCreate { get; set; }

  private bool success = false;
  private string _message = string.Empty;
  private bool _upload = false;
  private long MaxFileSize = 2 * 1024000;

  private FeedbackModel feedback = new() { files = new() };

  private async Task Upload(InputFileChangeEventArgs e)
  {
    _upload = true;
    success = true;
    var filesUpload = e.GetMultipleFiles();
    if (filesUpload.Count < 6)
    {
      _message = "Đang tải file lên....";
      foreach (var file in filesUpload)
      {
        try
        {
          if (feedback.files.Count < 5)
          {
            if (Files.CheckExtension(file.Name, null))
            {
              if (file.Size <= MaxFileSize)
              {
                var fileStream = new StreamContent(file.OpenReadStream(MaxFileSize));
                var fileLink = await Files.SaveFileAsync(fileStream, file.Name);
                feedback.files.Add(fileLink);
              }
              else
              {
                _message += $"<br/>{file.Name}: dung lượng file lớn hơn 2 MB";
                success = false;
              }
            }
            else
            {
              _message += $"<br/>{file.Name}: định dạng file không hợp lệ";
              success = false;
            }
          }
          else
          {
            _message = $"Đã đủ số lượng file cho phép tải";
            success = false;
          }
        }
        catch (Exception ex)
        {
          _message += $"{file.Name}: {ex.ToString()}";
        }
      }
      _upload = false;
      if (_message == "Đang tải file lên....")
        _message = string.Empty;
    }
    else
    {
      _upload = false;
      success = false;
      _message = "Chỉ cho phép tải lên 5 file đính kèm !";
    }

    if(!success)
      await JSRuntime.InvokeVoidAsync("tagline", false, _message);
  }

  private async Task Cancel()
  {
    feedback = new() { files = new() };
    await OnCreate.InvokeAsync(false);
  }

  private async Task<bool> Create()
  {
    bool _success = true;
    try
    {
      success = false;
      _message = string.Empty;

      if (string.IsNullOrEmpty(feedback.name) || string.IsNullOrEmpty(feedback.content))
      {
        _message = "Nhập đủ tiêu đề và nội dung !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else
      {
        feedback.user_id = Layout.User.id;
        feedback.user_name = Layout.User.FullName;
        feedback.user_avatar = Layout.User.avatar;
        feedback.company_id = Layout.Company.id;
        feedback.company_name = Layout.Company.name;

        DbMainFeedback.Create(feedback);

        feedback = new() { files = new() };

        await OnCreate.InvokeAsync(true);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Create()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}