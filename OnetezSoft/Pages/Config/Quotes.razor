@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.other)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
    <li class="column is-full">
      <h1 class="title is-5 has-text-info">
        CẤU HÌNH TRÍCH DẪN - CHÂM NGÔN
      </h1>
    </li>
    <li class="column">
      <input @bind="current.name" type="text" class="input" placeholder="Nhập nội dung trích dẫn - châm ngôn..." />
    </li>
    <li class="column is-one-quarter">
      <input @bind="current.author" type="text" class="input" placeholder="Tác giả..." />
    </li>
    <li class="column is-narrow">
      <a class="button is-link" @onclick="Update">
        @if (string.IsNullOrEmpty(current.id))
        {
          <span class="icon">
            <span class="material-icons-outlined is-size-6">add</span>
          </span>
          <span>Thêm mới</span>
        }
        else
        {
          <span class="icon">
            <span class="material-icons-outlined is-size-6">done</span>
          </span>
          <span>Cập nhật</span>
        }
      </a>
      <a class="button" @onclick="() => current = new()">
        <span>Hủy</span>
      </a>
    </li>
  </ul>
  <div class="inner_section scrolly" style="flex:1">
    <table class="table is-fullwidth is-responsive is-vcentered sticky only_desktop" style="width:100%">
      <thead>
        <tr>
          <th class="sticky last" style="left:0">Trích dẫn - châm ngôn</th>
          <th class="" width="200px">Tác giả</th>
          <th class="" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          <tr>
            <td style="left:0" class="sticky last">
              @item.name
            </td>
            <td>
             <label class="td-label">
               Tác giả
             </label>
             <div class="td-value">
                @item.author
             </div>
            </td>
            <td>
              <label class="td-label">
                Xử lý
              </label>
              <div class="td-value">
                <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    edit
                  </i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    delete
                  </i>
                </a>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool success = false;
  private string _message = string.Empty;
  private string _title = "Cấu hình trích dẫn - châm ngôn";

  private QuotesModel current = new();
  private List<QuotesModel> dataList = new();

  protected override async Task OnInitializedAsync()
  {
    dataList = await DbQuotes.GetList(Layout.Company.id);
    _loaded = true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    _message = string.Empty;
  }

  private async Task<bool> DeleteItem(QuotesModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbQuotes.Delete(Layout.Company.id, item.id);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(QuotesModel item)
  {
    current = item;
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      success = false;
      _message = string.Empty;

      if (string.IsNullOrEmpty(current.name) || string.IsNullOrEmpty(current.author))
      {
        _message = "Bạn cần nhập nội dung và tác giả !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else
      {
        if (string.IsNullOrEmpty(current.id))
        {
          current = await DbQuotes.Create(Layout.Company.id, current);
          dataList.Insert(0, current);
        }
        else
        {
          current = await DbQuotes.Update(Layout.Company.id, current);
        }
        current = new();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}