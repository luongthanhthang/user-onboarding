@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.store)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        QUẢN LÝ CỬA HÀNG
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-link" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <ul class="columns is-variable is-2 mb-2">
    <li class="column">
      <input @bind="filterKey" type="text" class="input" placeholder="Từ khóa: tên sản phẩm..." />
    </li>
    <li class="column is-one-third is-hidden">
      <div class="select is-fullwidth">
        <select @onchange="ChangeDepartment" class="is-family-code">
          @foreach (var item in departments)
          {
            <option value="@item.id">@item.name</option>
          }
        </select>
      </div>
    </li>
    <li class="column is-narrow">
      <a class="button is-link is-outlined" @onclick="Search">
        <span class="icon">
          <i class="material-icons-outlined">search</i>
        </span>
        <span>Tìm kiếm</span>
      </a>
    </li>
  </ul>
  <div id="scrollbox" class="scrolly table-container inner_section" style="flex:1">
    <table class="table is-fullwidth is-vcentered is-responsive sticky only_desktop">
      <thead>
        <tr>
          <th class="sticky" style="left:0" width="60px">Hình</th>
          <th class="sticky last" style="left:60px" width="250px">Sản phẩm</th>
          <th class="" width="200px">Danh mục</th>
          <th class="" width="80px">Số sao</th>
          <th class="" width="300px">Mô tả</th>
          <th class="" width="80px" align="center">Hiển thị</th>
          <th class="" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          var category = Layout.Company.gift_category.SingleOrDefault(x => x.id == item.category);

          <tr>
            <td class="sticky" style="left:0">
              <a class="image is-square" href="@item.image" target="_blank">
                <img src="@item.image" alt="IMG" />
              </a>
            </td>
            <td class="sticky last" style="left:60px">
              <label class="td-label">Sản phẩm</label>
              <div class="td-value">
                <a class="has-text-weight-semibold" @onclick="() => EditItem(item)">
                  @item.name
                </a>
              </div>
            </td>
            <td>
              <label class="td-label">Danh mục</label>
              <div class="td-value">
                @(category != null ? category.name : "")
              </div>
            </td>
            <td>
              <label class="td-label">Số sao</label>
              <div class="td-value">
                @if (item.price_sale > 0)
                {
                  <span class="has-text-weight-semibold">@item.price_sale</span>
                  <del>@item.price_list</del>
                }
                else
                {
                  <span class="has-text-weight-semibold">@item.price_list</span>
                }
              </div>
            </td>
            <td>
              <label class="td-label">Mô tả</label>
              <div class="td-value">
                <div class="text_1_line" onclick="toggleText(this)">
                  @((MarkupString)Shared.GetLinks(item.description))
                </div>
              </div>
            </td>
            <td align="center">
              <label class="td-label">Hiển thị</label>
              <div class="td-value">
                <a class="icon" @onclick="() => ToggleItem(item)">
                  @if (item.show)
                  {
                    <span class="material-icons-outlined is-size-4 has-text-success">
                      toggle_on
                    </span>
                  }
                  else
                  {
                    <span class="material-icons-outlined is-size-4 has-text-black">
                      toggle_off
                    </span>
                  }
                </a>
              </div>
            </td>
            <td align="center">
              <label class="td-label">Xử lý</label>
              <div class="td-value">
                <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    edit
                  </i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    delete
                  </i>
                </a>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@if (current != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(current.id) ? "Thêm sản phẩm mới" : "Chỉnh sửa sản phẩm")
        </div>
        <a class="delete" @onclick="() => current = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tên sản phẩm *</label>
              <div class="control">
                <input @bind="current.name" type="text" class="input" />
              </div>
            </div>
          </li>
          <li class="column is-two-thirds">
            <div class="field">
              <label class="label">Hình ảnh</label>
              <div class="field has-addons">
                <div class="control">
                  <a class="image is-square">
                    <img src="@current.image" />
                  </a>
                </div>
                <div class="control is-expanded">
                  <input @bind="current.image" class="input" type="text" placeholder="Nhập link hình..." />
                </div>
                <FileUpload Path="gift/product" Cloud Accept="image/*" Size="400" OnUpload="x => current.image = x[0]" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Danh mục</label>
              <div class="control">
                <div class="select is-fullwidth">
                  <select @bind="current.category">
                    <option value="0">Chọn</option>
                    @foreach (var sl in Layout.Company.gift_category)
                    {
                      <option value="@sl.id">@sl.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Số sao *</label>
              <div class="control">
                <input @bind="current.price_list" type="number" class="input" min="0" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Khuyến mãi</label>
              <div class="control">
                <input @bind="current.price_sale" type="number" class="input" min="0" />
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thuộc tính</label>
              <div class="control pt-2">
                <label class="checkbox">
                  <input @bind="current.show" type="checkbox" />
                  Hiển thị
                </label>
              </div>
            </div>
          </li>
          <li class="column is-full ">
            <div class="field">
              <label class="label">Mô tả</label>
              <div class="control">
                <textarea @bind="current.description" class="textarea" rows="3" />
              </div>
            </div>
          </li>
        </ul>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => current = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Quản lý cửa hàng";
  private List<GiftProductModel> dataList = new();
  private GiftProductModel current = null;
  private List<DepartmentModel> departments = new();
  private string filterKey = string.Empty;
  private string filterDepartment = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    var departmentAll = await DbDepartment.GetAll(Layout.Company.id);
    departments = departmentAll.Where(x => x.parent == null).ToList();
    if (departments.Count == 1)
      departments = departmentAll.Where(x => x.parent == departments[0].id).ToList();

    if (departments.Count > 0)
      filterDepartment = departments[0].id;

    await Search();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await JSRuntime.InvokeVoidAsync("dragScrollX");
  }

  private async Task<bool> Search()
  {
    bool _success = true;
    try
    {
      dataList = await DbGiftProduct.GetList(Layout.Company.id, filterKey, filterDepartment);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Search()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task ChangeDepartment(ChangeEventArgs e)
  {
    filterDepartment = e.Value.ToString();
    await Search();
  }

  private async Task<bool> DeleteItem(GiftProductModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbGiftProduct.Delete(Layout.Company.id, item.id);

      Files.DeleteFile(item.image);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ToggleItem(GiftProductModel item)
  {
    bool _success = true;
    try
    {
      item.show = !item.show;
      await DbGiftProduct.Update(Layout.Company.id, item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ToggleItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(GiftProductModel item)
  {
    if (item == null)
    {
      current = new()
        {
          show = true,
          department = filterDepartment,
          image = "/images/default.jpg"
        };
    }
    else
    {
      current = item;
    }
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (Shared.IsEmpty(current.name))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa nhập tên sản phẩm!");
      else if (Shared.IsEmpty(current.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa chọn hình sản phẩm!");
      else if (current.category == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa chọn danh mục!");
      else if (current.price_list == 0)
        await JSRuntime.InvokeVoidAsync("tagline", false, "Chưa nhập số sao!");
      else
      {
        if (string.IsNullOrEmpty(current.id))
        {
          current = await DbGiftProduct.Create(Layout.Company.id, current);
          dataList.Insert(0, current);
        }
        else
        {
          current = await DbGiftProduct.Update(Layout.Company.id, current);
        }
        current = null;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}