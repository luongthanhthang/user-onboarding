@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.okrs)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info is-uppercase">
        Danh sách chu kỳ
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1">
    <table class="table is-fullwidth is-vcentered is-responsive">
      <thead>
        <tr>
          <th class="pt-0">Tên chu kỳ</th>
          <th class="pt-0" width="20%">Ngày bắt đầu</th>
          <th class="pt-0" width="20%">Ngày kết thúc</th>
          <th class="pt-0" width="20%">Trạng thái</th>
          <th class="pt-0" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          <tr>
            <td>
              <span class="has-text-weight-semibold">@item.name</span>
            </td>
            <td>
              <label class="td-label">Bắt đầu</label>
              <div class="td-value">
                @string.Format("{0:dd/MM/yyyy}", new DateTime(item.start))
              </div>
            </td>
            <td>
              <label class="td-label">Kết thúc</label>
              <div class="td-value">
                @string.Format("{0:dd/MM/yyyy}", new DateTime(item.end))
              </div>
            </td>
            <td>
              <label class="td-label">Trạng thái</label>
              <div class="td-value">
                @if (item.done)
                {
                  <span class="tag is-link">Đã hoàn thành</span>
                }
                else
                {
                  <span class="tag is-success">Đang thực hiện</span>
                }
              </div>
            </td>
            <td align="center">
              <label class="td-label">Xử lý</label>
              <div class="td-value">
                <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    edit
                  </i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    delete
                  </i>
                </a>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@if (current != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(current.id) ? "Tạo chu kỳ mới" : "Chỉnh sửa chu kỳ")
        </div>
        <a class="delete" @onclick="() => current = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body">
        <div class="field">
          <label class="label">Tên chu kỳ *</label>
          <div class="control">
            <input @bind="current.name" type="text" class="input" />
          </div>
        </div>
        <div class="field">
          <label class="label">Trạng thái</label>
          <div class="control">
            @if (current.done)
            {
              <label class="radio">
                <input type="radio" name="status" @onclick="() => ChangeStatus(false)" />
                <span class="ml-1">Đang thực hiện</span>
              </label>
              <label class="radio mr-3">
                <input type="radio" name="status" @onclick="() => ChangeStatus(true)" checked />
                <span class="ml-1">Đã hoàn thành</span>
              </label>
            }
            else
            {
              <label class="radio">
                <input type="radio" name="status" @onclick="() => ChangeStatus(false)" checked />
                <span class="ml-1">Đang thực hiện</span>
              </label>
              <label class="radio mr-3">
                <input type="radio" name="status" @onclick="() => ChangeStatus(true)" />
                <span class="ml-1">Đã hoàn thành</span>
              </label>
            }
          </div>
        </div>
        <div class="field is-grouped" style="margin-bottom:320px">
          <div class="control">
            <label class="label">Ngày bắt đầu *</label>
            <_InputDate @bind-Start="StartDate" />
          </div>
          <div class="control is-expanded is-hidden-mobile">
          </div>
          <div class="control">
            <label class="label">Ngày kết thúc *</label>
            <_InputDate @bind-Start="EndDate" IsRight/>
          </div>
        </div>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => current = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  private bool _loaded = false;
  private bool success = false;
  private string _message = string.Empty;
  private string _title = "Cấu hình chu kỳ";

  private List<OkrConfigModel.Cycle> dataList = new();
  private OkrConfigModel.Cycle current = null;
  private OkrConfigModel config = new();
  long StartDate { get; set; }
  long EndDate { get; set; }

  protected override async Task OnInitializedAsync()
  {
    config = await DbOkrConfig.Get(Layout.Company.id);
    dataList = config.cycles;
    _loaded = true;
  }

  private async Task<bool> DeleteItem(OkrConfigModel.Cycle item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      config.cycles = dataList;
      await DbOkrConfig.Update(Layout.Company.id, config);

      await Layout.RefreshData();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(OkrConfigModel.Cycle item)
  {
    if (item == null)
    {
      current = new()
        {
          start = Convert.ToDateTime(DateTime.Now.ToShortDateString()).Ticks,
          end = Convert.ToDateTime(DateTime.Now.ToShortDateString()).Ticks,
        };
    }
    else
    {
      current = item;
    }
    StartDate = current.start;
    EndDate = current.end;
  }

  private void ChangeStatus(bool done)
  {
    current.done = done;
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      success = false;
      _message = string.Empty;

      if (string.IsNullOrEmpty(current.name) || StartDate == 0 || EndDate == 0)
      {
        _message = "Nhập các trường bắt buộc (*)";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else if (StartDate > EndDate)
      {
        _message = "Ngày bắt đầu không thể lớn hơn ngày kết thúc !";
        await JSRuntime.InvokeVoidAsync("tagline", false, _message);
        _message = string.Empty;
      }
      else
      {
        current.start = StartDate;
        current.end = EndDate;

        if (string.IsNullOrEmpty(current.id))
        {
          current.id = Mongo.RandomId();
          dataList.Add(current);
        }

        dataList = dataList.OrderByDescending(x => x.start).ToList();
        config.cycles = dataList;
        await DbOkrConfig.Update(Layout.Company.id, config);

        current = null;

        await Layout.RefreshData();
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}