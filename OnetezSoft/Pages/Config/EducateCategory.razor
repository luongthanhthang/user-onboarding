@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.educate)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-link" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <ul class="columns is-variable is-2 mb-2">
    <li class="column">
      <input @bind="filterKey" type="text" class="input" placeholder="Từ khóa: tên danh mục..." />
    </li>
    <li class="column is-narrow">
      <a class="button is-link is-outlined" @onclick="GetList">
        <span class="icon">
          <i class="material-icons-outlined">search</i>
        </span>
        <span>Tìm kiếm</span>
      </a>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1">
    <table class="table is-fullwidth is-vcentered is-responsive sticky only_desktop" style="widows:100%">
      <thead>
        <tr>
          <th class="sticky" width="60px">Hình</th>
          <th class="sticky">Tên danh mục</th>
          <th class="" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          <tr>
            <td align="center">
              <a class="image is-square" href="@item.image" target="_blank">
                <img src="@item.image" alt="IMG" />
              </a>
            </td>
            <td>
              <label class="td-label">Tên danh mục</label>
              <div class="td-value">
                <a class="has-text-weight-semibold" @onclick="() => EditItem(item)">
                  @item.name
                </a>
              </div>
            </td>
            <td align="center">
              <label class="td-label">Xử lý</label>
              <div class="td-value">
                <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    edit
                  </i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    delete
                  </i>
                </a>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@if (model != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(model.id) ? "Thêm danh mục mới" : "Chỉnh sửa danh mục")
        </div>
        <a class="delete" @onclick="() => model = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body">
        <div class="field">
          <label class="label">Tiêu đề *</label>
          <div class="control">
            <input @bind="model.name" type="text" class="input" id="input_name" />
          </div>
        </div>
        <div class="field">
          <label class="label">Hình ảnh *</label>
          <div class="field has-addons">
            <div class="control">
              <a class="image is-square">
                <img src="@model.image" />
              </a>
            </div>
            <div class="control is-expanded">
              <input @bind="model.image" class="input" type="text" placeholder="Nhập link hình..." />
            </div>
            <FileUpload Path="education/category" Cloud Accept="image/*" Size="400" OnUpload="x => model.image = x[0]" />
          </div>
        </div>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => model = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Quản lý danh mục đào tạo";
  private EducateCategoryModel model = null;
  private List<EducateCategoryModel> dataList = new();
  private string filterKey = string.Empty;

  protected override void OnInitialized()
  {
    GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = await DbEducateCategory.GetList(Layout.Company.id, filterKey);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteItem(EducateCategoryModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbEducateCategory.Delete(Layout.Company.id, item.id);
      Files.DeleteFile(item.image);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task EditItem(EducateCategoryModel item)
  {
    if (item == null)
    {
      model = new() { image = "/images/default.jpg" };
    }
    else
    {
      model = item;
    }
    await JSRuntime.InvokeVoidAsync("setFocus", "input_name");
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (StringHelper.IsEmpty(model.name) || StringHelper.IsEmpty(model.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập các trường bắt buộc (*)");
      else
      {
        if (string.IsNullOrEmpty(model.id))
        {
          model = await DbEducateCategory.Create(Layout.Company.id, model);
          dataList.Insert(0, model);
        }
        else
        {
          model = await DbEducateCategory.Update(Layout.Company.id, model);
        }
        dataList = dataList.OrderBy(x => x.name).ToList();
        model = null;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}