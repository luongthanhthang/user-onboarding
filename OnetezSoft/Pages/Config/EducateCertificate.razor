@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.educate)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info is-uppercase">
        @_title
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-link" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <ul class="columns is-variable is-2 mb-2">
    <li class="column">
      <input @bind="filterKey" type="text" class="input" placeholder="Từ khóa: tên chứng chỉ..." />
    </li>
    <li class="column is-narrow">
      <a class="button is-link is-outlined" @onclick="GetList">
        <span class="icon">
          <i class="material-icons-outlined">search</i>
        </span>
        <span>Tìm kiếm</span>
      </a>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1">
    <table class="table is-fullwidth is-vcentered is-responsive sticky only_desktop">
      <thead>
        <tr>
          <th class="sticky" width="150px">Hình</th>
          <th class="sticky">Tên mẫu chứng chỉ</th>
          <th class="" width="10%">Ngày đăng</th>
          <th class="" width="10%">Áp dụng</th>
          <th class="" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in dataList)
        {
          <tr>
            <td>
              <a class="image" href="@item.image" target="_blank">
                <img src="@item.image" alt="IMG" />
              </a>
            </td>
            <td>
              <label class="td-label">Tên mẫu</label>
              <div class="td-value">
                <a class="has-text-weight-semibold" @onclick="() => EditItem(item)">
                  @item.name
                </a>
              </div>
            </td>
            <td>
              <label class="td-label">Ngày đăng</label>
              <div class="td-value">
                @string.Format("{0:dd/MM/yyyy}", new DateTime(item.date))
              </div>
            </td>
            <td align="center">
              <label class="td-label">Áp dụng</label>
              <div class="td-value">
                <a class="icon" @onclick="() => ToggleItem(item)">
                  @if (item.pin)
                  {
                    <span class="material-icons-outlined is-size-4 has-text-success">
                      check_box
                    </span>
                  }
                  else
                  {
                    <span class="material-icons-outlined is-size-4 has-text-black">
                      check_box_outline_blank
                    </span>
                  }
                </a>
              </div>
            </td>
            <td align="center">
              <label class="td-label">Xử lý</label>
              <div class="td-value">
                <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    edit
                  </i>
                </a>
                <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                  <i class="material-icons-outlined is-size-5">
                    delete
                  </i>
                </a>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@if (current != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card" style="width: 880px;">
      <form @onsubmit="Update" class="modal-card-body p-0">
        <ul class="columns is-gapless">
          <li class="column is-narrow">
            <div style="width: 330px; padding: 25px 25px 20px;">
              <div class="field">
                <label class="label">Tên mẫu chứng chỉ</label>
                <div class="control">
                  <input @bind="current.name" type="text" class="input" id="input_name" />
                </div>
              </div>
              <div class="field">
                <label class="label">Mẫu nền chứng chỉ: 500x360px</label>
                <div class="field has-addons">
                  <div class="control">
                    <a class="image is-square">
                      <img src="@current.image" />
                    </a>
                  </div>
                  <div class="control is-expanded">
                    <input @bind="current.image" class="input" type="text" placeholder="Nhập link hình..." />
                  </div>
                  <FileUpload Accept="image/*" Path="education/certificate" Cloud Size="400" OnUpload="x => current.image = x[0]" />
                </div>
              </div>
              <div class="field is-grouped">
                <div class="control is-expanded">
                  <div class="field has-addons">
                    <div class="control">
                      <label class="button is-static">Màu chữ</label>
                    </div>
                    <div class="control">
                      <input @bind="current.color" type="text" class="input" placeholder="VD: #565C7C" />
                    </div>
                  </div>
                </div>
              </div>
              <div class="field">
                <div class="control">
                  <label class="checkbox">
                    <input type="checkbox" @bind="current.pin" />
                    <span>Áp dụng mẫu này</span>
                  </label>
                </div>
              </div>
              <div class="field is-grouped mt-5">
                <div class="control">
                  <a class="button is-link" @onclick="Update">
                    <span class="icon">
                      <i class="material-icons-outlined is-size-6">done</i>
                    </span>
                    <span>Cập nhật</span>
                  </a>
                </div>
                <div class="control">
                  <a class="button" @onclick="() => current = null">
                    Hủy
                  </a>
                </div>
              </div>
            </div>
          </li>
          <li class="column has_bg">
            <div style="padding: 25px;">
              <div class="has-text-weight-semibold">BẢN XEM TRƯỚC</div>
              <hr />
              <div class="certificate" style="background-image: url('@current.image'); color: @current.color">
                <div class="is_user">Tên học viên</div>
                <div class="is_course">Tên khóa học tại đây</div>
                <div class="is_date">@DateTime.Today.ToString("dd.MM.yyyy")</div>
              </div>
            </div>
          </li>
        </ul>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Quản lý mẫu chứng chỉ";
  private EducateCertificateModel current = null;
  private List<EducateCertificateModel> dataList = new();
  private string filterKey = string.Empty;

  protected override void OnInitialized()
  {
    GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = await DbEducateCertificate.GetList(Layout.Company.id, filterKey);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> DeleteItem(EducateCertificateModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbEducateCertificate.Delete(Layout.Company.id, item.id);
      Files.DeleteFile(item.image);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ToggleItem(EducateCertificateModel item)
  {
    bool _success = true;
    try
    {
      if (!item.pin)
      {
        foreach (var other in dataList)
        {
          if (other.id != item.id && other.pin)
          {
            other.pin = false;
            await DbEducateCertificate.Update(Layout.Company.id, other);
          }
        }
      }
      item.pin = !item.pin;
      item = await DbEducateCertificate.Update(Layout.Company.id, item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ToggleItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task EditItem(EducateCertificateModel item)
  {
    if (item == null)
    {
      current = new();
    }
    else
    {
      current = item;
    }
    await JSRuntime.InvokeVoidAsync("setFocus", "input_name");
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (StringHelper.IsEmpty(current.name) || StringHelper.IsEmpty(current.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Nhập các trường bắt buộc (*)");
      else
      {
        if (string.IsNullOrEmpty(current.id))
        {
          current = await DbEducateCertificate.Create(Layout.Company.id, current);
          dataList.Insert(0, current);
        }
        else
        {
          current = await DbEducateCertificate.Update(Layout.Company.id, current);
        }

        if (current.pin)
        {
          foreach (var other in dataList)
          {
            if (other.id != current.id && other.pin)
            {
              other.pin = false;
              await DbEducateCertificate.Update(Layout.Company.id, other);
            }
          }
        }
        dataList = dataList.OrderByDescending(x => x.pin).ToList();
        current = null;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}