@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.system)
{
  <PopupNoRole />
}
else if (current != null)
{
  <ul class="columns is-vcentered is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info is-uppercase">
        @current.name
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button" @onclick="async() => await OnUpdate.InvokeAsync(true)">
        <span class="icon">
          <i class="material-icons-outlined">arrow_back_ios</i>
        </span>
        <span>Quay lại</span>
      </a>
    </li>
  </ul>
  <ul class="columns is-variable is-2 mb-2">
    <li class="column is-one-third">
      <div class="control has-icons-right has_suggest">
        <input class="input" type="text" placeholder="Chọn nhân viên"
               autocomplete="off" @bind="MemberSuggest" @bind:event="oninput" />
        <ul class="suggest">
          @foreach (var item in memberList)
          {
            <li class="rsitem" @onclick="() => SelectMember(item)">
              <div class="user_item">
                <img class="image is-24x24 mr-2" src="@item.avatar" alt="IMG">
                <span>@item.FullName</span>
              </div>
            </li>
          }
        </ul>
        <span class="icon is-right">
          <i class="material-icons-outlined">search</i>
        </span>
      </div>
    </li>
    <li class="column is-one-quarter">
      <div class="field has-addons">
        <div class="control">
          <label class="button is-static">Chức vụ</label>
        </div>
        <div class="control is-expanded">
          <div class="select is-fullwidth">
            <select @bind="memnberRole">
              <option value="1">@current.manager</option>
              <option value="2">@current.deputy</option>
              <option value="3">Nhân viên</option>
            </select>
          </div>
        </div>
      </div>
    </li>
    <li class="column"></li>
    <li class="column is-narrow">
      <a class="button is-small is-link" @onclick="Update">
        <span class="icon">
          <i class="material-icons-outlined is-size-6">add</i>
        </span>
        <span>Thêm nhân sự</span>
      </a>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1">
    <table class="table is-fullwidth is-vcentered is-responsive">
      <thead>
        <tr>
          <th class="pt-0" width="30%">Nhân viên</th>
          <th class="pt-0">Phòng ban</th>
          <th class="pt-0" width="15%">Chức vụ</th>
          <th class="pt-0" width="50px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in current.members_list)
        {
          var user = allMember.SingleOrDefault(x => x.id == item.id);
          if (user != null)
          {
            <tr>
              <td>
                <div class="user_item">
                  <img class="image is-24x24 mr-2" src="@user.avatar" alt="IMG">
                  <span>@user.FullName</span>
                </div>
              </td>
              <td>
                <label class="td-label">Phòng ban</label>
                <div class="td-value">
                  <div class="text_1_line">
                    @user.departments_name
                  </div>
                </div>
              </td>
              <td>
                <label class="td-label">Quyền hạn</label>
                <div class="td-value">
                  @if (item.role == 1)
                  {
                    <span class="tag is-danger">@current.manager</span>
                  }
                  else if (item.role == 2)
                  {
                    <span class="tag is-warning">@current.deputy</span>
                  }
                  else
                  {
                    <span class="tag">Nhân viên</span>
                  }
                </div>
              </td>
              <td align="center">
                <label class="td-label">Xử lý</label>
                <div class="td-value">
                  <a class="icon has-text-danger" @onclick="() => DeleteItem(item)">
                    <i class="material-icons-outlined is-size-5">
                      delete
                    </i>
                  </a>
                </div>
              </td>
            </tr>
          }
          else
          {
            <tr>
              <td colspan="3">
                <i>Nhân viên đã bị xóa</i>
              </td>
              <td align="center">
                <label class="td-label">Xử lý</label>
                <div class="td-value">
                  <a class="delete" @onclick="() => DeleteItem(item)"></a>
                </div>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }

  [Parameter]
  public string Id { get; set; }
  [Parameter]
  public EventCallback<bool> OnUpdate { get; set; }


  private bool _loaded = false;
  private bool success = false;
  private string _title = "Nhân sự phòng ban";

  private DepartmentModel current = new() { members_id = new(), members_list = new() };
  private List<UserModel> allMember = new();
  private List<UserModel> memberList = new();
  private List<DepartmentModel> departmentAll = new();
  private string memberKey = string.Empty;
  private string memberId = string.Empty;
  private int memnberRole = 3;

  protected override async Task OnInitializedAsync()
  {
    allMember = await DbUser.GetAll(Layout.Company.id, globalService);
  }

  protected override async Task OnParametersSetAsync()
  {
    departmentAll = await DbDepartment.GetAll(Layout.Company.id);
    current = await DbDepartment.Get(Layout.Company.id, Id);
    if (current == null)
    {
      await JSRuntime.InvokeVoidAsync("tagline", false, "Dữ liệu không tồn tại hoặc đã bị xóa !");
    }
    else
    {
      if (current.members_id == null)
        current.members_id = new();
      if (current.members_list == null)
        current.members_list = new();
    }
    _loaded = true;
  }

  private string MemberSuggest
  {
    get => memberKey;
    set
    {
      memberKey = value;
      memberList = new();
      if (!string.IsNullOrEmpty(value))
      {
        foreach (var item in allMember)
        {
          if (Shared.SearchKeyword(value, item.email + item.FullName))
            memberList.Add(item);
        }
      }
    }
  }

  private void SelectMember(UserModel item)
  {
    memberId = item.id;
    memberKey = item.first_name + " " + item.last_name;
    memberList = new();
  }

  private async Task<bool> DeleteItem(DepartmentModel.MembersList item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa tài khoản này ra khỏi phòng ban ?"))
        return false;

      current.members_list.Remove(item);
      current.members_id.Remove(item.id);
      await DbDepartment.Update(Layout.Company.id, current);

      // Lấy thông tin nhân viên
      var user = allMember.SingleOrDefault(x => x.id == item.id);
      if (user != null)
      {
        if (user.departments_id == null)
          user.departments_id = new();

        // Xóa trong data user
        user.departments_id.Remove(current.id);
        // Xóa chức danh
        if (item.role != 3 && item.role == user.title)
          user.title = 3;

        // Xóa luôn ở phòng ban con
        var childs = await DbDepartment.GetAllChilds(Layout.Company.id, current.id, null);
        foreach (var child in childs)
        {
          if (child.members_list != null)
          {
            var delete = child.members_list.SingleOrDefault(x => x.id == item.id);
            if (delete != null)
            {
              child.members_list.Remove(delete);
              child.members_id.Remove(delete.id);
              await DbDepartment.Update(Layout.Company.id, child);

              // Xóa trong data user
              user.departments_id.Remove(child.id);
              // Xóa chức danh
              if (delete.role != 3 && delete.role == user.title)
                user.title = 3;
            }
          }
        }

        // Update data user
        await DbUser.Update(Layout.Company.id, user, globalService);

        await UpdateUserDepartmentName(user.id);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      success = false;

      if (string.IsNullOrEmpty(memberId))
      {
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn chưa chọn nhân viên !");
      }
      else
      {
        current = await DbDepartment.AddMember(Layout.Company.id, current, memberId, memnberRole, globalService);

        await UpdateUserDepartmentName(memberId);

        // Gửi thông báo chuông
        var notifyType = memnberRole == 3 ? 10 : memnberRole == 1 ? 11 : 12;
        await DbNotify.Create(Layout.Company.id, notifyType, current.id, memberId, Layout.User.id);

        memnberRole = 3;
        memberId = string.Empty;
        memberKey = string.Empty;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }


  private async Task<bool> UpdateUserDepartmentName(string userId)
  {
    bool _success = true;
    try
    {
      var user = await DbUser.Get(Layout.Company.id, userId, globalService);
      if (user != null)
      {
        var department = await DbDepartment.GetNameListOfUser(Layout.Company.id, user.departments_id, departmentAll);
        user.departments_name = String.Join(" / ", department);
        await DbUser.Update(Layout.Company.id, user, globalService);
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "UpdateUserDepartmentName()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}