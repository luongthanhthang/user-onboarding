@inject IJSRuntime JSRuntime
@inject NavigationManager navigation

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.other)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        THIẾT LẬP BANNER
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-link" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <div class="inner_section flex_column" style="flex:1; @(Layout.IsMobile ? "" : "overflow:hidden")">
    <ul class="columns is-vcentered is-variable is-1 has-text-grey is-table">
      <li class="column is-narrow" style="width: 4%;"></li>
      <li class="column is-narrow" style="width: 10%;">Hình ảnh</li>
      <li class="column is-narrow" style="width: 20%;">Tiêu đề</li>
      <li class="column" style="width:24%;">Liên kết</li>
      <li class="column is-narrow" style="width: 15%;">Phòng ban</li>
      <li class="column is-narrow" style="width: 15%;">Trang hiển thị</li>
      <li class="column is-narrow has-text-centered" style="width: 6%;">Ghim</li>
      <li class="column is-narrow has-text-centered" style="width: 8%;">Xử lý</li>
    </ul>
    <div class="scrolly" style="flex:1">
      <Dropzone 
        Class="drop_banner_list"
        Items="dataList"
        TItem="BannerModel"
        InstantReplace="true"
        OnItemDrop="x => OnItemDragdrop(x)"
        WrapperClass="drop_banner_item">
        @{
          var department = departmentAll.SingleOrDefault(x => x.id == context.department);
        }
        <ul class="columns is-vcentered is-variable is-1 is-table">
          <li class="column is-narrow" style="width: 4%;">
            <span class="icon has-text-grey">
              <i class="material-icons-outlined is-size-5">swap_vert</i>
            </span>
          </li>
          <li class="column is-narrow" style="width: 10%;">
            <a class="image" href="@context.image" target="_blank">
              <img src="@context.image" alt="IMG" />
            </a>
          </li>
          <li class="column is-narrow" style="width: 20%;">
            <a class="has-text-weight-semibold" @onclick="() => EditItem(context)">
              @context.name
            </a>
          </li>
          <li class="column" style="width:20%;">
            <a class="text_1_line" href="@context.link" target="_blank">
              @context.link
            </a>
          </li>
          <li class="column is-narrow" style="width: 15%;">
            <span class="has-text-weight-semibold">@(department != null ? department.name : "")</span>
          </li>
          <li class="column is-narrow" style="width: 15%;">
            <div class="text_3_line" onclick="toggleText(this)">
              @foreach (var p in context.pages)
              {
                <p>@p.Value</p>
              }
            </div>
          </li>
          <li class="column is-narrow has-text-centered" style="width: 6%;">
            <a class="icon" @onclick="() => ToggleItem(context)">
              @if (context.pin)
              {
                <span class="material-icons-outlined is-size-4 has-text-success">
                  toggle_on
                </span>
              }
              else
              {
                <span class="material-icons-outlined is-size-4 has-text-black">
                  toggle_off
                </span>
              }
            </a>
          </li>
          <li class="column is-narrow has-text-centered" style="width: 8%;">
            <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(context)">
              <i class="material-icons-outlined is-size-5">
                edit
              </i>
            </a>
            <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(context)">
              <i class="material-icons-outlined is-size-5">
                delete
              </i>
            </a>
          </li>
        </ul>
      </Dropzone>
    </div>
  </div>
}


@if (model != null)
{
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(model.id) ? "Thêm banner mới" : "Chỉnh sửa banner")
        </div>
        <a class="delete" @onclick="() => model = null"></a>
      </div>
      <form @onsubmit="Update" class="modal-card-body scrolly">
        <ul class="columns is-multiline is-variable is-2">
          <li class="column is-full">
            <div class="field">
              <label class="label">Tiêu đề *</label>
              <div class="control">
                <input @bind="model.name" type="text" class="input" placeholder="Nhập tiêu đề..." />
              </div>
            </div>
          </li>
          <li class="column is-full">
            <div class="field">
              <label class="label">Hình ảnh *</label>
              <div class="field has-addons">
                <div class="control">
                  <a class="image is-square">
                    <img src="@model.image" />
                  </a>
                </div>
                <div class="control is-expanded">
                  <input @bind="model.image" class="input" type="text" placeholder="Nhập link hình..." />
                </div>
                <FileUpload Path="banner" IsLeft="true" Accept="image/*" Size="1500" Cloud OnUpload="x => model.image = x[0]" />
              </div>
            </div>
           </li>
           <li class="column is-full">
             <div class="field">
               <label class="label">Liên kết</label>
               <div class="control">
                 <input @bind="model.link" type="text" class="input" />
               </div>
             </div>
           </li>
           <li class="column is-two-thirds">
             <div class="field">
               <label class="label">Phòng ban</label>
               <div class="control">
                 <div class="select is-fullwidth">
                   <select @bind="model.department">
                     <option value="">Chọn phòng ban</option>
                     @foreach (var item in departments)
                    {
                      <option value="@item.id">@item.name</option>
                    }
                  </select>
                </div>
              </div>
            </div>
          </li>
          <li class="column is-one-third">
            <div class="field">
              <label class="label">Thuộc tính</label>
              <div class="control pt-2">
                <label class="checkbox">
                  <input @bind="model.pin" type="checkbox" />
                  Ghim banner
                </label>
              </div>
            </div>
          </li>
        </ul>

        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => model = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <i class="material-icons-outlined is-size-6">done</i>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Thiết lập Banner";
  private BannerModel model = null;
  private List<BannerModel> dataList = new();
  private List<DepartmentModel> departmentAll = new();
  private List<DepartmentModel.SelectList> departments = new();
  private Dictionary<string, string> pageList = new();
  private string filterDepartment = string.Empty;
  private string filterPage = string.Empty;

  protected override async void OnInitialized()
  {
    departmentAll = await DbDepartment.GetAll(Layout.Company.id);
    var departs = await DbDepartment.GetSelectList(Layout.Company.id, null, 0, null);
    departments.AddRange(departs);
    pageList = PageList();

    GetList();
  }

  private async Task<bool> GetList()
  {
    bool _success = true;
    try
    {
      dataList = await DbBanner.GetList(Layout.Company.id);

      await UpdateData();

      if (!string.IsNullOrEmpty(filterDepartment))
        dataList = dataList.Where(x => x.department == filterDepartment).ToList();
      if (!string.IsNullOrEmpty(filterPage))
        dataList = dataList.Where(x => x.pages.Keys.Contains(filterPage)).ToList();
      dataList = (from x in dataList orderby x.pin descending, x.pos select x).ToList();
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "GetList()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task UpdateData()
  {
    foreach (var item in dataList)
    {
      if (item.pages.Count != 2 || !item.pages.ContainsKey("/blogs") || !item.pages.ContainsKey("/homepage"))
      {
        item.pages = new();
        item.pages.Add("/blogs", "Tin tức");
        item.pages.Add("/homepage", "Trang chủ");
        await DbBanner.Update(Layout.Company.id, item);
      }
    }
  }

  private async Task<bool> DeleteItem(BannerModel item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      dataList.Remove(item);
      await DbBanner.Delete(Layout.Company.id, item.id);
      Files.DeleteFile(item.image);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<bool> ToggleItem(BannerModel item)
  {
    bool _success = true;
    try
    {
      item.pin = !item.pin;
      await DbBanner.Update(Layout.Company.id, item);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "ToggleItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(BannerModel item)
  {
    if (item == null)
    {
      model = new() { pages = new Dictionary<string, string>() };
    }
    else
    {
      model = item;
    }
  }

  private async Task<bool> OnItemDragdrop(BannerModel item)
  {
    bool _success = true;
    try
    {
      for (int pos = 0; pos < dataList.Count; pos++)
      {
        var banner = dataList[pos];
        banner.pos = pos;
        await DbBanner.Update(Layout.Company.id, banner);
      }
      GetList();

    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "OnItemDragdrop()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void SelectPage(ChangeEventArgs e)
  {
    var key = e.Value.ToString();
    if (!string.IsNullOrEmpty(key))
    {
      var check = model.pages.Where(x => x.Key == key).Count();
      if (check == 0)
      {
        var item = pageList.SingleOrDefault(x => x.Key == key);
        model.pages.Add(item.Key, item.Value);
      }
    }
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (string.IsNullOrEmpty(model.name) || string.IsNullOrEmpty(model.image))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn cần nhập nội dung và hình ảnh !");
      else
      {
        if (string.IsNullOrEmpty(model.id))
          await DbBanner.Create(Layout.Company.id, model);
        else
          await DbBanner.Update(Layout.Company.id, model);
        model = null;
        GetList();
        await JSRuntime.InvokeVoidAsync("tagline", true, "Đã cập nhật banner thành công!");
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  // Chọn trang. 22/09/2023 => Bỏ
  private Dictionary<string, string> PageList()
  {
    var results = new Dictionary<string, string>();
    results.Add("/blogs", "Tin tức");
    results.Add("/reports", "Thống kê");
    results.Add("/teams", "Đội nhóm");
    results.Add("/todolist", "Todolist");
    results.Add("/okr/setup", "OKRs / Thiết lập");
    results.Add("/okr/overview", "OKRs / Tổng quan");
    results.Add("/okr/checkin", "OKRs / Check-in");
    results.Add("/cfr", "Ghi nhận - tặng sao");
    results.Add("/kaizen", "Kaizen");
    results.Add("/gift", "Đổi quà");
    results.Add("/educate", "Đào tạo");
    return results;
  }
}