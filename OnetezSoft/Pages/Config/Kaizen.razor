@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject GlobalService globalService

<PageTitle>@_title</PageTitle>

@if (Layout.User.role != 1 && !Layout.User.role_manage.kaizen)
{
  <PopupNoRole />
}
else
{
  <ul class="columns is-vcentered is-multiline is-variable is-2 mb-2">
    <li class="column">
      <h1 class="title is-5 has-text-info">
        CẤU HÌNH CHỦ ĐỀ KAIZEN
      </h1>
    </li>
    <li class="column is-narrow">
      <a class="button is-small" @onclick="() => EditItem(null)">
        <span class="icon">
          <span class="material-icons-outlined is-size-6">add</span>
        </span>
        <span>Thêm mới</span>
      </a>
    </li>
  </ul>
  <div class="scrolly inner_section" style="flex:1;">
    <table class="table is-fullwidth is-vcentered">
      <thead>
        <tr>
          <th class="pt-0" width="60px">Hình</th>
          <th class="pt-0">Tên chủ đề</th>
          <th class="pt-0" width="70px" align="center">Xử lý</th>
        </tr>
      </thead>
      <tbody>
        @if (company.kaizen != null)
        {
          var parents = company.kaizen.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
          foreach (var main in parents)
          {
            var childs = company.kaizen.Where(x => x.parent == main.id).ToList();
            <tr>
              <td>
                @if (!string.IsNullOrEmpty(main.image))
                {
                  <a class="image is-32x32" href="@main.image" target="_blank">
                    <img src="@main.image" alt="IMG">
                  </a>
                }
              </td>
              <td>
                <a class="has-text-weight-semibold" @onclick="() => EditItem(main)">@main.name</a>
              </td>
              <td align="center">
                <label class="td-label">Xử lý</label>
                <div class="td-value">
                  <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(main)">
                    <i class="material-icons-outlined is-size-5">
                      edit
                    </i>
                  </a>
                  <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(main)">
                    <i class="material-icons-outlined is-size-5">
                      delete
                    </i>
                  </a>
                </div>
              </td>
            </tr>
            foreach (var item in childs)
            {
              <tr>
                <td align="center">
                  @if (!string.IsNullOrEmpty(item.image))
                  {
                    <a class="image is-32x32" href="@item.image" target="_blank">
                      <img src="@item.image" alt="IMG">
                    </a>
                  }
                </td>
                <td>
                  <span class="mr-2">└─</span>
                  <a @onclick="() => EditItem(item)">@item.name</a>
                </td>
                <td align="center">
                  <label class="td-label">Xử lý</label>
                  <div class="td-value">
                    <a class="icon has-text-link" title="Chỉnh sửa" @onclick="() => EditItem(item)">
                      <i class="material-icons-outlined is-size-5">
                        edit
                      </i>
                    </a>
                    <a class="icon has-text-danger" title="Xóa" @onclick="() => DeleteItem(item)">
                      <i class="material-icons-outlined is-size-5">
                        delete
                      </i>
                    </a>
                  </div>
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
  </div>
}

@if (model != null)
{
  var parents = company.kaizen.Where(x => string.IsNullOrEmpty(x.parent)).ToList();
  <div class="modal is-active">
    <div class="modal-background"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">
          @(string.IsNullOrEmpty(model.id) ? "Tạo chủ đề mới" : "Chỉnh sửa chủ đề")
        </div>
        <a class="delete" @onclick="() => model = null"></a>
      </div>
      <div class="modal-card-body">
        <div class="field">
          <label class="label">Tên chủ đề</label>
          <div class="control">
            <input @bind="model.name" type="text" class="input" />
          </div>
        </div>
        <div class="field">
          <label class="label">Chủ đề chính</label>
          <div class="control">
            <div class="select is-fullwidth">
              <select @bind="parentId">
                <option value>- Không chọn -</option>
                @foreach (var sl in parents)
                {
                  <option value="@sl.id">@sl.name</option>
                }
              </select>
            </div>
          </div>
        </div>
        <div class="field">
          <label class="label">Hình đại diện</label>
          <div class="field has-addons">
            <div class="control">
              <a class="image is-square">
                <img src="@model.image" />
              </a>
            </div>
            <div class="control is-expanded">
              <input @bind="model.image" class="input" type="text" placeholder="Nhập link hình..." />
            </div>
            <FileUpload Path="kaizen" Cloud Accept="image/*" Size="400" OnUpload="x => model.image = x[0]" />
          </div>
        </div>
        <div class="field mt-5">
          <div class="buttons is-right">
            <a class="button" @onclick="() => model = null">
              Hủy
            </a>
            <a class="button is-link" @onclick="Update">
              <span class="icon">
                <span class="material-icons-outlined is-size-6">
                  done
                </span>
              </span>
              <span>Cập nhật</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  private string _title = "Cấu hình chủ đề Kaizen";
  private CompanyModel company = new();
  private CompanyModel.Kaizen model = null;
  private string parentId = null;

  protected override async Task OnInitializedAsync()
  {
    company = await DbMainCompany.Get(Layout.Company.id);
  }

  private async Task<bool> DeleteItem(CompanyModel.Kaizen item)
  {
    bool _success = true;
    try
    {
      if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa {item.name}"))
        return false;

      company.kaizen.Remove(item);
      await DbMainCompany.Update(company);
      await globalService.Update(company.id);
      Files.DeleteFile(item.image);
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "DeleteItem()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private void EditItem(CompanyModel.Kaizen item)
  {
    if (item == null)
    {
      model = new();
    }
    else
    {
      model = item;
      parentId = model.parent;
    }
  }

  private async Task<bool> Update()
  {
    bool _success = true;
    try
    {
      if (StringHelper.IsEmpty(model.name))
        await JSRuntime.InvokeVoidAsync("tagline", false, "Bạn cần nhập tên chủ đề !");
      else
      {
        model.parent = parentId;
        if (string.IsNullOrEmpty(model.id))
        {
          model.id = Mongo.RandomId();
          company.kaizen.Add(model);
        }
        await DbMainCompany.Update(company);
        await globalService.Update(company.id);
        model = null;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Update()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }
}