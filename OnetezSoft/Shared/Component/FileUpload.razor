@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@implements IAsyncDisposable
@using System.Diagnostics
@using System.IO;
@using Google.Apis.Upload;

<div class="control file_upload" @ref="dropZoneElement">
  @if (Small)
  {
    <a class="button @ButtonCss @(isLoading ? "is-loading" : "")"
       onclick="document.getElementById('@FileId').click()" title="Chọn file"
       style="border-radius: 6px; width: 24px; height: 24px; padding: 0px;">
      <span class="icon">
        <i class="material-icons-outlined is-size-6">upload</i>
      </span>
    </a>
  }
  else
  {
    <a class="button @ButtonCss @(isLoading ? "is-loading" : "")"
       onclick="document.getElementById('@FileId').click()" title="Chọn file">
      <span class="icon">
        <i class="material-icons-outlined is-size-5">upload</i>
      </span>
    </a>
  }

  @if (ShowProgress && progress != null)
  {
    <div class="upload_progress" style="@(IsLeft ? "right: calc(100% - 35px);" : "")" @onclick="CloseProgress">
      <div>
        Tải lên: @(percentage)%
      </div>
      <progress class="progress is-primary" value="@percentage" max="100">@(percentage)%</progress>
    </div>
  }

  @if (Multiple)
  {
    <InputFile id="@FileId" class="is-hidden" OnChange="Upload" multiple accept="@Accept" @ref="inputFile"/>
  }
  else
  {
    <InputFile id="@FileId" class="is-hidden" OnChange="Upload" accept="@Accept" @ref="inputFile"/>
  }
  <span style="opacity:0;pointer-events:none;position:absolute">Chọn file</span>
</div>

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public string Accept { get; set; } = "*"; // image/*
  [Parameter]
  public bool Multiple { get; set; } = false;
  [Parameter]
  public bool Cloud { get; set; } = false;
  [Parameter]
  public bool Small { get; set; } = false;
  [Parameter]
  public int Size { get; set; } = 0;
  [Parameter]
  public string FileId { get; set; }
  [Parameter]
  public EventCallback<List<string>> OnUpload { get; set; }
  [Parameter]
  public bool isCMSUpload { get; set; }
  [Parameter]
  public string ButtonCss { get; set; }
  [Parameter]
  public string Path { get; set; } = "other";
  [Parameter]
  public bool UploadToMain { get; set; }
  [Parameter]
  public int ImageCompressSize { get; set; }
  [Parameter]
  public bool ShowProgress { get; set; } = true;
  [Parameter]
  public bool IsLeft { get; set; } = false;

  private bool isLoading = false;
  private long maxSize => Cloud ? 20 * 1024000 : 10 * 1024000;
  private int maxFile = 10;

  private double? progress;
  private double percentage;
  private double totalSize;

  private ElementReference dropZoneElement;
  private InputFile inputFile;
  private IJSObjectReference _module;
  private IJSObjectReference _dropZoneInstance;

  protected override void OnInitialized()
  {
    if (string.IsNullOrEmpty(FileId))
      FileId = "file_" + Mongo.RandomId();

    if (string.IsNullOrEmpty(ButtonCss))
      ButtonCss = Small ? "is-outlined is-link" : "is-outlined has-text-link";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      // Load the JS file
      _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/inputFileDropzone.js");

      // Initialize the drop zone
      _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
    }
  }

  private async Task<bool> Upload(InputFileChangeEventArgs e)
  {
    progress = null;
    totalSize = 0;
    percentage = 0;
    bool _success = true;
    try
    {
      if (e.GetMultipleFiles(1000).Count > 0)
      {
        if (e.GetMultipleFiles(1000).Count > maxFile && Cloud)
        {
          await JSRuntime.InvokeVoidAsync("tagline", false, $"Giới hạn tải lên 10 file");
          return false;
        }

        isLoading = true;
        var folder = string.Empty;
        if (isCMSUpload)
          folder = "notifications";
        else if (UploadToMain)
          folder = "fastdo";
        else
          folder = Layout.Company != null ? Layout.Company.id : null;

        if (UploadToMain)
          folder = Path;

        totalSize = e.GetMultipleFiles().Sum(x => x.Size);
        foreach (var file in e.GetMultipleFiles())
        {
          try
          {
            if (file.Size <= maxSize || true)
            {
              string link = string.Empty;
              if (Cloud)
              {
                if (UploadToMain || ProductService.CheckStorage(Layout.Company.id, out string message))
                {
                  var stopWatch = new Stopwatch();
                  stopWatch.Start();
                  await JSRuntime.InvokeVoidAsync("console.log", $"Upload: {file.Name} ...");

                  if (file.Size <= 2 * 1024000 && ImageCompressSize == 0)
                  {
                    await JSRuntime.InvokeVoidAsync("console.log", "Upload through Stream");
                    link = await UploadStream(file, folder);
                  }
                  else
                  {
                    await JSRuntime.InvokeVoidAsync("console.log", "Upload through Hosting");
                    link = await UploadFiles(file, folder);
                  }

                  await JSRuntime.InvokeVoidAsync("console.log",
                    string.Format("Upload: {0} {1:0,0} KB / {2:0.0} s",
                    file.Name, file.Size / 1000, stopWatch.Elapsed.TotalSeconds));
                }
                else
                {
                  await JSRuntime.InvokeVoidAsync("tagline", false, message);
                  break;
                }
              }
              else
              {
                var stream = new StreamContent(file.OpenReadStream(file.Size));
                (link, var resize) = await Files.UploadFile(stream, file.Name, ImageCompressSize);
              }
              if (!string.IsNullOrEmpty(link))
              {
                await OnUpload.InvokeAsync(new() { link });
              }
              else
                await JSRuntime.InvokeVoidAsync("tagline", false, $"Hệ thống đang bảo trì, vui lòng thử lại sau!");
            }
            else
            {
              await JSRuntime.InvokeVoidAsync("tagline", false, "Dung lượng file quá lớn");
            }
          }
          catch (Exception ex)
          {
            await JSRuntime.InvokeVoidAsync("tagline", false, "Lỗi khi upload file: " + ex.ToString());
          }
        }
        isLoading = false;
      }
    }
    catch (Exception ex)
    {
      var formatLink = navigation.Uri.Replace(navigation.BaseUri, "/");
      StorageService.CatchLog(formatLink, "Upload()", ex.ToString(), Layout.User.id, Layout.Company.name);
      await Layout.Tagline();
      _success = false;
    }
    return _success;
  }

  private async Task<string> UploadStream(IBrowserFile file, string folder)
  {
    var stream = file.OpenReadStream(file.Size);

    var progressTracking = new Progress<IUploadProgress>(s =>
    {
      progress = s.BytesSent;
      percentage = Math.Round((double)((progress / totalSize) * 100), 0);
      StateHasChanged();
    });

    if (stream != null)
    {
      await JSRuntime.InvokeVoidAsync("console.log", " => streaming Client to Storage");
      var result = await StorageService.UploadStream(file.Name, folder, stream, UploadToMain ? "" : Layout.Company.id, Layout.User, Path, progressTracking);

      await Task.Delay(2000);
      new Task(() =>
      {
        if (progress != null)
        {
          progress = null;
          StateHasChanged();
        }
      }).Start();

      return result;
    }
    else
    {
      return string.Empty;
    }
  }

  private async Task<string> UploadFiles(IBrowserFile file, string folder)
  {
    var progressTracking = new Progress<IUploadProgress>(s =>
    {
      progress = s.BytesSent;
      percentage = Math.Round((double)((progress / totalSize) * 100), 0);
      StateHasChanged();
    });

    var stream = new StreamContent(file.OpenReadStream(file.Size));
    // Upload file lên server
    var (linkFile, resize) = await Files.UploadFile(stream, file.Name, ImageCompressSize);
    totalSize = resize;

    await JSRuntime.InvokeVoidAsync("console.log", " => moving Server to Storage");
    // Upload file từ server lên cloud
    var result = await StorageService.UploadAsync(linkFile, folder, UploadToMain ? "" : Layout.Company.id, Layout.User, Path, progressTracking);

    await Task.Delay(2000);
    new Task(() =>
    {
      if(progress != null)
      {
        progress = null;
        StateHasChanged();
      }
    }).Start();

    return result;
  }

  private void CloseProgress()
  {
    if (percentage == 100)
    {
      progress = null;
      StateHasChanged();
    }
  }

  public async ValueTask DisposeAsync()
  {
    try
    {
      if (_dropZoneInstance != null)
      {
        _dropZoneInstance.DisposeAsync();
      }

      if (_module != null)
      {
        _module.DisposeAsync();
      }
    }
    catch(Exception ex)
    {
      return;
    }
  }
}