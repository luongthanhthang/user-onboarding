<Dropdown
   DropdownClass="small_datepicker"
   MenuClass="px-2" 
   Toggle=@toggle 
   OnToggle="Toggle">
   <Trigger>
      @if (value > 0)
      {
         var date = new DateTime(value);
         <a class="@css">
            <span class="icon">
               <i class="material-icons-round is-size-6">event</i>
            </span>
            <span>@date.ToString(format)</span>
         </a>
      }
      else
      {
         <a class="@css">
            <span class="icon">
               <i class="material-icons-round is-size-6">event</i>
            </span>
            <span>Chọn ngày</span>
         </a>
      }
   </Trigger>
   <MenuContent>
      <div class="field is-grouped mb-2">
         <div class="control">
            <a class="icon is-small" @onclick="() => ChangeMonth(false)">
               <i class="material-icons-outlined is-size-5">chevron_left</i>
            </a>
         </div>
         <div class="control is-expanded">
            <select @onchange="ChangeMonth">
               @for (int m = 12; m > 0; m--)
               {
                  if (m == month)
                  {
                     <option value="@m" selected>Tháng @m</option>
                  }
                  else
                  {
                     <option value="@m">Tháng @m</option>
                  }
               }
            </select>
         </div>
         <div class="control">
            <select @onchange="ChangeYear">
               @for (int y = DateTime.Today.Year + 2; y > 2020; y--)
               {
                  if (y == year)
                  {
                     <option value="@y" selected>@y</option>
                  }
                  else
                  {
                     <option value="@y">@y</option>
                  }
               }
            </select>
         </div>
         <div class="control">
            <a class="icon is-small" @onclick="() => ChangeMonth(true)">
               <i class="material-icons-outlined is-size-5">chevron_right</i>
            </a>
         </div>
      </div>
      <ul class="columns is-multiline is-mobile is-gapless">
         <li class="column is-narrow has-text-weight-bold">T2</li>
         <li class="column is-narrow has-text-weight-bold">T3</li>
         <li class="column is-narrow has-text-weight-bold">T4</li>
         <li class="column is-narrow has-text-weight-bold">T5</li>
         <li class="column is-narrow has-text-weight-bold">T6</li>
         <li class="column is-narrow has-text-weight-bold">T7</li>
         <li class="column is-narrow has-text-weight-bold">CN</li>
         @foreach (var week in calender)
         {
            foreach (var item in week)
            {
               var tick = item < 0 ? -item : item;
               if (tick > 0)
               {
                  var date = new DateTime(tick);
                  var active = value == tick ? "is-active" : "";
                  var today = tick == DateTime.Today.Ticks ? "has-text-weight-bold is-underlined" : "";
                  <li class="column is-narrow @active @today" @onclick="() => SelectDay(tick)">
                     <span class="@(item < 0 ? "has-text-grey" : "")">
                        @date.ToString("dd")
                     </span>
                  </li>
               }
               else
               {
                  <li class="column is-narrow"></li>
               }
            }
         }
      </ul>
   </MenuContent>
</Dropdown>

@code {
   [Parameter]
   public long value { get; set; }
   [Parameter]
   public string css { get; set; } = "icon-text";
   [Parameter]
   public string format { get; set; } = "dd/MM/yyyy";
   [Parameter]
   public EventCallback<long> OnChange { get; set; }
   private List<List<long>> calender = new();
   private int month = 0;
   private int year = 0;

   private bool toggle;

   private void Toggle()
   {
      if (toggle)
      {
         toggle = false;
      }
      else
      {
         var date = value > 0 ? new DateTime(value) : DateTime.Today;
         calender = Shared.CalenderMonth(date);
         year = date.Year;
         month = date.Month;
         toggle = true;
      }
   }

   private async Task SelectDay(long tick)
   {
      value = tick;
      toggle = false;
      await OnChange.InvokeAsync(value);
   }

   private void ChangeMonth(bool isNext)
   {
      var date = new DateTime(year, month, 1);
      date = isNext ? date.AddMonths(1) : date.AddMonths(-1);
      month = date.Month;
      year = date.Year;
      calender = Shared.CalenderMonth(date);
   }

   private void ChangeMonth(ChangeEventArgs e)
   {
      month = Convert.ToInt32(e.Value);
      var date = new DateTime(year, month, 1);
      calender = Shared.CalenderMonth(date);
   }

   private void ChangeYear(ChangeEventArgs e)
   {
      year = Convert.ToInt32(e.Value);
      var date = new DateTime(year, month, 1);
      calender = Shared.CalenderMonth(date);
   }
}