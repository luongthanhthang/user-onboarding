@inject IJSRuntime JSRuntime

@{
  var width = Layout.IsMobile ? "320px" : "350px";
}

<Dropdown CloseOnClickMenu=false MenuClass="px-3" TriggerStyle="@(isShowAdd ? "pointer-events:none" : "")" MenuStyle="@($"width: {width}")" Toggle="toggle" OnToggle="Toggle">
  <Trigger>
    @if (isShowAdd)
    {
      <span class="icon-text">
        @Content

        <span class="tag has-text-weight-bold has-background-white border-add is-clickable">
          <span class="icon">
            <i class="material-icons-round is-size-6">add</i>
          </span>
        </span>
      </span>
    }
    else
    {
      <div class="avatar_list">
        @foreach (var item in ShortList())
        {
          <span class="image is-rounded is-24x24 has-background-grey" title="@item.name">
            @if (string.IsNullOrEmpty(item.avatar))
            {
              <span class="is-text">@item.name</span>
            }
            else
            {
              <img src="@item.avatar" alt="AVT">
            }
          </span>
        }
        @if (isEdit)
        {
          <a class="icon has-background-white has-text-grey is-bordered is-rounded @(members_selected.Count == 0 ? "" : "ml-3")"
          @onclick="() => Toggle(false)">
            <i class="material-icons-outlined is-size-6">add</i>
          </a>
        }
        else
        {
          <a class="icon has-text-grey @(members_selected.Count == 0 ? "" : "ml-3")" @onclick="() => Toggle(false)">
            <i class="material-icons-outlined is-size-5">@(toggle ? "expand_more" : "chevron_right")</i>
          </a>
        }
      </div>
    }
  </Trigger>
  <MenuContent>
    @if (isEdit)
    {
      <ul class="columns is-vcentered is-multiline is-variable is-1 mb-3 is-mobile">
        <li class="column is-half font_14">
          Danh sách tài khoản
        </li>
        <li class="column is-half">
          <div class="select is-small is-fullwidth">
            <select @onchange="ChangeDepartment" class="is-family-code">
              <option value="" selected="@string.IsNullOrEmpty(selectDepart)">Phòng ban</option>
              @foreach (var item in departments)
              {
                <option value="@item.id" selected="@(selectDepart == item.id)">@item.name</option>
              }
            </select>
          </div>
        </li>
        <li class="column is-full">
          <div class="control has-icons-right">
            <input id="search_member"
                   class="input is-small is-rounded"
                   type="text" autocomplete="off"
            @bind="Search" @bind:event="oninput"
                   placeholder="Tìm tài khoản...">
            <span class="icon is-right">
              <i class="material-icons-outlined is-size-6">search</i>
            </span>
          </div>
        </li>
      </ul>
      <div class="scrolly py-1" style="max-height: 200px;">
        @foreach (var memberId in members_selected)
        {
          var item = UserService.GetMember(sources, memberId);
          <ul class="columns is-vcentered is-variable is-1 is-mobile">
            <li class="column is-narrow">
              <a class="icon is-small has-text-danger" @onclick="() => RemoveItem(memberId)">
                <i class="material-icons-outlined is-size-6">remove_circle_outline</i>
              </a>
            </li>
            <li class="column has-text-weight-medium">
              <div class="icon-text">
                <span class="image is-rounded is-24x24">
                  <img src="@item.avatar" alt="AVT">
                </span>
                <span class="ml-2" style="flex-grow: 1;">@item.name</span>
              </div>
            </li>
          </ul>
        }
        <hr class="my-2" />

        @if (suggests.Where(i => !members_selected.Contains(i.id)).ToList().Any() || members_selected.Any())
        {
          <a class="icon-text has-text-link mb-1" @onclick="() => AddMember()">
            <span class="icon is-small">
              @if (members_selected.Any() && suggests.Select(i => i.id).All(i => members_selected.Contains(i)))
              {
                <span class="material-icons-outlined is-size-6 is-clickable">
                  check_box
                </span>
              }
              else
              {
                <span class="material-icons-outlined is-size-6 is-clickable">
                  check_box_outline_blank
                </span>
              }
            </span>
            <span class="has-text-weight-semibold ml-2">
              Chọn tất cả
            </span>
          </a>
        }

        @if (suggests.Where(i => !members_selected.Contains(i.id)).ToList().Any())
        {
          @foreach (var item in suggests.Where(i => !members_selected.Contains(i.id)).ToList())
          {
            <ul class="columns is-vcentered is-variable is-1 is-mobile">
              <li class="column is-narrow">
                <a class="icon is-small has-text-info" @onclick="() => AddMember(item.id)">
                  <i class="material-icons-outlined is-size-6">add_circle_outline</i>
                </a>
              </li>
              <li class="column">
                <div class="icon-text">
                  <span class="image is-rounded is-24x24">
                    <img src="@item.avatar" alt="AVT">
                  </span>
                  <span class="ml-2" style="flex-grow: 1;">@item.name</span>
                </div>
              </li>
            </ul>
          }
        }
        else
        {
          if (members_selected.Count != suggests.Count)
          {
            <div class="py-2 has-text-grey">
              Không tìm thấy kết quả phù hợp
            </div>
          }
        }
      </div>
      <hr class="dropdown-divider">
      <div class="buttons is-right">
        <a class="button is-link is-small" @onclick="Update">
          <span class="icon">
            <i class="material-icons-round is-size-6">done</i>
          </span>
          <span class="is-size-7">Hoàn tất</span>
        </a>
        <a class="button is-small" @onclick="() => Toggle(false)">
          <span class="icon">
            <i class="material-icons-round is-size-6">close</i>
          </span>
          <span class="is-size-7">Hủy</span>
        </a>
      </div>
    }
    else
    {
      @if (!Shared.IsEmpty(headerContent))
      {
        <span>@headerContent</span>
      }
      <div class="scrolly py-1 mt-2" style="max-height: 250px;">
        @foreach (var memberId in members_selected)
        {
          var item = UserService.GetMember(sources, memberId);
          <div class="icon-text mb-1">
            <span class="image is-rounded is-24x24">
              <img src="@item.avatar" alt="AVT">
            </span>
            <span class="ml-2 text_1_line" style="max-width: 200px;">@item.name</span>
          </div>
        }
      </div>
    }
  </MenuContent>
</Dropdown>

@if (isShowList)
{
  <ul class="columns is-mobile is-variable is-1 is-multiline mt-1">
    @foreach (var item in members)
    {
      var user = sources.Find(i => i.id == item);
      if (user != null)
      {
        <li class="column is-one-third is-half-mobile">
          <div class="user_item member-add-card py-1 px-2">
            <img class="image is-24x24 m-0" src="@user.avatar" alt="IMG">
            <span class="text_1_line font_13 mx-1 has-text-black has-text-weight-medium is-fullwidth">
              @user.name
            </span>
            <span class="icon is-clickable" @onclick="() => RemoveItemMember(user.id)">
              <span class="material-icons-outlined">close</span>
            </span>
          </div>
        </li>
      }
    }
  </ul>
}

@code {
  [CascadingParameter]
  public LayoutMain Layout { get; set; }
  [Parameter]
  public List<string> members { get; set; } = new();
  [Parameter]
  public RenderFragment Content { get; set; }
  [Parameter]
  public bool isUp { get; set; }
  [Parameter]
  public bool isShowAdd { get; set; }
  [Parameter]
  public bool isShowList { get; set; }
  [Parameter]
  public int numberView { get; set; } = 2;
  [Parameter]
  public string department { get; set; }
  [Parameter]
  public List<MemberModel> sources { get; set; }
  [Parameter]
  public bool isLeft { get; set; } = false;
  [Parameter]
  public bool isEdit { get; set; }
  [Parameter]
  public string headerContent { get; set; }
  [Parameter]
  public EventCallback<List<string>> OnUpdate { get; set; }

  private bool toggle = false;
  private string keyword = string.Empty;
  private List<MemberModel> suggests = new();
  private List<DepartmentModel.SelectList> departments = new();
  private List<string> members_selected = new();
  private string selectDepart = "";


  protected override async Task OnInitializedAsync()
  {
    members_selected = members.Where(i => true).ToList();

    departments = await DbDepartment.GetSelectList(Layout.Company.id, null, 0, null);
    departments.RemoveAll(x => x.level > 1);
  }

  protected override void OnParametersSet()
  {
    toggle = false;
    keyword = null;
  }

  private string Search
  {
    get => keyword;
    set
    {
      keyword = value;
      suggests = GetSuggests();
    }
  }

  private async Task Update()
  {
    toggle = false;
    keyword = null;

    members.Clear();
    if (members_selected.Any())
    {
      foreach (var item in members_selected)
      {
        members.Add(item);
      }
    }
    await OnUpdate.InvokeAsync(members);

    selectDepart = "";
  }

  private void RemoveItem(string id)
  {
    if (members_selected.Contains(id))
    {
      members_selected.Remove(id);
      if (!string.IsNullOrEmpty(id))
        suggests.Add(UserService.GetMember(sources, id));
    }
  }

  private async Task RemoveItemMember(string id)
  {
    if (members.Contains(id))
    {
      members.Remove(id);
      if (!string.IsNullOrEmpty(id))
        suggests.Add(UserService.GetMember(sources, id));
    }
    members_selected = members.Where(i => true).ToList();

    await OnUpdate.InvokeAsync(null);
  }

  private void ChangeDepartment(ChangeEventArgs e)
  {
    selectDepart = e.Value.ToString();

    suggests = new();

    suggests = sources.Where(x =>
    {
      return (string.IsNullOrEmpty(selectDepart) ? true : x.departments_id.Contains(selectDepart));
    }).ToList();

    StateHasChanged();
  }

  private void AddMember(string id = null)
  {
    if (id == null)
      if (suggests.Select(x => x.id).All(i => members_selected.Contains(i)))
      {
        foreach (var item in members_selected)
        {
          var user = sources.Find(i => i.id == item);
          if (user != null)
            suggests.Add(user);
        }
        suggests = suggests.DistinctBy(i => i.id).ToList();
        members_selected.RemoveAll(i => suggests.Select(x => x.id).Contains(i));
      }
      else
      {
        members_selected.AddRange(suggests.Select(x => x.id));
        members_selected.Distinct();
      }
    else
       if (members_selected.Contains(id))
      members_selected.Remove(id);
    else
      members_selected.Add(id);

    members_selected = members_selected.Distinct().ToList();
  }

  private List<MemberModel> GetSuggests()
  {
    var results = new List<MemberModel>();
    foreach (var item in sources)
    {
      if (!members_selected.Contains(item.id))
      {
        bool check = true;
        if (!string.IsNullOrEmpty(department) && !item.departments_id.Contains(department))
          check = false;
        if (!Shared.SearchKeyword(keyword, item.id + item.email + item.name))
          check = false;
        if (check)
          results.Add(item);
      }
    }
    return results;
  }

  private async Task Toggle(bool e)
  {
    await JSRuntime.InvokeVoidAsync("dropdownClose");
    keyword = null;
    selectDepart = "";
    toggle = e;
    if (toggle)
    {
      suggests = GetSuggests();
    }
    else
    {
      suggests = new();
      members_selected = members.Where(i => true).ToList();
    }
  }

  private List<MemberModel> ShortList()
  {
    var results = new List<MemberModel>();
    for (int i = 0; i < members.Count; i++)
    {
      var item = UserService.GetMember(sources, members[i]);
      if (!string.IsNullOrEmpty(item.id))
      {
        results.Add(item);
        if (results.Count == numberView)
          break;
      }
    }

    if (members.Count > numberView)
    {
      int count = members.Count - numberView >= 100 ? 99 : members.Count - numberView;
      results.Add(new() { name = $"+{count}" });
    }

    return results;
  }
}
